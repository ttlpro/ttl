# Cursor Rules cho dự án TTL TikTok Live

## Cấu trúc dự án

```
amactiktoklive/
├── lib/                  # Shared libraries và business logic
├── main/                 # Electron main process
│   ├── handlers/         # IPC handlers cho mỗi loại chức năng
│   └── businesses/       # Business logic
├── renderer/             # Next.js frontend
│   ├── pages/            # Application pages
│   ├── components/       # React components
│   ├── hooks/            # Custom hooks
├── resources/            # App resources
```

## Quy tắc phát triển

### 1. Cấu trúc file và thư mục

- ✅ **Tổ chức code theo module chức năng**: Ưu tiên tổ chức theo chức năng thay vì loại file
- ✅ **Đặt tên file nhất quán**: Sử dụng kebab-case cho tên file (vd: proxy-storage.js)
- ✅ **Đặt tên thư mục nhất quán**: Sử dụng lowercase cho tên thư mục

### 2. Quy ước code

- ✅ **Sử dụng async/await**: Ưu tiên async/await thay vì Promise chains
- ✅ **Xử lý lỗi đầy đủ**: Luôn wrap các lệnh trong try/catch, đặc biệt với các hàm async
- ✅ **Logging phù hợp**: Sử dụng console.log với tiền tố emoji để dễ nhận biết:
  - 📦 Storage operations
  - 🔍 Database queries
  - 📥 Import operations
  - 📤 Export operations
  - ⚠️ Warnings
  - ❌ Errors

### 3. Electron & IPC

- ✅ **Tổ chức handlers theo module**: Mỗi loại chức năng có file handler riêng
- ✅ **Naming conventions cho IPC channels**: Sử dụng kebab-case với format: `[action]-[entity](-[detail])?`
  - Ví dụ: `get-proxies`, `add-proxy`, `bulk-move-proxies-to-folder`
- ✅ **Preload API**: Tất cả API exposed từ main process sang renderer phải thông qua preload script

### 4. React & Frontend

- ✅ **Custom hooks cho data fetching**: Sử dụng custom hooks để gọi API và quản lý state
- ✅ **Functional components**: Sử dụng functional components với hooks thay vì class components
- ✅ **Tailwind CSS**: Sử dụng Tailwind CSS cho styling

### 5. Database & Storage

- ✅ **Repository pattern**: Mỗi loại entity có một class storage riêng
- ✅ **Facade pattern**: StorageManager là facade cho tất cả các storage modules
- ✅ **Prepared statements**: Sử dụng prepared statements cho mọi SQL query để tránh SQL injection
- ✅ **Transaction**: Sử dụng transaction cho các operation phức tạp

## Các mẫu implementation thường gặp

### 1. IPC Handler

```javascript
// main/handlers/proxyHandlers.js
'bulk-move-proxies-to-folder': async (event, proxyIds, folderId) => {
  try {
    const result = await proxyManager.bulkMoveProxiesToFolder(proxyIds, folderId)
    return result
  } catch (error) {
    console.error('Error bulk moving proxies to folder:', error)
    return { success: false, error: error.message }
  }
}
```

### 2. Storage Method

```javascript
// lib/storage/proxy-storage.js
async bulkMoveProxiesToFolder(proxyIds, folderId) {
  try {
    if (!Array.isArray(proxyIds) || proxyIds.length === 0) {
      return { success: false, error: 'Danh sách proxy không hợp lệ' };
    }
    
    console.log(`🔄 Di chuyển ${proxyIds.length} proxy vào folder ${folderId}`);
    
    const now = new Date().toISOString();
    const stmt = this.db.prepare(`
      UPDATE proxies 
      SET folderId = ?, updatedAt = ? 
      WHERE id IN (${proxyIds.map(() => '?').join(',')})
    `);
    
    const params = [folderId, now, ...proxyIds];
    const result = stmt.run(...params);
    
    return { 
      success: true, 
      message: `Đã di chuyển ${result.changes} proxy sang folder mới`,
      count: result.changes 
    };
  } catch (error) {
    console.error('❌ Error bulk moving proxies to folder:', error);
    return { success: false, error: error.message };
  }
}
```

### 3. React Custom Hook

```javascript
// renderer/hooks/useProxiesData.js
export function useProxiesData() {
  const [proxies, setProxies] = useState([])
  const [folders, setFolders] = useState([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  
  const loadProxies = useCallback(async () => {
    try {
      setLoading(true)
      const result = await window.tiktokAPI.getProxies()
      setProxies(result || [])
      setError(null)
    } catch (err) {
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }, [])
  
  // Các hàm khác...
  
  return {
    proxies,
    folders,
    loading,
    error,
    loadProxies,
    // Các giá trị và hàm khác...
  }
}
```

### 4. React Component

```jsx
// renderer/components/ProxyList.jsx
export function ProxyList({ proxies, onSelect, selectedIds }) {
  return (
    <div className="overflow-x-auto">
      <table className="min-w-full bg-white dark:bg-gray-800">
        <thead className="bg-gray-50 dark:bg-gray-700">
          <tr>
            <th className="px-4 py-2">
              <input 
                type="checkbox" 
                onChange={handleSelectAll} 
                checked={isAllSelected}
              />
            </th>
            <th className="px-4 py-2">Host</th>
            <th className="px-4 py-2">Port</th>
            <th className="px-4 py-2">Status</th>
            <th className="px-4 py-2">Folder</th>
            <th className="px-4 py-2">Actions</th>
          </tr>
        </thead>
        <tbody>
          {proxies.map(proxy => (
            <ProxyItem 
              key={proxy.id} 
              proxy={proxy} 
              onSelect={onSelect}
              isSelected={selectedIds.includes(proxy.id)}
            />
          ))}
        </tbody>
      </table>
    </div>
  )
}
```

## Các mẫu debug log

### Storage Manager logs
- 📦 Storage initialized: SQLITE
- 📦 getStorageType called
- 📦 Using SQLite for better performance

### Database logs
- 🔍 SQL Query: SELECT * FROM proxies WHERE folderId = ?
- ✅ Successfully read 42 proxies from SQLite
- ❌ Error executing query: no such table: proxies

### Import/Export logs
- 📥 Bắt đầu import 7 proxy từ text với folderId=04e58da9
- 📥 Đang import proxy: {"host":"1.2.3.4","port":8080}
- 📥 Kết quả import: success=true, id=ae692f
- 📤 Exporting 5 proxies to format: ip_port 