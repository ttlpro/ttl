const BaseStorage = require('./base-storage');
const { log, error } = require('../logger');

class RoomStorage extends BaseStorage {
    /**
     * L·∫•y t·∫•t c·∫£ rooms
     */
    async getAllRooms() {
        try {
            log('üîÑ G·ªçi getAllRooms');
            const stmt = this.db.prepare(`
                SELECT * FROM rooms 
                ORDER BY lastViewed DESC, createdAt DESC
            `);
            
            const rooms = stmt.all();
            log(`üìä ƒê·ªçc ƒë∆∞·ª£c ${rooms.length} ph√≤ng t·ª´ database`);
            
            // X·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ
            const processedRooms = rooms.map(room => {
                return {
                    ...room,
                    isLive: Boolean(room.isLive),
                    // Chuy·ªÉn ƒë·ªïi c√°c tr∆∞·ªùng s·ªë
                    viewerCount: Number(room.viewerCount || 0),
                    currentViewers: Number(room.currentViewers || 0),
                    startCount: Number(room.startCount || 0),
                    targetViewers: Number(room.targetViewers || 0),
                    realViewers: Number(room.realViewers || 0),
                    duration: Number(room.duration || 30),
                    finalDuration: Number(room.finalDuration || 0),
                    // Gi·ªØ nguy√™n c√°c timestamp
                    lastViewed: room.lastViewed,
                    createdAt: room.createdAt,
                    updatedAt: room.updatedAt,
                    startedAt: room.startedAt,
                    endedAt: room.endedAt,
                    lastTimeCheckViewers: room.lastTimeCheckViewers,
                    stoppedAt: room.stoppedAt
                };
            });
            
            log(`‚úÖ ƒê√£ x·ª≠ l√Ω ${processedRooms.length} ph√≤ng, tr·∫£ v·ªÅ cho UI`);
            return this.serializeForIPC(processedRooms);
        } catch (err) {
            error('‚ùå Error getting all rooms:', err);
            return [];
        }
    }

    /**
     * Th√™m room m·ªõi
     */
    async addRoom(roomData) {
        try {
            log(`üîÑ Th√™m/c·∫≠p nh·∫≠t ph√≤ng ${roomData.roomUsername || roomData.uid}`);
            
            const now = new Date().toISOString();
            
            // ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng s·ªë ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi ƒë√∫ng
            const viewerCount = Number(roomData.viewerCount || 0);
            const currentViewers = Number(roomData.currentViewers || 0);
            const startCount = Number(roomData.startCount || 0);
            const targetViewers = Number(roomData.targetViewers || 0);
            const realViewers = Number(roomData.realViewers || 0);
            const duration = Number(roomData.duration || 30);
            const finalDuration = Number(roomData.finalDuration || 0);
            const isLive = roomData.isLive ? 1 : 0;
            
            const stmt = this.db.prepare(`
                INSERT OR REPLACE INTO rooms (
                    uid, id, roomId, roomUrl, roomUsername, 
                    nickname, avatar, avatarThumb, title,
                    viewerCount, currentViewers, startCount, targetViewers, 
                    duration, isLive, status, 
                    startedAt, endedAt, realViewers, lastTimeCheckViewers,
                    stoppedAt, stopReason, finalDuration,
                    lastViewed, notes, createdAt, updatedAt
                ) VALUES (
                    ?, ?, ?, ?, ?, 
                    ?, ?, ?, ?, 
                    ?, ?, ?, ?,
                    ?, ?, ?, 
                    ?, ?, ?, ?,
                    ?, ?, ?,
                    ?, ?, ?, ?
                )
            `);

            stmt.run(
                roomData.uid,
                roomData.id || roomData.uid,
                roomData.roomId || null,
                roomData.roomUrl || null,
                roomData.roomUsername || null,
                roomData.nickname || null,
                roomData.avatar || null,
                roomData.avatarThumb || null,
                roomData.title || '',
                viewerCount,
                currentViewers,
                startCount,
                targetViewers,
                duration,
                isLive,
                roomData.status || 'stopped',
                roomData.startedAt || now,
                roomData.endedAt || null,
                realViewers,
                roomData.lastTimeCheckViewers || null,
                roomData.stoppedAt || null,
                roomData.stopReason || null,
                finalDuration,
                roomData.lastViewed || now,
                roomData.notes || roomData.note || '',
                roomData.createdAt || now,
                roomData.updatedAt || now
            );

            // X·ª≠ l√Ω ƒë√∫ng ki·ªÉu d·ªØ li·ªáu cho d·ªØ li·ªáu tr·∫£ v·ªÅ
            const newRoom = {
                uid: roomData.uid,
                id: roomData.id || roomData.uid,
                roomId: roomData.roomId || null,
                roomUrl: roomData.roomUrl || null,
                roomUsername: roomData.roomUsername || null,
                nickname: roomData.nickname || null,
                avatar: roomData.avatar || null,
                avatarThumb: roomData.avatarThumb || null,
                title: roomData.title || '',
                viewerCount: viewerCount,
                currentViewers: currentViewers,
                startCount: startCount,
                targetViewers: targetViewers,
                duration: duration,
                isLive: Boolean(isLive),
                status: roomData.status || 'stopped',
                startedAt: roomData.startedAt || null,
                endedAt: roomData.endedAt || null,
                realViewers: realViewers,
                lastTimeCheckViewers: roomData.lastTimeCheckViewers || null,
                stoppedAt: roomData.stoppedAt || null,
                stopReason: roomData.stopReason || null,
                finalDuration: finalDuration,
                lastViewed: roomData.lastViewed || now,
                notes: roomData.notes || roomData.note || '',
                createdAt: roomData.createdAt || now,
                updatedAt: roomData.updatedAt || now
            };

            log(`‚úÖ ƒê√£ th√™m/c·∫≠p nh·∫≠t ph√≤ng: ${roomData.roomUsername} (${roomData.uid})`);
            return { success: true, room: this.serializeForIPC(newRoom) };
        } catch (err) {
            error('‚ùå Error adding room:', err);
            return { success: false, error: err.message };
        }
    }

    /**
     * C·∫≠p nh·∫≠t room
     */
    async updateRoom(roomUid, updates) {
        try {
            // Ki·ªÉm tra roomUid kh√¥ng ƒë∆∞·ª£c null
            if (!roomUid) {
                error('‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t room: roomUid l√† null');
                return { success: false, error: 'ROOM_UID_NULL' };
            }

            log(`üîÑ C·∫≠p nh·∫≠t room ${roomUid}`);
            const now = new Date().toISOString();
            
            const setFields = [];
            const values = [];
            
            for (const [key, value] of Object.entries(updates)) {
                // B·ªè qua c√°c gi√° tr·ªã undefined
                if (value === undefined) {
                    log(`‚ö†Ô∏è B·ªè qua tr∆∞·ªùng ${key} v·ªõi gi√° tr·ªã undefined`);
                    continue;
                }
                
                if (key === 'isLive') {
                    setFields.push(`${key} = ?`);
                    values.push(value ? 1 : 0);
                } else if (key === 'lastViewed' || key === 'startedAt' || key === 'endedAt' || 
                          key === 'lastTimeCheckViewers' || key === 'stoppedAt') {
                    setFields.push(`${key} = ?`);
                    values.push(value ? String(value) : null);
                } else if (key === 'roomUsername' || key === 'nickname' || key === 'avatarThumb' || 
                          key === 'avatar' || key === 'roomUrl' || key === 'title' || 
                          key === 'stopReason' || key === 'status') {
                    // ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng string lu√¥n l√† string ho·∫∑c null
                    setFields.push(`${key} = ?`);
                    values.push(value !== null && value !== undefined ? String(value) : null);
                } else if (key === 'viewerCount' || key === 'currentViewers' || key === 'startCount' || 
                          key === 'targetViewers' || key === 'duration' || key === 'realViewers' || 
                          key === 'finalDuration') {
                    // ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng s·ªë lu√¥n l√† s·ªë
                    setFields.push(`${key} = ?`);
                    values.push(Number(value) || 0);
                } else {
                    // C√°c tr∆∞·ªùng kh√°c
                    setFields.push(`${key} = ?`);
                    
                    // ƒê·∫£m b·∫£o gi√° tr·ªã l√† ki·ªÉu SQLite h·ª£p l·ªá
                    if (value === null) {
                        values.push(null);
                    } else if (typeof value === 'object') {
                        try {
                            values.push(JSON.stringify(value));
                        } catch (err) {
                            error(`‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi ${key} th√†nh JSON:`, err);
                            values.push(String(value) || null);
                        }
                    } else {
                        values.push(value);
                    }
                }
            }
            
            if (setFields.length === 0) {
                return { success: true };
            }
            
            // Lu√¥n c·∫≠p nh·∫≠t updatedAt khi c√≥ thay ƒë·ªïi
            setFields.push('updatedAt = ?');
            values.push(now);
            values.push(roomUid);
            
            const sql = `UPDATE rooms SET ${setFields.join(', ')} WHERE uid = ?`;
            const stmt = this.db.prepare(sql);
            
            log(`üîÑ Updating room ${roomUid} with fields: ${setFields.join(', ')}`);
            const result = stmt.run(...values);
            
            if (result.changes > 0) {
                log(`‚úÖ Updated room ${roomUid}`);
                return { success: true };
            } else {
                log(`‚ö†Ô∏è Room not found: ${roomUid}`);
                return { success: false, error: 'Room not found' };
            }
        } catch (err) {
            error('‚ùå Error updating room:', err);
            return { success: false, error: err.message };
        }
    }

    /**
     * X√≥a room
     */
    async deleteRoom(roomUid) {
        try {
            // Gi·∫£i ph√≥ng t·∫•t c·∫£ accounts kh·ªèi room
            await this.releaseAccountsFromRoom(roomUid);
            
            // X√≥a viewer history
            const deleteHistoryStmt = this.db.prepare(`
                DELETE FROM viewer_history WHERE roomUid = ?
            `);
            deleteHistoryStmt.run(roomUid);
            
            // X√≥a room
            const stmt = this.db.prepare(`DELETE FROM rooms WHERE uid = ?`);
            const result = stmt.run(roomUid);
            
            if (result.changes > 0) {
                log(`‚úÖ Deleted room ${roomUid}`);
                return { success: true };
            } else {
                return { success: false, error: 'Room not found' };
            }
        } catch (err) {
            error('Error deleting room:', err);
            return { success: false, error: err.message };
        }
    }

    /**
     * Clear all account-room relationships
     */
    async clearAllAccountRooms() {
        try {
            // Tr∆∞·ªõc ti√™n, l·∫•y danh s√°ch t·∫•t c·∫£ c√°c accounts ƒëang c√≥ trong account_rooms
            const accountsWithRooms = this.db.prepare(`
                SELECT DISTINCT accountId FROM account_rooms
            `).all();
            
            // X√≥a t·∫•t c·∫£ c√°c m·ªëi quan h·ªá
            const stmt = this.db.prepare(`DELETE FROM account_rooms`);
            const result = stmt.run();
            
            // ƒê·∫∑t l·∫°i currentRooms v√† activeRooms cho t·∫•t c·∫£ accounts c√≥ √≠t nh·∫•t m·ªôt ph√≤ng
            if (accountsWithRooms.length > 0) {
                const now = new Date().toISOString();
                const resetStmt = this.db.prepare(`
                    UPDATE accounts 
                    SET currentRooms = 0,
                        activeRooms = '[]',
                        updatedAt = ?
                    WHERE id = ?
                `);
                
                for (const account of accountsWithRooms) {
                    resetStmt.run(now, account.accountId);
                }
                
                log(`‚úÖ Reset currentRooms and activeRooms for ${accountsWithRooms.length} accounts`);
            }
            
            log(`‚úÖ Cleared ${result.changes} account-room relationships`);
            return result.changes;
        } catch (err) {
            error('Error clearing account rooms:', err);
            return 0;
        }
    }

    /**
     * Add account to room
     */
    async addAccountToRoom(accountId, roomId) {
        try {
            const stmt = this.db.prepare(`
                INSERT OR IGNORE INTO account_rooms (accountId, roomId, createdAt)
                VALUES (?, ?, ?)
            `);
            
            const now = new Date().toISOString();
            const result = stmt.run(accountId, roomId, now);
            
            if (result.changes > 0) {
                log(`‚úÖ Added account ${accountId} to room ${roomId}`);
                
                // C·∫≠p nh·∫≠t currentRooms trong b·∫£ng accounts
                const updateStmt = this.db.prepare(`
                    UPDATE accounts 
                    SET currentRooms = currentRooms + 1,
                        updatedAt = ?,
                        lastUsed = ?
                    WHERE id = ?
                `);
                updateStmt.run(now, now, accountId);
                
                // L·∫•y th√¥ng tin v·ªÅ room
                const roomStmt = this.db.prepare(`SELECT * FROM rooms WHERE uid = ?`);
                const roomInfo = roomStmt.get(roomId);
                
                if (roomInfo) {
                    // L·∫•y danh s√°ch activeRooms hi·ªán t·∫°i c·ªßa account
                    const accountStmt = this.db.prepare(`SELECT activeRooms FROM accounts WHERE id = ?`);
                    const accountData = accountStmt.get(accountId);
                    
                    // Parse activeRooms t·ª´ JSON string th√†nh array
                    let activeRooms = [];
                    try {
                        if (accountData && accountData.activeRooms) {
                            activeRooms = JSON.parse(accountData.activeRooms);
                        }
                    } catch (e) {
                        error(`‚ùå L·ªói khi parse activeRooms c·ªßa account ${accountId}:`, e);
                        activeRooms = [];
                    }
                    
                    // Th√™m room m·ªõi v√†o danh s√°ch n·∫øu ch∆∞a c√≥
                    const roomIdentifier = roomInfo.roomUsername || roomInfo.uid;
                    if (!activeRooms.includes(roomIdentifier)) {
                        activeRooms.push(roomIdentifier);
                        
                        // C·∫≠p nh·∫≠t activeRooms trong database
                        const updateActiveRoomsStmt = this.db.prepare(`
                            UPDATE accounts 
                            SET activeRooms = ?,
                                updatedAt = ?
                            WHERE id = ?
                        `);
                        updateActiveRoomsStmt.run(JSON.stringify(activeRooms), now, accountId);
                        log(`‚úÖ Updated activeRooms for account ${accountId}: Added ${roomIdentifier}`);
                    }
                }
                
                return { success: true };
            } else {
                return { success: false, error: 'Relationship already exists' };
            }
        } catch (err) {
            error('Error adding account to room:', err);
            return { success: false, error: err.message };
        }
    }

    /**
     * Remove account from room
     */
    async removeAccountFromRoom(accountId, roomId) {
        try {
            const stmt = this.db.prepare(`
                DELETE FROM account_rooms WHERE accountId = ? AND roomId = ?
            `);
            
            const now = new Date().toISOString();
            const result = stmt.run(accountId, roomId);
            
            if (result.changes > 0) {
                log(`‚úÖ Removed account ${accountId} from room ${roomId}`);
                
                // Gi·∫£m currentRooms trong b·∫£ng accounts
                const updateStmt = this.db.prepare(`
                    UPDATE accounts 
                    SET currentRooms = MAX(0, currentRooms - 1),
                        updatedAt = ?
                    WHERE id = ?
                `);
                updateStmt.run(now, accountId);
                
                // L·∫•y th√¥ng tin v·ªÅ room
                const roomStmt = this.db.prepare(`SELECT * FROM rooms WHERE uid = ?`);
                const roomInfo = roomStmt.get(roomId);
                
                if (roomInfo) {
                    // L·∫•y danh s√°ch activeRooms hi·ªán t·∫°i c·ªßa account
                    const accountStmt = this.db.prepare(`SELECT activeRooms FROM accounts WHERE id = ?`);
                    const accountData = accountStmt.get(accountId);
                    
                    // Parse activeRooms t·ª´ JSON string th√†nh array
                    let activeRooms = [];
                    try {
                        if (accountData && accountData.activeRooms) {
                            activeRooms = JSON.parse(accountData.activeRooms);
                        }
                    } catch (e) {
                        error(`‚ùå L·ªói khi parse activeRooms c·ªßa account ${accountId}:`, e);
                        activeRooms = [];
                    }
                    
                    // X√≥a room kh·ªèi danh s√°ch activeRooms
                    const roomIdentifier = roomInfo.roomUsername || roomInfo.uid;
                    const updatedActiveRooms = activeRooms.filter(room => room !== roomIdentifier);
                    
                    // C·∫≠p nh·∫≠t activeRooms trong database
                    const updateActiveRoomsStmt = this.db.prepare(`
                        UPDATE accounts 
                        SET activeRooms = ?,
                            updatedAt = ?
                        WHERE id = ?
                    `);
                    updateActiveRoomsStmt.run(JSON.stringify(updatedActiveRooms), now, accountId);
                    log(`‚úÖ Updated activeRooms for account ${accountId}: Removed ${roomIdentifier}`);
                }
                
                return { success: true };
            } else {
                return { success: false, error: 'Relationship not found' };
            }
        } catch (err) {
            error('Error removing account from room:', err);
            return { success: false, error: err.message };
        }
    }

    /**
     * Get accounts in room
     */
    async getAccountsInRoom(roomId) {
        try {
            log(`üîç L·∫•y danh s√°ch accounts trong ph√≤ng ${roomId}`);
            const stmt = this.db.prepare(`
                SELECT a.*, ar.createdAt as joinedAt
                FROM accounts a
                INNER JOIN account_rooms ar ON a.id = ar.accountId
                WHERE ar.roomId = ?
                ORDER BY ar.createdAt DESC
            `);
            
            const accountsRaw = stmt.all(roomId);
            log(`üìä T√¨m th·∫•y ${accountsRaw.length} accounts trong ph√≤ng ${roomId}`);
            
            // X·ª≠ l√Ω d·ªØ li·ªáu accounts
            const accounts = accountsRaw.map(account => {
                // Parse activeRooms t·ª´ JSON string th√†nh array
                let activeRooms = [];
                try {
                    if (account.activeRooms) {
                        activeRooms = JSON.parse(account.activeRooms);
                    }
                } catch (err) {
                    error(`‚ùå L·ªói khi parse activeRooms c·ªßa account ${account.id}:`, err);
                    activeRooms = [];
                }
                
                return {
                    ...account,
                    // Convert Boolean
                    isLive: Boolean(account.isLive),
                    // C·∫•u tr√∫c d·ªØ li·ªáu ph·ª©c t·∫°p
                    activeRooms: activeRooms,
                    // Convert s·ªë
                    currentRooms: Number(account.currentRooms || 0),
                    viewerCount: Number(account.viewerCount || 0),
                    followCount: Number(account.followCount || 0),
                    shareCount: Number(account.shareCount || 0),
                    totalViews: Number(account.totalViews || 0),
                    totalShares: Number(account.totalShares || 0),
                    totalFollows: Number(account.totalFollows || 0),
                    // Gi·ªØ nguy√™n timestamps
                    lastActive: account.lastActive,
                    lastUsed: account.lastUsed,
                    createdAt: account.createdAt,
                    updatedAt: account.updatedAt,
                    joinedAt: account.joinedAt
                };
            });
            
            return this.serializeForIPC(accounts);
        } catch (err) {
            error('‚ùå Error getting accounts in room:', err);
            return [];
        }
    }

    /**
     * Get room by UID
     */
    async getRoomByUid(roomUid) {
        try {
            log(`üîç L·∫•y th√¥ng tin ph√≤ng ${roomUid}`);
            const stmt = this.db.prepare(`SELECT * FROM rooms WHERE uid = ?`);
            const room = stmt.get(roomUid);
            
            if (room) {
                // X·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ
                const processedRoom = {
                    ...room,
                    isLive: Boolean(room.isLive),
                    // Chuy·ªÉn ƒë·ªïi c√°c tr∆∞·ªùng s·ªë
                    viewerCount: Number(room.viewerCount || 0),
                    currentViewers: Number(room.currentViewers || 0),
                    startCount: Number(room.startCount || 0),
                    targetViewers: Number(room.targetViewers || 0),
                    realViewers: Number(room.realViewers || 0),
                    duration: Number(room.duration || 30),
                    finalDuration: Number(room.finalDuration || 0),
                    // Gi·ªØ nguy√™n c√°c timestamp
                    lastViewed: room.lastViewed,
                    createdAt: room.createdAt,
                    updatedAt: room.updatedAt,
                    startedAt: room.startedAt,
                    endedAt: room.endedAt,
                    lastTimeCheckViewers: room.lastTimeCheckViewers,
                    stoppedAt: room.stoppedAt
                };

                log(`‚úÖ ƒê√£ t√¨m th·∫•y ph√≤ng ${roomUid}`);
                return this.serializeForIPC(processedRoom);
            }
            
            log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ph√≤ng ${roomUid}`);
            return null;
        } catch (err) {
            error('‚ùå Error getting room by UID:', err);
            return null;
        }
    }

    // =================
    // VIEWER HISTORY
    // =================

    /**
     * Add viewer history entry
     */
    async addViewerHistoryEntry(roomUid, viewerData) {
        try {
            // Ki·ªÉm tra roomUid kh√¥ng ƒë∆∞·ª£c null
            if (!roomUid) {
                error('‚ùå Kh√¥ng th·ªÉ th√™m viewer history: roomUid l√† null');
                return { success: false, error: 'ROOM_UID_NULL' };
            }
            
            const stmt = this.db.prepare(`
                INSERT INTO viewer_history (roomUid, viewerCount, timestamp)
                VALUES (?, ?, ?)
            `);
            
            stmt.run(
                roomUid,
                viewerData.viewerCount || viewerData.viewers || 0,
                viewerData.timestamp || new Date().toISOString()
            );
            
            return { success: true };
        } catch (err) {
            error('Error adding viewer history entry:', err);
            return { success: false, error: err.message };
        }
    }

    /**
     * Get room viewer history
     */
    async getRoomViewerHistory(roomUid, days = null) {
        try {
            let sql = `
                SELECT * FROM viewer_history 
                WHERE roomUid = ?
            `;
            const params = [roomUid];
            
            if (days) {
                const cutoffDate = new Date();
                cutoffDate.setDate(cutoffDate.getDate() - days);
                sql += ` AND timestamp >= ?`;
                params.push(cutoffDate.toISOString());
            }
            
            sql += ` ORDER BY timestamp DESC`;
            
            const stmt = this.db.prepare(sql);
            const history = stmt.all(...params).map(entry => ({
                ...entry,
                timestamp: entry.timestamp
            }));
            
            return this.serializeForIPC(history);
        } catch (err) {
            error('Error getting room viewer history:', err);
            return [];
        }
    }

    /**
     * Cleanup old viewer history
     */
    async cleanupViewerHistoryFiles() {
        try {
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 30);
            
            const stmt = this.db.prepare(`
                DELETE FROM viewer_history WHERE timestamp < ?
            `);
            
            const result = stmt.run(cutoffDate.toISOString());
            log(`‚úÖ Cleaned up ${result.changes} old viewer history entries`);
            
            return result.changes;
        } catch (err) {
            error('Error cleaning up viewer history:', err);
            return 0;
        }
    }

    /**
     * Gi·∫£i ph√≥ng t·∫•t c·∫£ accounts kh·ªèi room (d√πng khi stop ho·∫∑c delete room)
     * H√†m ti·ªán √≠ch ƒë·ªÉ tr√°nh l·∫∑p code - PRODUCTION SAFE VERSION
     */
    async releaseAccountsFromRoom(roomId) {
        // Ki·ªÉm tra roomId kh√¥ng ƒë∆∞·ª£c null
        if (!roomId) {
            error('‚ùå Kh√¥ng th·ªÉ gi·∫£i ph√≥ng accounts: roomId l√† null');
            return { success: false, error: 'ROOM_ID_NULL' };
        }
        
        try {
            // L·∫•y th√¥ng tin v·ªÅ room ƒë·ªÉ bi·∫øt roomUsername
            const roomStmt = this.db.prepare(`SELECT * FROM rooms WHERE uid = ?`);
            const roomInfo = roomStmt.get(roomId);
            
            if (!roomInfo) {
                log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y room ${roomId} ƒë·ªÉ gi·∫£i ph√≥ng accounts`);
                return { success: false, error: 'Room not found' };
            }
            
            // L·∫•y danh s√°ch c√°c accounts trong room
            const accountsInRoomStmt = this.db.prepare(`
                SELECT accountId FROM account_rooms WHERE roomId = ?
            `);
            const accountsInRoom = accountsInRoomStmt.all(roomId);
            
            if (accountsInRoom.length === 0) {
                log(`‚ÑπÔ∏è Kh√¥ng c√≥ accounts n√†o trong room ${roomId} c·∫ßn gi·∫£i ph√≥ng`);
                return { success: true, message: 'No accounts to release' };
            }
            
            log(`üîÑ Gi·∫£i ph√≥ng ${accountsInRoom.length} accounts kh·ªèi room ${roomId}`);
            
            const now = new Date().toISOString();
            const roomIdentifier = roomInfo.roomUsername || roomInfo.uid;
            
            // Chu·∫©n b·ªã c√°c prepared statements ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
            const deleteRelationsStmt = this.db.prepare(`
                DELETE FROM account_rooms WHERE roomId = ?
            `);
            const countRoomsStmt = this.db.prepare(`
                SELECT COUNT(*) as roomCount FROM account_rooms WHERE accountId = ?
            `);
            const accountStmt = this.db.prepare(`
                SELECT activeRooms FROM accounts WHERE id = ?
            `);
            const updateAccountStmt = this.db.prepare(`
                UPDATE accounts 
                SET currentRooms = ?,
                    activeRooms = ?,
                    updatedAt = ?
                WHERE id = ?
            `);
            
            // B∆Ø·ªöC 1: C·∫≠p nh·∫≠t activeRooms cho t·ª´ng account TR∆Ø·ªöC KHI x√≥a relationships
            for (const account of accountsInRoom) {
                const accountId = account.accountId;
                
                try {
                    // L·∫•y danh s√°ch activeRooms hi·ªán t·∫°i
                    const accountData = accountStmt.get(accountId);
                    
                    // Parse activeRooms t·ª´ JSON string th√†nh array v·ªõi robust error handling
                    let activeRooms = [];
                    if (accountData && accountData.activeRooms) {
                        try {
                            const parsed = JSON.parse(accountData.activeRooms);
                            if (Array.isArray(parsed)) {
                                activeRooms = parsed;
                            } else {
                                error(`‚ùå activeRooms kh√¥ng ph·∫£i array cho account ${accountId}:`, parsed);
                                activeRooms = [];
                            }
                        } catch (e) {
                            error(`‚ùå L·ªói khi parse activeRooms c·ªßa account ${accountId}:`, e);
                            activeRooms = [];
                        }
                    }
                    
                    // X√≥a room kh·ªèi danh s√°ch activeRooms v·ªõi nhi·ªÅu format matching
                    const updatedActiveRooms = activeRooms.filter(room => {
                        // Ki·ªÉm tra v·ªõi t·∫•t c·∫£ c√°c format c√≥ th·ªÉ c√≥
                        return room !== roomIdentifier && 
                               room !== roomInfo.uid && 
                               room !== roomInfo.roomUsername &&
                               room !== roomId;
                    });
                    
                    // ƒê·∫øm s·ªë room c√≤n l·∫°i SAU KHI x√≥a relationship n√†y
                    const currentRoomCount = countRoomsStmt.get(accountId).roomCount;
                    const newRoomCount = Math.max(0, currentRoomCount - 1);
                    
                    // C·∫≠p nh·∫≠t account v·ªõi d·ªØ li·ªáu m·ªõi
                    updateAccountStmt.run(
                        newRoomCount,
                        JSON.stringify(updatedActiveRooms),
                        now,
                        accountId
                    );
                    
                    log(`‚úÖ Updated account ${accountId}: currentRooms=${newRoomCount}, activeRooms removed ${roomIdentifier}`);
                    
                } catch (accountError) {
                    error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t account ${accountId}:`, accountError);
                    // Ti·∫øp t·ª•c v·ªõi account kh√°c thay v√¨ d·ª´ng to√†n b·ªô
                    continue;
                }
            }
            
            // B∆Ø·ªöC 2: X√≥a t·∫•t c·∫£ c√°c m·ªëi quan h·ªá account-room SAU KHI ƒë√£ c·∫≠p nh·∫≠t
            const deleteResult = deleteRelationsStmt.run(roomId);
            
            log(`‚úÖ ƒê√£ gi·∫£i ph√≥ng ${accountsInRoom.length} accounts kh·ªèi room ${roomId}, x√≥a ${deleteResult.changes} relationships`);
            
            return { 
                success: true, 
                accountsReleased: accountsInRoom.length,
                relationshipsDeleted: deleteResult.changes
            };
            
        } catch (err) {
            error(`‚ùå L·ªói khi gi·∫£i ph√≥ng accounts kh·ªèi room ${roomId}:`, err);
            return { success: false, error: err.message };
        }
    }
}

module.exports = RoomStorage; 