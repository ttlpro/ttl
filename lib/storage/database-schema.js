const BaseStorage = require('./base-storage');
const { log, error } = require('../logger');

class DatabaseSchema extends BaseStorage {
    /**
     * T·∫°o t·∫•t c·∫£ tables
     */

    resetRoomAccountsAndProxies(){
        try {
            // Ki·ªÉm tra database connection
            if (!this.db) {
                error('‚ùå Database connection not initialized');
                return false;
            }

            log('üîÑ Resetting room accounts and proxies...');
            
            const now = new Date().toISOString();
            
            // S·ª≠ d·ª•ng transaction ƒë·ªÉ ƒë·∫£m b·∫£o consistency
            const resetTransaction = this.db.transaction(() => {
                // 1. Reset rooms status
                const resetRoomsStmt = this.db.prepare(`
                    UPDATE rooms 
                    SET status = 'stopped', 
                        stoppedAt = ?, 
                        endedAt = ?,
                        updatedAt = ?,
                        stopReason = 'reset_stopped'
                    WHERE status IN ('watching')
                `);
                const roomsResult = resetRoomsStmt.run(now, now, now);
                log(`üîÑ Reset ${roomsResult.changes} rooms to stopped status`);
                
                // 2. Reset accounts activeRooms and currentRooms
                const resetAccountsStmt = this.db.prepare(`
                    UPDATE accounts 
                    SET activeRooms = '[]', 
                        currentRooms = 0, 
                        lastUsed = ?,
                        updatedAt = ?
                `);
                const accountsResult = resetAccountsStmt.run(now, now);
                log(`üîÑ Reset ${accountsResult.changes} accounts active rooms`);
                
                // 3. Clear all account-room relationships
                const clearAccountRoomsStmt = this.db.prepare(`DELETE FROM account_rooms`);
                const accountRoomsResult = clearAccountRoomsStmt.run();
                log(`üîÑ Cleared ${accountRoomsResult.changes} account-room relationships`);
                
                // 4. Reset tasks status
                const resetTasksStmt = this.db.prepare(`
                    UPDATE tasks 
                    SET status = 'idle',
                        updatedAt = ?
                    WHERE status = 'running'
                `);
                const tasksResult = resetTasksStmt.run(now);
                log(`üîÑ Reset ${tasksResult.changes} tasks to idle status`);
                
                return {
                    roomsReset: roomsResult.changes,
                    accountsReset: accountsResult.changes,
                    relationshipsCleared: accountRoomsResult.changes,
                    tasksReset: tasksResult.changes
                };
            });
            
            // Th·ª±c hi·ªán transaction
            const result = resetTransaction();
            
            log('‚úÖ Reset room accounts and proxies successfully');
            log(`üìä Summary: ${result.roomsReset} rooms, ${result.accountsReset} accounts, ${result.relationshipsCleared} relationships, ${result.tasksReset} tasks`);
            
            return true;
            
        } catch (err) {
            error('‚ùå Error resetting room accounts and proxies:', err);
            return false;
        }
    }

    createTables() {
        log('üîß Creating database tables...');

        // Folders table
        this.db.exec(`
            CREATE TABLE IF NOT EXISTS folders (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                type TEXT NOT NULL CHECK (type IN ('accounts', 'proxies')),
                color TEXT DEFAULT '#007bff',
                description TEXT DEFAULT '',
                createdAt TEXT NOT NULL,
                updatedAt TEXT NOT NULL,
                UNIQUE(name, type)
            )
        `);

        // Accounts table
        this.db.exec(`
            CREATE TABLE IF NOT EXISTS accounts (
                id TEXT PRIMARY KEY,
                username TEXT NOT NULL UNIQUE,
                sessionId TEXT,
                password TEXT,
                email TEXT,
                emailPassword TEXT,
                cookie TEXT,
                folderId TEXT,
                status TEXT DEFAULT 'inactive',
                lastActive TEXT,
                lastUsed TEXT,
                currentRooms INTEGER DEFAULT 0,
                avatarThumb TEXT,
                roomUsername TEXT,
                activeRooms TEXT DEFAULT '[]',
                viewerCount INTEGER DEFAULT 0,
                followCount INTEGER DEFAULT 0,
                shareCount INTEGER DEFAULT 0,
                totalViews INTEGER DEFAULT 0,
                totalShares INTEGER DEFAULT 0,
                totalFollows INTEGER DEFAULT 0,
                isLive INTEGER DEFAULT 0,
                proxyId TEXT,
                metadata TEXT DEFAULT '{}',
                notes TEXT DEFAULT '',
                createdAt TEXT NOT NULL,
                updatedAt TEXT NOT NULL,
                FOREIGN KEY (folderId) REFERENCES folders(id) ON DELETE SET NULL,
                FOREIGN KEY (proxyId) REFERENCES proxies(id) ON DELETE SET NULL
            )
        `);

        // Proxies table  
        this.db.exec(`
            CREATE TABLE IF NOT EXISTS proxies (
                id TEXT PRIMARY KEY,
                host TEXT NOT NULL,
                port INTEGER NOT NULL,
                username TEXT,
                password TEXT,
                type TEXT DEFAULT 'http' CHECK (type IN ('http', 'https', 'socks4', 'socks5')),
                folderId TEXT,
                status TEXT DEFAULT 'active',
                lastTested TEXT,
                responseTime INTEGER DEFAULT 0,
                notes TEXT DEFAULT '',
                createdAt TEXT NOT NULL,
                updatedAt TEXT NOT NULL,
                FOREIGN KEY (folderId) REFERENCES folders(id) ON DELETE SET NULL,
                UNIQUE(host, port)
            )
        `);

        // Rooms table
        this.db.exec(`
            CREATE TABLE IF NOT EXISTS rooms (
                uid TEXT PRIMARY KEY,
                id TEXT,
                roomId TEXT,
                roomUrl TEXT,
                roomUsername TEXT,
                nickname TEXT,
                avatar TEXT,
                avatarThumb TEXT,
                title TEXT DEFAULT '',
                viewerCount INTEGER DEFAULT 0,
                currentViewers INTEGER DEFAULT 0,
                startCount INTEGER DEFAULT 0,
                targetViewers INTEGER DEFAULT 0,
                duration INTEGER DEFAULT 30,
                isLive INTEGER DEFAULT 0,
                lastViewed TEXT,
                notes TEXT DEFAULT '',
                status TEXT DEFAULT 'stopped',
                startedAt TEXT,
                endedAt TEXT,
                realViewers INTEGER DEFAULT 0,
                lastTimeCheckViewers TEXT,
                stoppedAt TEXT,
                stopReason TEXT,
                finalDuration INTEGER DEFAULT 0,
                createdAt TEXT NOT NULL,
                updatedAt TEXT NOT NULL
            )
        `);

        // Account-Room relationship table
        this.db.exec(`
            CREATE TABLE IF NOT EXISTS account_rooms (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                accountId TEXT NOT NULL,
                roomId TEXT NOT NULL,
                createdAt TEXT NOT NULL,
                FOREIGN KEY (accountId) REFERENCES accounts(id) ON DELETE CASCADE,
                FOREIGN KEY (roomId) REFERENCES rooms(uid) ON DELETE CASCADE,
                UNIQUE(accountId, roomId)
            )
        `);

        // Update state table for auto-update system
        this.db.exec(`
            CREATE TABLE IF NOT EXISTS update_state (
                id INTEGER PRIMARY KEY DEFAULT 1,
                currentVersion TEXT NOT NULL,
                latestVersion TEXT,
                hasUpdateAvailable INTEGER DEFAULT 0,
                updateInfo TEXT,
                lastCheckTime TEXT,
                updateDismissed INTEGER DEFAULT 0,
                updateDownloaded INTEGER DEFAULT 0,
                updateInstalled INTEGER DEFAULT 0,
                releaseNotes TEXT,
                downloadUrl TEXT,
                createdAt TEXT NOT NULL,
                updatedAt TEXT NOT NULL,
                CHECK (id = 1)
            )
        `);

        // Viewer history table
        this.db.exec(`
            CREATE TABLE IF NOT EXISTS viewer_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                roomUid TEXT NOT NULL,
                viewerCount INTEGER NOT NULL,
                timestamp TEXT NOT NULL,
                FOREIGN KEY (roomUid) REFERENCES rooms(uid) ON DELETE CASCADE
            )
        `);

        // Settings table
        this.db.exec(`
            CREATE TABLE IF NOT EXISTS settings (
                key TEXT PRIMARY KEY,
                value TEXT NOT NULL,
                updatedAt TEXT NOT NULL
            )
        `);

        // Tasks table
        this.db.exec(`
            CREATE TABLE IF NOT EXISTS tasks (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                handler TEXT NOT NULL,
                interval INTEGER NOT NULL,
                enabled INTEGER DEFAULT 1,
                status TEXT DEFAULT 'idle' CHECK (status IN ('idle', 'running', 'completed', 'failed')),
                lastRun TEXT,
                nextRun TEXT,
                runCount INTEGER DEFAULT 0,
                errorCount INTEGER DEFAULT 0,
                lastError TEXT,
                createdAt TEXT NOT NULL,
                updatedAt TEXT NOT NULL
            )
        `);

        // Auth table
        this.db.exec(`
            CREATE TABLE IF NOT EXISTS auth (
                id TEXT PRIMARY KEY,
                userId TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                email TEXT NOT NULL,
                name TEXT NOT NULL,
                token TEXT NOT NULL,
                refreshToken TEXT,
                status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'suspended')),
                loginAt TEXT NOT NULL,
                lastChecked TEXT,
                createdAt TEXT NOT NULL,
                updatedAt TEXT NOT NULL
            )
        `);

        // License table
        this.db.exec(`
            CREATE TABLE IF NOT EXISTS license (
                id TEXT PRIMARY KEY,
                licenseId TEXT NOT NULL UNIQUE,
                type TEXT NOT NULL,
                name TEXT NOT NULL,
                accounts INTEGER NOT NULL DEFAULT 0,
                rooms INTEGER NOT NULL DEFAULT 0,
                duration INTEGER NOT NULL DEFAULT 0,
                price INTEGER DEFAULT 0,
                description TEXT DEFAULT '',
                status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'expired', 'suspended')),
                startDate TEXT NOT NULL,
                expiresAt TEXT NOT NULL,
                lastChecked TEXT,
                createdAt TEXT NOT NULL,
                updatedAt TEXT NOT NULL
            )
        `);

        // Create indexes for better performance
        this.createIndexes();

        log('‚úÖ Database tables created successfully');
    }

    /**
     * T·∫°o indexes
     */
    createIndexes() {
        try {
            // Folders indexes
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_folders_type ON folders(type)`);
            
            // Accounts indexes
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_accounts_username ON accounts(username)`);
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_accounts_folder ON accounts(folderId)`);
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_accounts_status ON accounts(status)`);
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_accounts_proxy ON accounts(proxyId)`);
            
            // Proxies indexes
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_proxies_folder ON proxies(folderId)`);
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_proxies_status ON proxies(status)`);
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_proxies_host_port ON proxies(host, port)`);
            
            // Rooms indexes
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_rooms_roomUsername ON rooms(roomUsername)`);
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_rooms_live ON rooms(isLive)`);
            
            // Account-rooms indexes
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_account_rooms_account ON account_rooms(accountId)`);
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_account_rooms_room ON account_rooms(roomId)`);
            
            // Viewer history indexes
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_viewer_history_room ON viewer_history(roomUid)`);
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_viewer_history_timestamp ON viewer_history(timestamp)`);
            
            // Auth indexes
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_auth_userId ON auth(userId)`);
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_auth_username ON auth(username)`);
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_auth_status ON auth(status)`);
            
            // License indexes
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_license_licenseId ON license(licenseId)`);
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_license_status ON license(status)`);
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_license_expiresAt ON license(expiresAt)`);
            
            // Tasks indexes
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_tasks_status ON tasks(status)`);
            this.db.exec(`CREATE INDEX IF NOT EXISTS idx_tasks_enabled ON tasks(enabled)`);
            
            log('‚úÖ Database indexes created successfully');
        } catch (err) {
            error('‚ùå Error creating indexes:', err);
        }
    }

    /**
     * Insert default data
     */
    async insertDefaultData() {
        try {
            log('üîß Inserting default data...');
            
            // Insert default settings
            const settingsStmt = this.db.prepare(`
                INSERT OR IGNORE INTO settings (key, value, updatedAt)
                VALUES (?, ?, ?)
            `);
            
            const now = new Date().toISOString();
            for (const [key, value] of Object.entries(this.defaultSettings)) {
                settingsStmt.run(key, JSON.stringify(value), now);
            }
            
            // ‚úÖ T·∫†O TH·ªúI M·ª§C DEFAULT CHO ACCOUNTS V√Ä PROXIES
            const folderStmt = this.db.prepare(`
                INSERT OR IGNORE INTO folders (id, name, type, color, description, createdAt, updatedAt)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            `);
            
            // T·∫°o th∆∞ m·ª•c default cho accounts
            folderStmt.run(
                'accounts-default',
                'M·∫∑c ƒë·ªãnh',
                'accounts',
                '#6B7280',
                'Th∆∞ m·ª•c m·∫∑c ƒë·ªãnh cho t√†i kho·∫£n',
                now,
                now
            );
            
            // T·∫°o th∆∞ m·ª•c default cho proxies  
            folderStmt.run(
                'proxies-default',
                'M·∫∑c ƒë·ªãnh',
                'proxies',
                '#6B7280',
                'Th∆∞ m·ª•c m·∫∑c ƒë·ªãnh cho proxy',
                now,
                now
            );
            
            log('‚úÖ Default data inserted successfully');
        } catch (err) {
            error('‚ùå Error inserting default data:', err);
            throw error;
        }
    }

    /**
     * Ki·ªÉm tra database integrity
     */
    checkIntegrity() {
        try {
            const result = this.db.pragma('integrity_check');
            if (result[0].integrity_check === 'ok') {
                log('‚úÖ Database integrity check passed');
                return true;
            } else {
                error('‚ùå Database integrity check failed:', result);
                return false;
            }
        } catch (err) {
            error('‚ùå Error checking database integrity:', err);
            return false;
        }
    }

    /**
     * Ki·ªÉm tra v√† c·∫≠p nh·∫≠t schema database
     */
    async migrateSchema() {
        try {
            log('üîß Checking and migrating database schema...');
            
            // Ki·ªÉm tra v√† s·ª≠a b·∫£ng rooms n·∫øu c√≥ v·∫•n ƒë·ªÅ
            await this.fixRoomsTable();
            
            // Ki·ªÉm tra c·ªôt activeRooms trong b·∫£ng accounts
            if (!this.columnExists('accounts', 'activeRooms')) {
                log('‚ûï Adding column activeRooms to accounts table');
                this.db.exec(`ALTER TABLE accounts ADD COLUMN activeRooms TEXT DEFAULT '[]'`);
            }
            
            // Ki·ªÉm tra c·ªôt password trong b·∫£ng accounts
            if (!this.columnExists('accounts', 'password')) {
                log('‚ûï Adding column password to accounts table');
                this.db.exec(`ALTER TABLE accounts ADD COLUMN password TEXT`);
            }
            
            // Ki·ªÉm tra c·ªôt email trong b·∫£ng accounts
            if (!this.columnExists('accounts', 'email')) {
                log('‚ûï Adding column email to accounts table');
                this.db.exec(`ALTER TABLE accounts ADD COLUMN email TEXT`);
            }
            
            // Ki·ªÉm tra c·ªôt emailPassword trong b·∫£ng accounts
            if (!this.columnExists('accounts', 'emailPassword')) {
                log('‚ûï Adding column emailPassword to accounts table');
                this.db.exec(`ALTER TABLE accounts ADD COLUMN emailPassword TEXT`);
            }
            
            // Ki·ªÉm tra c·ªôt lastUsed trong b·∫£ng accounts
            if (!this.columnExists('accounts', 'lastUsed')) {
                log('‚ûï Adding column lastUsed to accounts table');
                this.db.exec(`ALTER TABLE accounts ADD COLUMN lastUsed TEXT`);
            }
            
            // Ki·ªÉm tra c·ªôt currentRooms trong b·∫£ng accounts
            if (!this.columnExists('accounts', 'currentRooms')) {
                log('‚ûï Adding column currentRooms to accounts table');
                this.db.exec(`ALTER TABLE accounts ADD COLUMN currentRooms INTEGER DEFAULT 0`);
            }
            
            // Ki·ªÉm tra c·ªôt avatarThumb trong b·∫£ng accounts
            if (!this.columnExists('accounts', 'avatarThumb')) {
                log('‚ûï Adding column avatarThumb to accounts table');
                this.db.exec(`ALTER TABLE accounts ADD COLUMN avatarThumb TEXT`);
            }
            
            // Ki·ªÉm tra c·ªôt roomUsername trong b·∫£ng accounts
            if (!this.columnExists('accounts', 'roomUsername')) {
                log('‚ûï Adding column roomUsername to accounts table');
                this.db.exec(`ALTER TABLE accounts ADD COLUMN roomUsername TEXT`);
            }
            // Ki·ªÉm tra c·ªôt cookie trong b·∫£ng accounts
            if (!this.columnExists('accounts', 'cookie')) {
                log('‚ûï Adding column cookie to accounts table');
                this.db.exec(`ALTER TABLE accounts ADD COLUMN cookie TEXT`);
            }
            
            // Ki·ªÉm tra xem c√≥ c·ªôt username trong b·∫£ng rooms kh√¥ng (l·ªói schema c≈©)
            if (this.columnExists('rooms', 'username') && !this.columnExists('rooms', 'roomUsername')) {
                log('üîÑ Migrating from username to roomUsername in rooms table');
                // Th√™m c·ªôt roomUsername m·ªõi
                this.db.exec(`ALTER TABLE rooms ADD COLUMN roomUsername TEXT`);
                
                // Sao ch√©p d·ªØ li·ªáu t·ª´ username sang roomUsername
                this.db.exec(`UPDATE rooms SET roomUsername = username WHERE roomUsername IS NULL AND username IS NOT NULL`);
                
                // Thay ƒë·ªïi index
                this.db.exec(`DROP INDEX IF EXISTS idx_rooms_username`);
                this.db.exec(`CREATE INDEX IF NOT EXISTS idx_rooms_roomUsername ON rooms(roomUsername)`);
            }
            
            // Ki·ªÉm tra c√°c tr∆∞·ªùng b·ªï sung trong b·∫£ng rooms
            const additionalRoomColumns = [
                { name: 'id', type: 'TEXT' },
                { name: 'roomId', type: 'TEXT' },
                { name: 'roomUrl', type: 'TEXT' },
                { name: 'roomUsername', type: 'TEXT' },
                { name: 'avatarThumb', type: 'TEXT' },
                { name: 'startCount', type: 'INTEGER DEFAULT 0' },
                { name: 'targetViewers', type: 'INTEGER DEFAULT 0' },
                { name: 'currentViewers', type: 'INTEGER DEFAULT 0' },
                { name: 'duration', type: 'INTEGER DEFAULT 30' },
                { name: 'status', type: 'TEXT DEFAULT "stopped"' },
                { name: 'startedAt', type: 'TEXT' },
                { name: 'endedAt', type: 'TEXT' },
                { name: 'realViewers', type: 'INTEGER DEFAULT 0' },
                { name: 'lastTimeCheckViewers', type: 'TEXT' },
                { name: 'stoppedAt', type: 'TEXT' },
                { name: 'stopReason', type: 'TEXT' },
                { name: 'finalDuration', type: 'INTEGER DEFAULT 0' }
            ];
            
            for (const column of additionalRoomColumns) {
                if (!this.columnExists('rooms', column.name)) {
                    log(`‚ûï Adding column ${column.name} to rooms table`);
                    this.db.exec(`ALTER TABLE rooms ADD COLUMN ${column.name} ${column.type}`);
                }
            }
            
            // C·∫≠p nh·∫≠t c√°c constraint cho tr·∫°ng th√°i
            try {
                // Ki·ªÉm tra ƒë·ªãnh nghƒ©a constraint status trong b·∫£ng proxies
                const proxyStatusInfo = this.db.prepare(`
                    SELECT sql FROM sqlite_master 
                    WHERE type='table' AND name='proxies'
                `).get();
                
                // N·∫øu kh√¥ng c√≥ constraint 'active' th√¨ th√™m v√†o
                if (proxyStatusInfo && proxyStatusInfo.sql && 
                    !proxyStatusInfo.sql.includes("'active'") && 
                    proxyStatusInfo.sql.includes("status TEXT")) {
                    log('üîÑ Recreating proxies table with updated status constraint');
                    // L∆∞u d·ªØ li·ªáu hi·ªán t·∫°i
                    this.db.exec(`CREATE TABLE IF NOT EXISTS proxies_temp AS SELECT * FROM proxies`);
                    // X√≥a b·∫£ng c≈©
                    this.db.exec(`DROP TABLE proxies`);
                    // T·∫°o l·∫°i b·∫£ng v·ªõi constraint m·ªõi
                    this.db.exec(`
                        CREATE TABLE IF NOT EXISTS proxies (
                            id TEXT PRIMARY KEY,
                            host TEXT NOT NULL,
                            port INTEGER NOT NULL,
                            username TEXT,
                            password TEXT,
                            type TEXT DEFAULT 'http' CHECK (type IN ('http', 'https', 'socks4', 'socks5')),
                            folderId TEXT,
                            status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'error', 'testing', 'unknown')),
                            lastTested TEXT,
                            responseTime INTEGER DEFAULT 0,
                            notes TEXT DEFAULT '',
                            createdAt TEXT NOT NULL,
                            updatedAt TEXT NOT NULL,
                            FOREIGN KEY (folderId) REFERENCES folders(id) ON DELETE SET NULL,
                            UNIQUE(host, port)
                        )
                    `);
                    // Kh√¥i ph·ª•c d·ªØ li·ªáu
                    this.db.exec(`INSERT INTO proxies SELECT * FROM proxies_temp`);
                    // X√≥a b·∫£ng t·∫°m
                    this.db.exec(`DROP TABLE proxies_temp`);
                }
                
                // Ki·ªÉm tra ƒë·ªãnh nghƒ©a constraint status trong b·∫£ng accounts
                const accountStatusInfo = this.db.prepare(`
                    SELECT sql FROM sqlite_master 
                    WHERE type='table' AND name='accounts'
                `).get();
                
                if (accountStatusInfo && accountStatusInfo.sql && 
                    !accountStatusInfo.sql.includes("'active'") && 
                    accountStatusInfo.sql.includes("status TEXT")) {
                    log('üîÑ Recreating accounts table with updated status constraint');
                    // L∆∞u d·ªØ li·ªáu hi·ªán t·∫°i
                    this.db.exec(`CREATE TABLE IF NOT EXISTS accounts_temp AS SELECT * FROM accounts`);
                    // X√≥a b·∫£ng c≈©
                    this.db.exec(`DROP TABLE accounts`);
                    // X√≥a folder default c≈© tr∆∞·ªõc khi t·∫°o l·∫°i
                    this.db.exec(`DELETE FROM folders WHERE id = 'default' AND type = 'accounts'`);
                    
                    // T·∫°o l·∫°i b·∫£ng v·ªõi constraint m·ªõi
                    this.createTables(); // T·∫°o l·∫°i t·∫•t c·∫£ tables
                    // Reset room accounts v√† task
                    this.resetRoomAccountsAndProxies();
                    // Kh√¥i ph·ª•c d·ªØ li·ªáu
                    this.db.exec(`
                        INSERT OR IGNORE INTO accounts 
                        SELECT * FROM accounts_temp
                    `);
                    // X√≥a b·∫£ng t·∫°m
                    this.db.exec(`DROP TABLE accounts_temp`);
                }
            } catch (err) {
                error('‚ùå Error updating constraints:', err);
            }
            
            log('‚úÖ Database schema migration completed successfully');
            return true;
        } catch (err) {
            error('‚ùå Error migrating database schema:', err);
            throw error;
        }
    }
    /**
     * Ki·ªÉm tra xem c·ªôt c√≥ t·ªìn t·∫°i trong b·∫£ng kh√¥ng
     */
    columnExists(table, column) {
        try {
            const result = this.db.prepare(`PRAGMA table_info(${table})`).all();
            return result.some(col => col.name === column);
        } catch (err) {
            error(`‚ùå Error checking if column ${column} exists in ${table}:`, err);
            return false;
        }
    }

    /**
     * Get database info
     */
    getDatabaseInfo() {
        try {
            const info = {
                path: this.dbPath,
                size: require('fs').statSync(this.dbPath).size,
                tables: [],
                version: this.db.pragma('user_version')[0].user_version
            };

            // Get table names v√† row counts
            const tables = this.db.prepare(`
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name NOT LIKE 'sqlite_%'
            `).all();

            for (const table of tables) {
                const count = this.db.prepare(`SELECT COUNT(*) as count FROM ${table.name}`).get();
                info.tables.push({
                    name: table.name,
                    rows: count.count
                });
            }

            return info;
        } catch (err) {
            error('Error getting database info:', err);
            return null;
        }
    }

    /**
     * Ki·ªÉm tra v√† s·ª≠a ch·ªØa b·∫£ng rooms n·∫øu c√≥ l·ªói schema
     */
    async fixRoomsTable() {
        try {
            log('üîß Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng rooms...');
            
            // L·∫•y th√¥ng tin v·ªÅ b·∫£ng rooms
            const tableInfo = this.db.prepare(`SELECT sql FROM sqlite_master WHERE type = 'table' AND name = 'rooms'`).get();
            
            // Ki·ªÉm tra xem b·∫£ng c√≥ c·ªôt username b·∫Øt bu·ªôc kh√¥ng t·ªìn t·∫°i trong schema
            if (tableInfo && tableInfo.sql && tableInfo.sql.includes('username TEXT NOT NULL')) {
                log('‚ùå Ph√°t hi·ªán schema l·ªói: c·ªôt username NOT NULL trong b·∫£ng rooms');
                
                // L∆∞u d·ªØ li·ªáu hi·ªán t·∫°i
                log('‚è≥ Sao l∆∞u d·ªØ li·ªáu hi·ªán t·∫°i...');
                this.db.exec(`CREATE TABLE IF NOT EXISTS rooms_backup AS SELECT * FROM rooms`);
                
                // X√≥a index c≈©
                log('‚è≥ X√≥a index c≈©...');
                this.db.exec(`DROP INDEX IF EXISTS idx_rooms_username`);
                this.db.exec(`DROP INDEX IF EXISTS idx_rooms_live`);
                
                // X√≥a b·∫£ng c≈©
                log('‚è≥ X√≥a b·∫£ng c≈© ƒë·ªÉ t·∫°o l·∫°i...');
                this.db.exec(`DROP TABLE rooms`);
                
                // T·∫°o l·∫°i b·∫£ng v·ªõi schema ƒë√∫ng
                log('‚è≥ T·∫°o l·∫°i b·∫£ng v·ªõi schema ch√≠nh x√°c...');
                this.db.exec(`
                    CREATE TABLE IF NOT EXISTS rooms (
                        uid TEXT PRIMARY KEY,
                        id TEXT,
                        roomId TEXT,
                        roomUrl TEXT,
                        roomUsername TEXT,
                        nickname TEXT,
                        avatar TEXT,
                        avatarThumb TEXT,
                        title TEXT DEFAULT '',
                        viewerCount INTEGER DEFAULT 0,
                        currentViewers INTEGER DEFAULT 0,
                        startCount INTEGER DEFAULT 0,
                        targetViewers INTEGER DEFAULT 0,
                        duration INTEGER DEFAULT 30,
                        isLive INTEGER DEFAULT 0,
                        lastViewed TEXT,
                        notes TEXT DEFAULT '',
                        status TEXT DEFAULT 'stopped',
                        startedAt TEXT,
                        endedAt TEXT,
                        realViewers INTEGER DEFAULT 0,
                        lastTimeCheckViewers TEXT,
                        stoppedAt TEXT,
                        stopReason TEXT,
                        finalDuration INTEGER DEFAULT 0,
                        createdAt TEXT NOT NULL,
                        updatedAt TEXT NOT NULL
                    )
                `);
                
                // T·∫°o l·∫°i index
                log('‚è≥ T·∫°o l·∫°i index...');
                this.db.exec(`CREATE INDEX IF NOT EXISTS idx_rooms_roomUsername ON rooms(roomUsername)`);
                this.db.exec(`CREATE INDEX IF NOT EXISTS idx_rooms_live ON rooms(isLive)`);
                
                // Kh√¥i ph·ª•c d·ªØ li·ªáu - sao ch√©p t·ª´ username sang roomUsername
                log('‚è≥ Kh√¥i ph·ª•c d·ªØ li·ªáu t·ª´ b·∫£ng backup...');
                this.db.exec(`
                    INSERT INTO rooms 
                    SELECT 
                        uid, id, roomId, roomUrl, 
                        COALESCE(roomUsername, username) as roomUsername,
                        nickname, avatar, avatarThumb, title,
                        viewerCount, currentViewers, startCount, targetViewers, 
                        duration, isLive, lastViewed, notes, 
                        status, startedAt, endedAt, realViewers, 
                        lastTimeCheckViewers, stoppedAt, stopReason, finalDuration,
                        createdAt, updatedAt 
                    FROM rooms_backup
                `);
                
                // X√≥a b·∫£ng backup
                log('‚è≥ X√≥a b·∫£ng backup...');
                this.db.exec(`DROP TABLE rooms_backup`);
                
                log('‚úÖ ƒê√£ s·ª≠a ch·ªØa b·∫£ng rooms th√†nh c√¥ng!');
            } else {
                log('‚úÖ C·∫•u tr√∫c b·∫£ng rooms OK');
            }
            return true;
        } catch (err) {
            error('‚ùå Error fixing rooms table:', err);
            return false;
        }
    }
}

module.exports = DatabaseSchema; 