const StorageAdapter = require('./storage-adapter');
const helper = require('../main/businesses/helper');
const GroupView = require('../main/businesses/Viewer');
const { log, error } = require('./logger');
const notificationManager = require('./notification-manager');
/**
 * C√°c h√†m x·ª≠ l√Ω tasks
 */
class TaskHandlers {
    constructor(storageManager) {
        this.storageManager = storageManager || new StorageAdapter();
    }

    /**
     * Ki·ªÉm tra s·ª©c kh·ªèe accounts
     */
    async checkAccountHealth() {
        log('ƒêang ki·ªÉm tra s·ª©c kh·ªèe accounts...');
        
        try {
            const accounts = await this.storageManager.getAllAccounts();
            let healthyCount = 0;
            let unhealthyCount = 0;

            for (const account of accounts) {
                // Logic ki·ªÉm tra account health
                // V√≠ d·ª•: ki·ªÉm tra xem account c√≥ b·ªã ban kh√¥ng
                if (account.status === 'active') {
                    healthyCount++;
                } else {
                    unhealthyCount++;
                }
            }

            log(`K·∫øt qu·∫£ ki·ªÉm tra: ${healthyCount} kh·ªèe m·∫°nh, ${unhealthyCount} c√≥ v·∫•n ƒë·ªÅ`);
        } catch (err) {
            error('L·ªói khi ki·ªÉm tra s·ª©c kh·ªèe accounts:', err);
            throw err;
        }
    }

    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i proxy
     */
    async updateProxyStatus() {
        log('ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i proxies...');
        
        try {
            const proxies = await this.storageManager.getAllProxies();
            let activeCount = 0;
            let inactiveCount = 0;

            for (const proxy of proxies) {
                // Logic test proxy
                try {
                    const result = await this.storageManager.testProxy(proxy.id);
                    if (result.success) {
                        activeCount++;
                    } else {
                        inactiveCount++;
                    }
                } catch (err) {
                    inactiveCount++;
                }
            }

            log(`C·∫≠p nh·∫≠t proxy: ${activeCount} ho·∫°t ƒë·ªông, ${inactiveCount} kh√¥ng ho·∫°t ƒë·ªông`);
        } catch (err) {
            error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i proxies:', err);
            throw err;
        }
    }

    /**
     * D·ªçn d·∫πp d·ªØ li·ªáu c≈©
     */
    async cleanupOldData() {
        log('ƒêang d·ªçn d·∫πp d·ªØ li·ªáu c≈©...');
        
        try {
            // Logic d·ªçn d·∫πp d·ªØ li·ªáu c≈©
            // V√≠ d·ª•: x√≥a logs c≈©, d·ªØ li·ªáu t·∫°m th·ªùi
            log('Ho√†n th√†nh d·ªçn d·∫πp d·ªØ li·ªáu');
        } catch (err) {
            error('L·ªói khi d·ªçn d·∫πp d·ªØ li·ªáu:', err);
            throw err;
        }
    }

    /**
     * Sao l∆∞u d·ªØ li·ªáu
     */
    async backupData() {
        log('üì¶ ƒêang sao l∆∞u database...');
        
        try {
            const fs = require('fs');
            const path = require('path');
            const { app } = require('electron');
            
            // ƒê∆∞·ªùng d·∫´n database g·ªëc
            const dbPath = path.join(app.getPath('userData'), 'tiktok-live.db');
            
            // T·∫°o th∆∞ m·ª•c backup trong userData
            const backupDir = path.join(app.getPath('userData'), 'backups');
            if (!fs.existsSync(backupDir)) {
                fs.mkdirSync(backupDir, { recursive: true });
            }
            
            // T·∫°o t√™n file backup v·ªõi timestamp
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupFileName = `tiktok-live-backup-${timestamp}.db`;
            const backupPath = path.join(backupDir, backupFileName);
            
            // Ki·ªÉm tra file database g·ªëc
            if (!fs.existsSync(dbPath)) {
                throw new Error(`Database file not found: ${dbPath}`);
            }
            
            // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng storage manager ƒë·ªÉ t·∫°o backup an to√†n
            log('üì¶ T·∫°o backup database v·ªõi storage manager...');
            
            // ƒê·∫£m b·∫£o t·∫•t c·∫£ operations ho√†n th√†nh tr∆∞·ªõc khi backup
            if (this.storageManager && typeof this.storageManager.checkpoint === 'function') {
                this.storageManager.checkpoint();
            }
            
            // S·ª≠ d·ª•ng file system copy an to√†n
            await fs.promises.copyFile(dbPath, backupPath);
            
            // Verify backup file ƒë∆∞·ª£c t·∫°o
            if (fs.existsSync(backupPath)) {
                const backupSize = fs.statSync(backupPath).size;
                const originalSize = fs.statSync(dbPath).size;
                
                if (backupSize === originalSize) {
                    log(`üì¶ Backup database th√†nh c√¥ng: ${backupFileName}`);
                    log(`üìÅ ƒê∆∞·ªùng d·∫´n: ${backupPath}`);
                    log(`üìä K√≠ch th∆∞·ªõc: ${(backupSize / 1024 / 1024).toFixed(2)} MB`);
                    
                    // X√≥a backup c≈© (gi·ªØ l·∫°i 10 file g·∫ßn nh·∫•t)
                    this.cleanupOldBackups(backupDir);
                    
                    return { 
                        success: true, 
                        backupPath, 
                        backupFileName,
                        size: backupSize 
                    };
                } else {
                    throw new Error(`Backup file size mismatch: expected ${originalSize}, got ${backupSize}`);
                }
            } else {
                throw new Error('Backup file was not created');
            }
            
        } catch (err) {
            error('‚ùå L·ªói khi sao l∆∞u database:', err);
            throw err;
        }
    }
    
    /**
     * X√≥a backup c≈©, ch·ªâ gi·ªØ l·∫°i 10 file g·∫ßn nh·∫•t
     */
    cleanupOldBackups(backupDir) {
        try {
            const fs = require('fs');
            const path = require('path');
            
            const files = fs.readdirSync(backupDir)
                .filter(file => file.startsWith('tiktok-live-backup-') && file.endsWith('.db'))
                .map(file => ({
                    name: file,
                    path: path.join(backupDir, file),
                    mtime: fs.statSync(path.join(backupDir, file)).mtime
                }))
                .sort((a, b) => b.mtime - a.mtime); // Sort by modification time, newest first
            
            // X√≥a c√°c file c≈© (gi·ªØ l·∫°i 10 file)
            if (files.length > 10) {
                const filesToDelete = files.slice(10);
                for (const file of filesToDelete) {
                    fs.unlinkSync(file.path);
                    log(`üóëÔ∏è ƒê√£ x√≥a backup c≈©: ${file.name}`);
                }
            }
            
            log(`üì¶ Hi·ªán c√≥ ${Math.min(files.length, 10)} file backup`);
        } catch (err) {
            error('‚ùå L·ªói khi cleanup backup c≈©:', err);
        }
    }

    /**
     * Gi√°m s√°t ph√≤ng live v√† c·∫≠p nh·∫≠t currentViewers
     * T·ª± ƒë·ªông d·ª´ng ph√≤ng khi kh√¥ng c√≤n live
     */
    async monitorRooms() {
        log('üîç Checking realViewers for live rooms...');
        
        try {
            const rooms = await this.storageManager.getAllRooms();
            
            // L·∫•y t·ªëi ƒëa 20 rooms ƒëang ch·∫°y, sort theo lastTimeCheckViewers l√¢u nh·∫•t ∆∞u ti√™n tr∆∞·ªõc
            const watchingRooms = rooms
                .filter(room => room.status === 'watching' && room.id) // ƒê·∫£m b·∫£o room c√≥ id
                .sort((a, b) => {
                    const aTime = a.lastTimeCheckViewers || '1970-01-01T00:00:00.000Z';
                    const bTime = b.lastTimeCheckViewers || '1970-01-01T00:00:00.000Z';
                    return new Date(aTime) - new Date(bTime);
                })
                .slice(0, 20);
            
            if (watchingRooms.length === 0) {
                log('üì≠ No watching rooms to check');
                return { success: true, code: 'noActiveRooms' };
            }
            
            log(`üéØ Checking ${watchingRooms.length} rooms...`);
            
            let successCount = 0;
            let errorCount = 0;
            let stoppedCount = 0; // ƒê·∫øm s·ªë ph√≤ng b·ªã d·ª´ng t·ª± ƒë·ªông
            let proxies = await helper.getProxySite()
            for (const room of watchingRooms) {
                try {
                    // Ki·ªÉm tra room.id kh√¥ng ƒë∆∞·ª£c null
                    if (!room.id) {
                        error('‚ùå B·ªè qua room kh√¥ng c√≥ id');
                        errorCount++;
                        continue;
                    }

                    log(`üîç Checking room: ${room.roomUsername || room.roomId}`);
                    let proxy = proxies[Math.floor(Math.random() * proxies.length)];
                    // S·ª≠ d·ª•ng helper.getRoomInfo4 nh∆∞ y√™u c·∫ßu
                    const roomInfo = await helper.getRoomInfo4({
                        room_id: room.roomId,
                        proxy: proxy
                    });
                    
                    if (roomInfo.err || roomInfo.view_count === undefined) {
                        log(`‚ùå Cannot get view_count for room ${room.roomId}:`, roomInfo);
                        errorCount++;
                        continue;
                    }
                    
                    const now = new Date().toISOString();
                    
                    // ‚≠ê T√çNH NƒÇNG M·ªöI: T·ª± ƒë·ªông d·ª´ng ph√≤ng khi kh√¥ng c√≤n live
                    if (!roomInfo.is_alive) {
                        log(`üõë Room ${room.roomUsername || room.roomId} is no longer live - Auto stopping...`);
                        
                        try {
                            // Th·ª±c hi·ªán ƒë·∫ßy ƒë·ªß workflow d·ª´ng ph√≤ng
                            await this.storageManager.updateRoom(room.id, { 
                                status: 'stopped',
                                stoppedAt: now,
                                stopReason: 'auto_stopped_not_live' // L√Ω do d·ª´ng
                            });
                            notificationManager.notifyRoomStopped(room);
                            // ‚úÖ S·ª≠ d·ª•ng GroupView ƒë√£ import s·∫µn
                            await GroupView.stopViewers({ task_id: room.id });
                            
                            // Gi·∫£i ph√≥ng c√°c accounts
                            try {
                                await this.storageManager.releaseAccountsFromRoom(room.id);
                                log(`‚úÖ Released accounts from auto-stopped room ${room.id}`);
                            } catch (releaseError) {
                                error(`‚ùå Error releasing accounts from room ${room.id}:`, releaseError);
                            }
                            
                            log(`‚úÖ Auto-stopped room ${room.roomUsername}: Not live anymore`);
                            stoppedCount++;
                            
                        } catch (stopError) {
                            error(`‚ùå Error auto-stopping room ${room.roomId}:`, stopError);
                            errorCount++;
                        }
                        
                        continue; // Skip vi·ªác c·∫≠p nh·∫≠t viewers cho ph√≤ng ƒë√£ d·ª´ng
                    }
                    
                    // Th√™m v√†o file history ri√™ng thay v√¨ rooms.json
                    await this.storageManager.addViewerHistoryEntry(room.id, {
                        timestamp: now,
                        viewers: roomInfo.view_count,
                        isAlive: roomInfo.is_alive
                    });
                    
                    // Ch·ªâ update realViewers + lastTimeCheckViewers trong rooms.json
                    // KH√îNG ghi ƒë√® currentViewers (ƒë√≥ l√† s·ªë account tool)
                    await this.storageManager.updateRoom(room.id, {
                        realViewers: roomInfo.view_count,  // <-- Field m·ªõi cho viewer th·ª±c TikTok
                        lastTimeCheckViewers: now
                    });
                    
                    log(`‚úÖ Updated room ${room.roomUsername}: ${roomInfo.view_count} real viewers`);
                    successCount++;
                    
                    // Delay ƒë·ªÉ tr√°nh rate limit
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                } catch (err) {
                    error(`‚ùå Error checking room ${room.roomId}:`, err);
                    errorCount++;
                }
            }
            
            log(`‚úÖ Completed monitoring: ${successCount} updated, ${stoppedCount} auto-stopped, ${errorCount} errors`);
            
            return { 
                success: true, 
                code: 'roomMonitoringCompleted',
                params: { 
                    updated: successCount,
                    autoStopped: stoppedCount,
                    errors: errorCount 
                }
            };
            
        } catch (err) {
            error('‚ùå Error monitoring rooms:', err);
            return { 
                success: false, 
                code: 'taskStartFailed' 
            };
        }
    }

    /**
     * C·∫≠p nh·∫≠t info cho accounts ch∆∞a c√≥ th√¥ng tin
     */
    async updateAccountsInfo() {
        log('ƒêang c·∫≠p nh·∫≠t info cho accounts...');
        
        try {
            // L·∫•y 10 accounts ch∆∞a c√≥ info, sort theo createdAt c≈© nh·∫•t
            const accounts = await this.storageManager.getAllAccounts();
            
            // Filter accounts ch∆∞a c√≥ avatarThumb ho·∫∑c roomUsername
            const accountsNeedInfo = accounts
                .filter(account => !account.avatarThumb || !account.roomUsername)
                .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))
                .slice(0, 50); // L·∫•y 10 accounts ƒë·∫ßu ti√™n
            
            if (accountsNeedInfo.length === 0) {
                log('‚úÖ T·∫•t c·∫£ accounts ƒë√£ c√≥ th√¥ng tin ƒë·∫ßy ƒë·ªß');
                return;
            }
            
            log(`üîÑ T√¨m th·∫•y ${accountsNeedInfo.length} accounts c·∫ßn c·∫≠p nh·∫≠t info`);
            
            
            let successCount = 0;
            let errorCount = 0;
            let proxies = await helper.getProxySite()
            for (const account of accountsNeedInfo) {
                try {
                    log(`üîÑ ƒêang c·∫≠p nh·∫≠t info cho account: ${account.username}`);
                    
                    // G·ªçi getUserInfo
                    let proxy = proxies[Math.floor(Math.random() * proxies.length)];
                    log("üîÑ Using proxy:", proxy)
                    const result = await helper.getUserInfo({
                        proxy: proxy,
                        username: account.username
                    });
                    
                    if (result.err || !result.avatarThumb) {
                        log(`‚ùå L·ªói khi l·∫•y info cho ${account.username}:`, result);
                        errorCount++;
                        continue;
                    }
                    
                    // C·∫≠p nh·∫≠t account v·ªõi th√¥ng tin m·ªõi
                    await this.storageManager.updateAccount(account.id, {
                        avatarThumb: result.avatarThumb,
                        roomUsername: result.roomUsername || account.username,
                        updatedAt: new Date()
                    });
                    
                    log(`‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng cho ${account.username}: ${result.roomUsername}`);
                    successCount++;
                    
                    // Delay gi·ªØa c√°c request ƒë·ªÉ tr√°nh rate limit
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                } catch (err) {
                    error(`‚ùå L·ªói khi x·ª≠ l√Ω account ${account.username}:`, err);
                    errorCount++;
                }
            }
            
            log(`‚úÖ Ho√†n th√†nh c·∫≠p nh·∫≠t info: ${successCount} th√†nh c√¥ng, ${errorCount} l·ªói`);
            
        } catch (err) {
            error('‚ùå L·ªói khi c·∫≠p nh·∫≠t account info:', err);
            throw err;
        }
    }
    
    /**
     * T·ª± ƒë·ªông d·ª´ng rooms ƒë√£ h·∫øt th·ªùi gian ch·∫°y
     * Task ch·∫°y ng·∫ßm nh∆∞ crontask
     */
    async autoStopExpiredRooms() {
        log('‚è∞ Checking for expired rooms to auto-stop...');
        
        try {
            const rooms = await this.storageManager.getAllRooms();
            
            // L·∫•y t·∫•t c·∫£ rooms ƒëang watching
            const watchingRooms = rooms.filter(room => room.status === 'watching' && room.id);
            
            if (watchingRooms.length === 0) {
                log('üì≠ No watching rooms to check for expiration');
                return { success: true, code: 'noActiveRooms' };
            }
            
            // Shuffle v√† l·∫•y t·ªëi ƒëa 100 rooms ng·∫´u nhi√™n
            const shuffledRooms = watchingRooms.sort(() => Math.random() - 0.5);
            const roomsToCheck = shuffledRooms.slice(0, 100);
            
            log(`üé≤ Checking ${roomsToCheck.length} random rooms for expiration...`);
            
            let expiredCount = 0;
            let errorCount = 0;
            let checkedCount = 0;
            
            const now = new Date();
            
            for (const room of roomsToCheck) {
                try {
                    checkedCount++;
                    
                    // Ki·ªÉm tra room.id kh√¥ng ƒë∆∞·ª£c null
                    if (!room.id) {
                        error('‚ùå B·ªè qua room kh√¥ng c√≥ id');
                        errorCount++;
                        continue;
                    }
                    
                    // Ki·ªÉm tra xem room c√≥ startedAt v√† duration kh√¥ng
                    if (!room.startedAt || !room.duration) {
                        log(`‚ö†Ô∏è Room ${room.roomUsername || room.roomId} missing startedAt or duration - skipping`);
                        continue;
                    }
                    
                    const startedAt = new Date(room.startedAt);
                    const durationMs = room.duration * 60 * 1000; // Convert duration (ph√∫t) to milliseconds
                    const runningTime = now - startedAt;
                    
                    // Ki·ªÉm tra n·∫øu ƒë√£ h·∫øt th·ªùi gian ch·∫°y
                    if (runningTime >= durationMs) {
                        const runningMinutes = Math.floor(runningTime / (60 * 1000));
                        log(`‚è∞ Room ${room.roomUsername || room.roomId} expired (${runningMinutes}min >= ${room.duration}min) - Auto stopping...`);
                        
                        try {
                            // Th·ª±c hi·ªán ƒë·∫ßy ƒë·ªß workflow d·ª´ng ph√≤ng
                            await this.storageManager.updateRoom(room.id, {
                                status: 'stopped',
                                stoppedAt: now.toISOString(),
                                stopReason: 'auto_stopped_duration_expired',
                                finalDuration: runningMinutes // L∆∞u th·ªùi gian ch·∫°y th·ª±c t·∫ø
                            });
                            notificationManager.notifyRoomStopped(room);
                            // D·ª´ng viewers
                            await GroupView.stopViewers({
                                task_id: room.id
                            });
                            
                            // Gi·∫£i ph√≥ng c√°c accounts
                            try {
                                await this.storageManager.releaseAccountsFromRoom(room.id);
                                log(`‚úÖ Released accounts from auto-stopped expired room ${room.id}`);
                            } catch (releaseError) {
                                error(`‚ùå Error releasing accounts from room ${room.id}:`, releaseError);
                            }
                            
                            log(`‚úÖ Auto-stopped expired room ${room.roomUsername}: Ran for ${runningMinutes} minutes`);
                            expiredCount++;
                            
                        } catch (stopError) {
                            error(`‚ùå Error auto-stopping expired room ${room.roomId}:`, stopError);
                            errorCount++;
                        }
                    } else {
                        const remainingMinutes = Math.floor((durationMs - runningTime) / (60 * 1000));
                        log(`‚è≥ Room ${room.roomUsername || room.roomId} still running (${remainingMinutes}min remaining)`);
                    }
                    
                    // Delay nh·ªè ƒë·ªÉ kh√¥ng qu√° t·∫£i
                    await new Promise(resolve => setTimeout(resolve, 200));
                    
                } catch (err) {
                    error(`‚ùå Error checking room ${room.roomId}:`, err);
                    errorCount++;
                }
            }
            
            log(`‚úÖ Completed duration check: ${checkedCount} checked, ${expiredCount} auto-stopped, ${errorCount} errors`);
            
            return { 
                success: true, 
                code: 'expiredRoomsChecked',
                params: { 
                    checked: checkedCount,
                    expired: expiredCount,
                    errors: errorCount 
                }
            };
            
        } catch (err) {
            error('‚ùå Error checking expired rooms:', err);
            return { 
                success: false, 
                code: 'taskStartFailed' 
            };
        }
    }

    /**
     * T·ª± ƒë·ªông refresh license t·ª´ API
     */
    async refreshLicense() {
        log('üîÑ Starting license refresh task...');
        
        try {
            // L·∫•y auth manager v√† th·ª±c hi·ªán refresh license
            const AuthManager = require('./auth-manager');
            const authManager = new AuthManager(this.storageManager);
            
            // Refresh license t·ª´ API
            const result = await authManager.updateLicenseFromAPI();
            
            if (result.success) {
                if (result.hasChanges) {
                    log('‚úÖ License refreshed with changes by task');
                    return { 
                        success: true, 
                        code: 'licenseRefreshedWithChanges',
                        message: 'License refreshed successfully with changes',
                        hasChanges: true
                    };
                } else {
                    log('‚úÖ License refreshed (no changes) by task');
                    return { 
                        success: true, 
                        code: 'licenseRefreshedNoChanges',
                        message: 'License refreshed successfully (no changes)',
                        hasChanges: false
                    };
                }
            } else {
                error('‚ùå License refresh failed:', result.error);
                return { 
                    success: false, 
                    code: 'licenseRefreshFailed',
                    error: result.error || 'Unknown error'
                };
            }
            
        } catch (err) {
            error('‚ùå Error refreshing license:', err);
            return { 
                success: false, 
                code: 'licenseRefreshFailed',
                error: error.message 
            };
        }
    }

    /**
     * Sao l∆∞u d·ªØ li·ªáu kh√¥ng bao g·ªìm viewer_history (ƒë·ªÉ gi·∫£m k√≠ch th∆∞·ªõc)
     */
    async backupDataWithoutHistory() {
        log('üì¶ ƒêang sao l∆∞u database (lo·∫°i b·ªè viewer_history)...');
        
        try {
            const fs = require('fs');
            const path = require('path');
            const { app } = require('electron');
            
            // ƒê∆∞·ªùng d·∫´n database g·ªëc
            const dbPath = path.join(app.getPath('userData'), 'tiktok-live.db');
            
            // T·∫°o th∆∞ m·ª•c backup trong userData
            const backupDir = path.join(app.getPath('userData'), 'backups');
            if (!fs.existsSync(backupDir)) {
                fs.mkdirSync(backupDir, { recursive: true });
            }
            
            // T·∫°o t√™n file backup v·ªõi timestamp
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupFileName = `tiktok-live-backup-no-history-${timestamp}.db`;
            const backupPath = path.join(backupDir, backupFileName);
            
            // Ki·ªÉm tra file database g·ªëc
            if (!fs.existsSync(dbPath)) {
                throw new Error(`Database file not found: ${dbPath}`);
            }
            
            // ‚úÖ S·ª≠ d·ª•ng storage manager ƒë·ªÉ export data v√† t·∫°o backup m·ªõi
            log('üì¶ Export data t·ª´ storage manager...');
            
            // L·∫•y t·∫•t c·∫£ data tr·ª´ viewer_history
            const accounts = await this.storageManager.getAllAccounts();
            const proxies = await this.storageManager.getAllProxies();
            const folders = await this.storageManager.getAllFolders();
            const rooms = await this.storageManager.getAllRooms();
            const settings = await this.storageManager.getSettings();
            const tasks = await this.storageManager.getAllTasks();
            
            // T·∫°o database backup m·ªõi v√† import data
            const Database = require('better-sqlite3');
            const backupDb = new Database(backupPath);
            
            // Copy schema t·ª´ database g·ªëc (tr·ª´ viewer_history)
            const sourceDb = new Database(dbPath, { readonly: true });
            const tables = sourceDb.prepare(`
                SELECT name, sql FROM sqlite_master 
                WHERE type='table' AND name NOT LIKE 'sqlite_%' AND name != 'viewer_history'
            `).all();
            
            // T·∫°o tables
            for (const table of tables) {
                if (table.sql) {
                    backupDb.exec(table.sql);
                }
            }
            
            sourceDb.close();
            
            // Import data
            if (accounts && accounts.length > 0) {
                const stmt = backupDb.prepare(`
                    INSERT INTO accounts VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                `);
                for (const account of accounts) {
                    stmt.run(
                        account.id, account.uid, account.username, account.nickname, 
                        account.avatar, account.avatarThumb, account.sessionId, account.proxyId,
                        account.folderId, account.status, account.lastChecked, account.viewerCount,
                        account.realViewers, account.roomId, account.roomUrl, account.notes,
                        account.isActive, account.lastError, account.createdAt, account.updatedAt
                    );
                }
            }
            
            if (proxies && proxies.length > 0) {
                const stmt = backupDb.prepare(`
                    INSERT INTO proxies VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                `);
                for (const proxy of proxies) {
                    stmt.run(
                        proxy.id, proxy.host, proxy.port, proxy.username, proxy.password,
                        proxy.type, proxy.folderId, proxy.status, proxy.lastChecked, proxy.responseTime,
                        proxy.country, proxy.notes, proxy.isActive, proxy.createdAt, proxy.updatedAt
                    );
                }
            }
            
            // Import c√°c data kh√°c t∆∞∆°ng t·ª±...
            if (settings) {
                const stmt = backupDb.prepare(`
                    INSERT INTO settings VALUES (?, ?, ?)
                `);
                for (const [key, value] of Object.entries(settings)) {
                    stmt.run(key, JSON.stringify(value), new Date().toISOString());
                }
            }
            
            backupDb.close();
            
            // Verify backup file ƒë∆∞·ª£c t·∫°o
            if (fs.existsSync(backupPath)) {
                const backupSize = fs.statSync(backupPath).size;
                const originalSize = fs.statSync(dbPath).size;
                
                log(`üì¶ Backup database th√†nh c√¥ng (kh√¥ng c√≥ viewer_history): ${backupFileName}`);
                log(`üìÅ ƒê∆∞·ªùng d·∫´n: ${backupPath}`);
                log(`üìä K√≠ch th∆∞·ªõc backup: ${(backupSize / 1024 / 1024).toFixed(2)} MB`);
                log(`üìä K√≠ch th∆∞·ªõc g·ªëc: ${(originalSize / 1024 / 1024).toFixed(2)} MB`);
                log(`üíæ Ti·∫øt ki·ªám: ${(((originalSize - backupSize) / originalSize) * 100).toFixed(1)}%`);
                
                // X√≥a backup c≈© (gi·ªØ l·∫°i 10 file g·∫ßn nh·∫•t)
                this.cleanupOldBackups(backupDir);
                
                return { 
                    success: true, 
                    backupPath, 
                    backupFileName,
                    size: backupSize,
                    originalSize,
                    spaceSaved: originalSize - backupSize
                };
            } else {
                throw new Error('Backup file was not created');
            }
            
        } catch (err) {
            error('‚ùå L·ªói khi sao l∆∞u database (no history):', err);
            throw err;
        }
    }
}

// ‚≠ê Export class TaskHandlers ƒë·ªÉ c√≥ th·ªÉ kh·ªüi t·∫°o v·ªõi storageManager
module.exports = TaskHandlers;