const { Notification, app, dialog } = require('electron');
const path = require('path');
const { log, error } = require('./logger');
const fs = require('fs');
const appState = require('./app-state');

/**
 * Qu·∫£n l√Ω th√¥ng b√°o desktop v·ªõi h·ªó tr·ª£ ƒëa ng√¥n ng·ªØ
 */
class NotificationManager {
    constructor() {
        this.enabled = true;
        
        // Thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n icon ƒë·ªÉ s·ª≠ d·ª•ng icon c√≥ s·∫µn
        // const iconPath = path.join(app.getAppPath(), 'resources/icon.png');
        const iconPath = path.join(__dirname, '..', 'resources', 'icon.png');
        log(`üì¢ Icon path for notifications: ${iconPath}`);
        
        this.iconPath = iconPath;
        this.soundEnabled = true;
        this.historyLimit = 50;
        this.notificationHistory = [];
        
        // L∆∞u tham chi·∫øu ƒë·∫øn th√¥ng b√°o ƒë·ªÉ tr√°nh b·ªã garbage collected
        this.activeNotifications = [];
        
        // Kh·ªüi t·∫°o h·ªó tr·ª£ ƒëa ng√¥n ng·ªØ
        this.translations = this.loadTranslations(appState.language);
        
        // ƒêƒÉng k√Ω l·∫Øng nghe thay ƒë·ªïi ng√¥n ng·ªØ t·ª´ AppState
        appState.addListener('language', (language) => {
            log(`üåê Ng√¥n ng·ªØ th√¥ng b√°o thay ƒë·ªïi th√†nh: ${language}`);
            this.translations = this.loadTranslations(language);
        });
        
        // Ki·ªÉm tra h·ªó tr·ª£ th√¥ng b√°o
        if (!Notification.isSupported()) {
            log('‚ùå Th√¥ng b√°o kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ tr√™n h·ªá th·ªëng n√†y');
            this.enabled = false;
        } else {
            log('‚úÖ Th√¥ng b√°o ƒë∆∞·ª£c h·ªó tr·ª£ tr√™n h·ªá th·ªëng n√†y');
        }
        
        // Thi·∫øt l·∫≠p AppUserModelId cho Windows
        if (process.platform === 'win32' || process.platform === 'win64') {
            try {
                // app.setAppUserModelId(app.getName() || 'TTL TikTok Live');
                app.setAppUserModelId('com.amac.tiktoklive');
                log('‚úÖ ƒê√£ thi·∫øt l·∫≠p AppUserModelId cho Windows');
            } catch (err) {
                error('‚ùå L·ªói khi thi·∫øt l·∫≠p AppUserModelId:', err);
            }
        }
    }

    /**
     * ƒê·ªçc file translations d·ª±a tr√™n ng√¥n ng·ªØ
     */
    loadTranslations(lang) {
        try {
            const isProd = process.env.NODE_ENV === 'production';
            let translationPath;
            
            if (isProd) {
                // Trong m√¥i tr∆∞·ªùng production, ƒë∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c locales trong extraResources
                translationPath = path.join(process.resourcesPath, 'locales', lang, 'notification.json');
                
                log(`üîç Notification: Extra resources path: ${path.join(process.resourcesPath, 'locales')}`);
            } else {
                // M√¥i tr∆∞·ªùng development
                translationPath = path.join(app.getAppPath(), 'renderer', 'locales', lang, 'notification.json');
            }
            
            log(`üåê ƒêang ƒë·ªçc b·∫£n d·ªãch t·ª´: ${translationPath}`);
            
            if (fs.existsSync(translationPath)) {
                const data = fs.readFileSync(translationPath, 'utf8');
                const translations = JSON.parse(data);
                log(`‚úÖ ƒê·ªçc b·∫£n d·ªãch ${lang} th√†nh c√¥ng`);
                return translations;
            } else {
                log(`‚ùå Kh√¥ng t√¨m th·∫•y file b·∫£n d·ªãch cho ${lang} t·∫°i ${translationPath}`);
                // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ ƒë·ªçc ti·∫øng Vi·ªát
                if (lang !== 'vi') {
                    log(`üîÑ ƒêang fallback v·ªÅ ti·∫øng Vi·ªát`);
                    return this.loadTranslations('vi');
                }
                // N·∫øu kh√¥ng c√≥ c·∫£ ti·∫øng Vi·ªát, tr·∫£ v·ªÅ object r·ªóng
                return {};
            }
        } catch (err) {
            error(`‚ùå L·ªói khi ƒë·ªçc b·∫£n d·ªãch ${lang}:`, err);
            return {};
        }
    }

    /**
     * ƒê·∫∑t ng√¥n ng·ªØ hi·ªán t·∫°i
     */
    setLanguage(lang) {
        // C·∫≠p nh·∫≠t ng√¥n ng·ªØ trong AppState, NotificationManager s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t qua listener
        appState.language = lang;
    }

    /**
     * Ph∆∞∆°ng th·ª©c t() ƒë·ªÉ l·∫•y b·∫£n d·ªãch
     */
    t(key, params = {}) {
        try {
            // Ph√¢n t√°ch key
            const keyParts = key.split('.');
            let result = this.translations;
            
            // Duy·ªát qua c√°c ph·∫ßn c·ªßa key
            for (const part of keyParts) {
                if (result && result[part] !== undefined) {
                    result = result[part];
                } else {
                    log(`‚ùì Kh√¥ng t√¨m th·∫•y key ${key} trong b·∫£n d·ªãch ${appState.language}`);
                    return key;
                }
            }
            
            // Thay th·∫ø c√°c tham s·ªë
            if (typeof result === 'string') {
                for (const paramKey in params) {
                    result = result.replace(`{${paramKey}}`, params[paramKey]);
                }
            }
            
            return result;
        } catch (err) {
            error(`‚ùå L·ªói khi d·ªãch key ${key}:`, err);
            return key;
        }
    }

    /**
     * G·ª≠i th√¥ng b√°o
     */
    sendNotification(options) {
        if (!this.enabled) {
            log('‚ùå Th√¥ng b√°o ƒë√£ b·ªã t·∫Øt, kh√¥ng g·ª≠i th√¥ng b√°o');
            return null;
        }
        
        try {
            log(`üì¢ ƒêang g·ª≠i th√¥ng b√°o: ${options.title}`);
            
            const defaultOptions = {
                title: 'TTL TikTok Live',
                body: '',
                icon: options.icon || this.iconPath,
                silent: !this.soundEnabled,
                timeoutType: 'default'
            };
            
            const notificationOptions = { ...defaultOptions, ...options };
            log(`üì¢ Chi ti·∫øt th√¥ng b√°o: ${JSON.stringify(notificationOptions)}`);
            
            // T·∫°o th√¥ng b√°o v·ªõi t√πy ch·ªçn ƒë·∫ßy ƒë·ªß
            const notification = new Notification({
                title: notificationOptions.title,
                body: notificationOptions.body,
                icon: notificationOptions.icon,
                silent: notificationOptions.silent,
                urgency: notificationOptions.urgency || 'normal',
                timeoutType: notificationOptions.timeoutType || 'default',
                hasReply: false
            });
            
            // L∆∞u tham chi·∫øu ƒë·∫øn th√¥ng b√°o ƒë·ªÉ tr√°nh b·ªã garbage collected
            this.activeNotifications.push(notification);
            
            // ƒêƒÉng k√Ω c√°c s·ª± ki·ªán
            notification.on('show', () => {
                log(`üì¢ Th√¥ng b√°o hi·ªÉn th·ªã: ${notificationOptions.title}`);
            });
            
            notification.on('click', () => {
                log(`üì¢ Th√¥ng b√°o ƒë∆∞·ª£c nh·∫•p: ${notificationOptions.title}`);
                if (options.onClick) {
                    options.onClick();
                }
                this.clearNotification(notification);
            });
            
            notification.on('close', () => {
                log(`üì¢ Th√¥ng b√°o ƒë√≥ng: ${notificationOptions.title}`);
                this.clearNotification(notification);
            });
            
            notification.on('failed', (event, err) => {
                log(`‚ùå L·ªói th√¥ng b√°o: ${err}`);
                this.clearNotification(notification);
            });
            
            // Hi·ªÉn th·ªã th√¥ng b√°o
            notification.show();
            log(`üì¢ ƒê√£ g·ªçi h√†m show() cho th√¥ng b√°o`);
            
            // L∆∞u v√†o l·ªãch s·ª≠
            this.addToHistory({
                title: notificationOptions.title,
                body: notificationOptions.body,
                timestamp: new Date().toISOString()
            });
            
            return notification;
        } catch (err) {
            error('‚ùå L·ªói khi g·ª≠i th√¥ng b√°o:', err);
            
            // Hi·ªÉn th·ªã dialog thay th·∫ø n·∫øu c√≥ l·ªói
            try {
                dialog.showMessageBox({
                    type: 'info',
                    title: options.title || 'TTL TikTok Live',
                    message: options.body || '',
                    buttons: ['OK']
                });
            } catch (dialogErr) {
                error('‚ùå L·ªói khi hi·ªÉn th·ªã dialog thay th·∫ø:', dialogErr);
            }
            
            return null;
        }
    }
    
    /**
     * X√≥a th√¥ng b√°o kh·ªèi danh s√°ch tham chi·∫øu
     */
    clearNotification(notificationToDelete) {
        this.activeNotifications = this.activeNotifications.filter(
            notification => notification !== notificationToDelete
        );
        log(`üì¢ ƒê√£ x√≥a th√¥ng b√°o kh·ªèi danh s√°ch tham chi·∫øu, c√≤n l·∫°i ${this.activeNotifications.length} th√¥ng b√°o`);
    }
    
    /**
     * G·ª≠i th√¥ng b√°o khi room d·ª´ng
     */
    notifyRoomStopped(roomData) {
        log(`üì¢ G·ªçi notifyRoomStopped v·ªõi roomData: ${JSON.stringify(roomData)}`);
        const roomIdentifier = roomData.roomUsername || roomData.roomName || roomData.roomId || 'Unknown';
        return this.sendNotification({
            title: this.t('notifications.roomStopped.title'),
            body: this.t('notifications.roomStopped.body', {roomIdentifier}),
            urgency: 'normal',
            timeoutType: 'default',
            onClick: () => {
                // Action khi click v√†o th√¥ng b√°o
                log(`üì± Ng∆∞·ªùi d√πng nh·∫•p v√†o th√¥ng b√°o room d·ª´ng: ${roomIdentifier}`);
                // C√≥ th·ªÉ tri·ªÉn khai m·ªü c·ª≠a s·ªï room history
            }
        });
    }
    
    /**
     * G·ª≠i th√¥ng b√°o khi ph√°t hi·ªán room m·ªõi
     */
    notifyNewRoom(roomData) {
        log(`üì¢ G·ªçi notifyNewRoom v·ªõi roomData: ${JSON.stringify(roomData)}`);
        const roomIdentifier = roomData.roomUsername || roomData.roomName || roomData.roomId || 'Unknown';
        return this.sendNotification({
            title: this.t('notifications.newRoom.title'),
            body: this.t('notifications.newRoom.body', {roomIdentifier}),
            urgency: 'normal',
            onClick: () => {
                log(`üì± Ng∆∞·ªùi d√πng nh·∫•p v√†o th√¥ng b√°o room m·ªõi: ${roomIdentifier}`);
            }
        });
    }
    notifyTest() {
        log(`üì¢ G·ªçi notifyTest`);
        return this.sendNotification({
            title: this.t('notifications.test.title'),
            body: this.t('notifications.test.body'),
            urgency: 'normal',
            onClick: () => {
                log(`üì± Ng∆∞·ªùi d√πng nh·∫•p v√†o th√¥ng b√°o test ch·ª©c nƒÉng th√¥ng b√°o`);
            }
        });
    }
    
    /**
     * G·ª≠i th√¥ng b√°o l·ªói
     */
    notifyError(title, message) {
        log(`üì¢ G·ªçi notifyError v·ªõi title: ${title}, message: ${message}`);
        return this.sendNotification({
            title: title || this.t('notifications.error.title'),
            body: message || this.t('notifications.error.defaultMessage'),
            urgency: 'critical',
            timeoutType: 'never'
        });
    }
    
    /**
     * L∆∞u th√¥ng b√°o v√†o l·ªãch s·ª≠
     */
    addToHistory(notification) {
        this.notificationHistory.unshift(notification);
        
        // Gi·ªõi h·∫°n l·ªãch s·ª≠
        if (this.notificationHistory.length > this.historyLimit) {
            this.notificationHistory = this.notificationHistory.slice(0, this.historyLimit);
        }
    }
    
    /**
     * L·∫•y l·ªãch s·ª≠ th√¥ng b√°o
     */
    getHistory() {
        return this.notificationHistory;
    }
    
    /**
     * B·∫≠t/t·∫Øt th√¥ng b√°o
     */
    setEnabled(enabled) {
        this.enabled = enabled;
        log(`üì¢ Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ${enabled ? 'b·∫≠t' : 't·∫Øt'}`);
    }
    
    /**
     * B·∫≠t/t·∫Øt √¢m thanh
     */
    setSoundEnabled(enabled) {
        this.soundEnabled = enabled;
        log(`üîä √Çm thanh th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ${enabled ? 'b·∫≠t' : 't·∫Øt'}`);
    }
}

module.exports = new NotificationManager(); 