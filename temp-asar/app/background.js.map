 !head.body && isGetBody) {
        if (retry < retryTime && isRetry) {
          if (proxy_list && proxy_list.length > 0) {
            const randomProxy = proxy_list[Math.floor(Math.random() * proxy_list.length)];
            options.proxy = randomProxy;
          }
          retry++;
          options.retryCount = retry;
          await delay(retryAfter || 10000);
          return await this.makeRequest(options);
        }
      }
      if (customHttpsAgent) this.safeDestroyAgent(customHttpsAgent);
      if (customHttpAgent) this.safeDestroyAgent(customHttpAgent);
      return head;
    } catch (error) {
      // Ghi log chi tiết hơn về lỗi để dễ debug
      log(`Request error [${url}] [${proxy || this.proxy}]:`, error.message);

      // Xử lý lỗi
      const errorResponse = {
        error: error.message,
        body: "",
        headers: error.response ? error.response.headers : {},
        status: error.response ? error.response.status : null
      };

      // Kiểm tra nếu là lỗi 403
      if (error.response && error.response.status === 403) {
        that.status_viewer = 4;
        errorResponse.status = 403;
      }

      // Kiểm tra lỗi 503 - Service Unavailable
      if (error.response && error.response.status === 503) {
        log(`Service Unavailable (503) with proxy ${proxy || that.proxy}`);
        // Thử retry với proxy khác
        if (proxy_list && proxy_list.length > 0) {
          const randomProxy = proxy_list[Math.floor(Math.random() * proxy_list.length)];
          log(`Retrying with different proxy: ${randomProxy}`);
          options.proxy = randomProxy;
          retry++;
          options.retryCount = retry;
          // if(customHttpsAgent)this.safeDestroyAgent(customHttpsAgent);
          // if(customHttpAgent)this.safeDestroyAgent(customHttpAgent);
          await delay(3000); // Đợi lâu hơn cho lỗi 503
          return await this.makeRequest(options);
        }
      }

      // Xử lý retry nếu cần
      if (retry < retryTime && isRetry) {
        if (proxy_list && proxy_list.length > 0) {
          const randomProxy = proxy_list[Math.floor(Math.random() * proxy_list.length)];
          options.proxy = randomProxy;
        }
        retry++;
        options.retryCount = retry;
        await delay(retryAfter || 10000);
        // if(customHttpsAgent)this.safeDestroyAgent(customHttpsAgent);
        // if(customHttpAgent)this.safeDestroyAgent(customHttpAgent);
        return await this.makeRequest(options);
      }
      return errorResponse;
    }
  }
  encodeRFC3986URIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, c => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);
  }
  async send403Rabbit(proxy) {
    try {
      let rabbitService = await RabbitMQ.getInstance({
        url: "amqp://bupmat:bupmat@185.190.140.88:5672/" + this.server_site + "?heartbeat=60"
      });
      if (proxy) {
        let message = {
          "action": "update_account_403_fetch",
          "proxy": proxy,
          time_now: Date.now()
        };
        await rabbitService.sendMessage("rabbit_cron", message);
      }
    } catch (error) {
      log("error handleSendRabbit", error);
    }
  }
  fetch() {
    return new Promise(async r => {
      let start = Date.now();
      let done = false;
      let isFetch = false;
      let isApi = false;
      let {
        timeout
      } = {
        timeout: 30000
      };
      let {
        cookie_string,
        video_id,
        msToken: cmsToken,
        session_id: csession_id
      } = this;
      var msToken = cmsToken || getString(cookie_string + ';', 'msToken=', ';');
      let session_id = csession_id || getString(cookie_string.replace(/ /g, '') + ';', ';sessionid=', ';') || getString(cookie_string.replace(/ /g, '') + ';', 'sessionid=', ';');
      this.session_id = session_id;
      if (session_id == "") {
        throw new Error("Cookie no session id");
      }
      try {
        let appVersion = encodeURI(appVersionDefault);
        isFetch = true;
        let history_comment_cursor = this.history_comment_cursor || 0;
        let cursor = this.cursor || '';
        let internal_ext = this.internal_ext || '';
        let fetch_rule = this.internal_ext ? 2 : 1;
        fetch_rule = 1;
        let endpoint = `version_code=180800&device_platform=web&cookie_enabled=true&screen_width=1512&screen_height=982&browser_language=vi&browser_platform=${browser_platform}&browser_name=Mozilla&browser_version=${appVersion}&browser_online=true&tz_name=Asia/Saigon&aid=1988&app_name=tiktok_web&live_id=12&version_code=270000&debug=false&app_language=vi-VN&client_enter=1&room_id=${this.room_id}&identity=audience&history_comment_count=6&fetch_rule=1&last_rtt=${this.last_rtt}&internal_ext=${internal_ext.replaceAll("|", "%7C")}&cursor=${cursor}&history_comment_cursor=${history_comment_cursor}&sup_ws_ds_opt=1&resp_content_type=protobuf&did_rule=3`;
        let url = "";
        if (!internal_ext) {
          endpoint = `version_code=180800&device_platform=web&cookie_enabled=true&screen_width=1512&screen_height=982&browser_language=vi&browser_platform=${browser_platform}&browser_name=Mozilla&browser_version=${appVersion}&browser_online=true&tz_name=Asia/Saigon&aid=1988&app_name=tiktok_web&live_id=12&version_code=270000&debug=false&app_language=vi-VN&client_enter=1&room_id=${this.room_id}&identity=audience&history_comment_count=6&fetch_rule=1&last_rtt=-1&internal_ext=0&cursor=0&history_comment_cursor=0&sup_ws_ds_opt=1&resp_content_type=protobuf&did_rule=3`;
        }
        if (this.imfetch_time >= 11) {
          endpoint = this.endpoint;
          this.delay = getRandomInt(30, 45) * 1000;
        } else {
          this.endpoint = endpoint;
          this.delay = this.delay_all_time;
        }
        let route = 'https://webcast.tiktok.com/webcast/im/fetch/';
        let {
          targetUrl
        } = await this.sign({
          url: `${route}?${endpoint}`,
          msToken
        });
        let is_retry = false;

        // let  { url: targetUrl, xbogus, _signature, is_retry} = await br.buildUrlPageFull({url: `${route}?${endpoint}`, msToken})
        if (is_retry) {
          await delay(500);
          return r(await this.fetch());
        }
        url = targetUrl;
        var options = {
          url: url,
          method: 'GET',
          timeout,
          headers: {
            'Accept': '*/*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Connection': 'keep-alive',
            'Cookie': cookie_string,
            "priority": "u=1, i",
            "b": cookie_string,
            'Origin': 'https://www.tiktok.com',
            'Referer': 'https://www.tiktok.com',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-origin',
            'User-Agent': userAgentDefault,
            'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'sec-ch-ua': '"Chromium";v="131", "Not:A-Brand";v="24", "Google Chrome";v="131"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"macOS"',
            "dnt": "1",
            'x-secsdk-csrf-token': 'DOWNGRADE'
          },
          isRetry: true,
          retryTime: 2,
          responseType: 'arraybuffer',
          preCheckRetry: (body, jsonBody) => {
            if (!body || !body.includes(`wrss`)) {
              return true;
            }
          }
        };
        this.last_time = Date.now();
        let data_page = await this.makeRequest(options);
        if (data_page.bodyBinary) {
          let hex = data_page.bodyBinary.toString('hex');
          let idHexServer = getString(hex, "a181", "6720") || getString(hex, "b181", "6720") || getString(hex, "c181", "6720");
          if (!this.idHexServer) {
            this.idHexServer = idHexServer;
          }
        }
        let that = this;
        function updateCookie() {
          if (data_page.headers && data_page.headers['set-cookie'] && data_page.headers['set-cookie'].length) {
            let new_cookie = data_page.headers['set-cookie'].map(i => {
              let msToken = getString(i, 'msToken=', ';');
              if (msToken) {
                that.cookie_string = cookie_string.replace(/msToken=[^;]+/g, `msToken=${msToken}`);
                return `msToken=${msToken}`;
              }
            });
          }
        }
        updateCookie();
        this.last_rtt = Date.now() - this.last_time;
        function Wrss(data) {
          let [t, w] = data.match(/wrss(.*?):/) || [];
          w = w || "";
          return w.slice(2, 45);
        }
        function getData(split, current, is_last_time) {
          split = split || [];
          current = current || split.length - 1;
          if (is_last_time) current = 0;
          while (current >= 0) {
            if (split[current].includes("fetch_time")) {
              return split[current];
            }
            current--;
          }
          return "";
        }
        function getHistoryComment(split) {
          let history_comment = "";
          for (let i = 0; i < split.length; i++) {
            if (split[i].includes("ws_proxy")) {
              history_comment = split[i].slice(-19);
            }
          }
          history_comment = history_comment.replace(/\D/g, "");
          return history_comment;
        }
        if (!done) {
          done = true;
          if (data_page.error) {
            log("error fetch", this.session_id, data_page.error, this.proxy);
          }
          if (data_page.status == 403) {
            log("fetch 403", this.session_id, this.proxy);
            this.send403Rabbit(this.proxy);
            throw new Error("Request failed with status code 403");
          }
          if (data_page.body && data_page.body.length) {
            let split = data_page.body.split('\n');
            let wrss = Wrss(data_page.body);
            wrss = wrss.replace(":", "");
            if (wrss) {
              this.wrss = wrss;
            }
            let str = getData(split);
            let ext = getString(str, 'fetch_time').replace('0\x01:&', '').replace(/\x01/g, "").replace(":\t", "");
            let cursor = getString(ext, 'next_cursor:', '|').replace('\x01:&', '');
            if (!this.history_comment_cursor) {
              this.history_comment_cursor = getHistoryComment(split);
            }
            if (this.setCursor) {
              ext = ext.replace(/:3$/, "");
              ext = ext.endsWith("00") ? ext.replace(/0$/, "") : ext;
              this.internal_ext = 'fetch_time' + ext;
              this.cursor = cursor;
            }
          }
          let result = {
            is_403: data_page.status == 403,
            is_fetch: true,
            process_time: Date.now() - start,
            start
          };
          this.fetch_403 = data_page.status == 403;
          return r(result);
        }
      } catch (error) {
        log("error", error);
        if (error.message.includes("status code 403")) {
          this.internal_ext = "";
          this.cursor = "";
          this.last_time = 0;
        }
        this.url = "";
        let result = {
          is_403: error.message.includes("status code 403") ? true : false,
          is_fetch: true,
          error: error.message,
          process_time: Date.now() - start,
          start
        };
        this.fetch_403 = error.message.includes("status code 403") ? true : false;
        return r(result);
      }
    });
  }

  // =========== PHƯƠNG THỨC QUẢN LÝ GROUP VIEWER ===========
  static setdatelocal(key, value) {
    data_local[key] = value;
  }
  static getdatelocal(key) {
    return data_local[key];
  }
  static async checkViewer403() {
    while (is_running) {
      await delay(20000);
      try {
        let total = 0;
        let fetch_403 = 0;
        let list_403 = [];
        let list_die = [];
        for (let i in data) {
          let sockets = data[i].sockets;
          sockets.forEach(item => {
            total++;
            if (item.status_viewer == 4 && !list_403_total.includes(item.session_id)) {
              list_403.push(item.session_id);
              list_403_total.push(item.session_id);
              fetch_403++;
            }
            if (item.status_viewer == 3 && !list_die_total.includes(item.session_id)) {
              list_die.push(item.session_id);
              list_die_total.push(item.session_id);
            }
          });
        }
        if (list_403.length > 0) {
          log("list_403", list_403.length);
          await GroupView.send403Rabbit(list_403, "update_account_403");
        }
        if (list_die.length > 0) {
          log("list_die", list_die.length);
          await GroupView.send403Rabbit(list_die, "update_account_die");
        }
      } catch (e) {
        log("checkViewer403 error", e);
      }
    }
  }
  static async removeViewer(socket) {
    // Phương thức để xóa viewer khỏi danh sách
  }
  static startProxyGroupViewers({
    accounts,
    task_id,
    proxy,
    room_id,
    ex_wrss
  }) {
    try {
      accounts.forEach(async (i, index) => {
        let p = getString(i + ";", "proxy=", ";");
        if (p && proxy) {
          i = i.replace("proxy=" + p, "");
          i += ";proxy=" + proxy;
        }
        let proxy_list = [p];
        let viewer = new GroupView({
          cookie_string: i,
          room_id,
          proxy: proxy || p,
          proxy_list,
          server_site: data_local.server_site
        });
        viewer.run();
        data[task_id].sockets = [...data[task_id].sockets, viewer];
      });
    } catch (e) {
      log("startProxyGroupViewers error", e, new Date().toLocaleString());
    }
    GroupView.checkViewer403();
  }
  static async startViewers({
    accounts,
    task_id,
    proxy,
    room_id,
    ex_wrss,
    tokens
  }) {
    try {
      log("Start task_id:", task_id, " room:", room_id, " accounts:", accounts.length);
      data[task_id] = {
        sockets: []
      };
      let grouped_proxy = accounts.reduce((pre, cur) => {
        let p = getString(cur + ";", "proxy=", ";");
        return {
          ...pre,
          [p]: pre[p] ? [...pre[p], cur] : [cur]
        };
      }, {});
      for (let i in grouped_proxy) {
        GroupView.startProxyGroupViewers({
          accounts: grouped_proxy[i],
          task_id,
          proxy,
          room_id
        });
      }
    } catch (e) {
      log("startViewers error", e, new Date().toLocaleString());
    }
  }
  static async updateProxy({
    data_proxy
  }) {
    try {
      for (let task_id in data) {
        if (data[task_id]) {
          let sockets = data[task_id].sockets;
          for (let i = 0; i < sockets.length; i++) {
            if (sockets[i].status == "running") {
              let p = getString(sockets[i].cookie_string + ";", "proxy=", ";");
              if (p && data_proxy[p]) {
                sockets[i].proxy = data_proxy[p];
                sockets[i].proxy_list = [data_proxy[p]];
              }
            }
          }
        }
      }
    } catch (e) {
      log("updateProxy error", e, new Date().toLocaleString());
    }
  }
  static async stopViewers({
    task_id
  }) {
    is_running = false;
    log("Stop -- task_id:", task_id);
    try {
      if (data[task_id]) {
        for (let i = 0; i < data[task_id].sockets.length; i++) {
          data[task_id].sockets[i].cancel();
        }
        data[task_id].sockets = [];
      }
    } catch (e) {
      log("stopViewers error", e, new Date().toLocaleString());
    }
  }
  static async send403Rabbit(list_403, action = "update_account_403") {
    try {
      let rabbitService = await RabbitMQ.getInstance({
        url: "amqp://bupmat:bupmat@185.190.140.88:5672/" + data_local.server_site + "?heartbeat=60"
      });
      if (list_403.length) {
        let message = {
          "action": action,
          "accounts": list_403,
          time_now: Date.now()
        };
        await rabbitService.sendMessage("rabbit_cron", message);
      }
    } catch (error) {
      log("error handleSendRabbit", error);
    }
  }

  // Phương thức chuẩn hóa xử lý chuỗi proxy
  parseProxyString(proxy) {
    if (!proxy) return null;
    try {
      // Trường hợp proxy đã là object
      if (typeof proxy === 'object' && proxy.host && proxy.port) {
        return proxy;
      }

      // Trường hợp proxy là string
      if (typeof proxy === 'string') {
        // Proxy là URL đầy đủ (http://user:pass@host:port)
        if (proxy.includes('://')) {
          try {
            const proxyUrl = new URL(proxy);
            return {
              protocol: proxyUrl.protocol.replace(':', ''),
              host: proxyUrl.hostname,
              port: parseInt(proxyUrl.port),
              username: proxyUrl.username || undefined,
              password: proxyUrl.password || undefined
            };
          } catch (e) {
            log("Error parsing proxy URL:", e.message);
          }
        }

        // Proxy dạng user:pass@host:port
        if (proxy.includes('@')) {
          const [auth, hostPort] = proxy.split('@');
          if (hostPort && hostPort.includes(':')) {
            const [host, port] = hostPort.split(':');
            const [username, password] = auth.split(':');
            return {
              host,
              port: parseInt(port),
              username,
              password
            };
          }
        }

        // Proxy dạng host:port
        if (proxy.includes(':')) {
          const [host, port] = proxy.split(':');
          return {
            host,
            port: parseInt(port)
          };
        }
      }
      log("Invalid proxy format:", proxy);
      return null;
    } catch (e) {
      log("Error parsing proxy:", e.message);
      return null;
    }
  }
}
GroupView.data = data;
module.exports = GroupView;

/***/ }),

/***/ "./main/businesses/helper.js":
/*!***********************************!*\
  !*** ./main/businesses/helper.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const fs = __webpack_require__(/*! fs */ "fs");
const path = __webpack_require__(/*! path */ "path");
const request = __webpack_require__(/*! request */ "request");
const os = __webpack_require__(/*! os */ "os");
const {
  execSync,
  exec,
  spawn
} = __webpack_require__(/*! child_process */ "child_process");
const crypto = __webpack_require__(/*! crypto */ "crypto");
const {
  log,
  error
} = __webpack_require__(/*! ../../lib/logger */ "./lib/logger.js");
const helper = {
  genuaMAC() {
    var ua = `Mozilla/5.0 (Macintosh; Intel Mac OS X ${helper.getRandomInt(10, 17)}_${helper.getRandomInt(0, 3)}_${helper.getRandomInt(0, 3)}) AppleWebKit/${helper.getRandomInt(500, 600)}.1.${helper.getRandomInt(1, 15)} (KHTML, like Gecko) Version/${helper.getRandomInt(15, 17)}.${helper.getRandomInt(0, 3)} Safari/${helper.getRandomInt(500, 600)}.1.${helper.getRandomInt(1, 15)}`;
    return ua;
  },
  makeSureDir: dir => {
    return new Promise(r => {
      try {
        if (!fs.existsSync(dir)) {
          fs.mkdirSync(dir);
        }
        return r(true);
      } catch (e) {
        error("error makeSureDir", e);
        return false;
      }
    });
  },
  strData: function (path) {
    return new Promise(r => {
      try {
        fs.exists(path, ex => {
          if (!ex) return r("");
          let stream = fs.createReadStream(path || './data/strData.txt');
          let str = '';
          stream.on('data', chunk => {
            str += chunk;
          });
          stream.on('end', chunk => {
            r(str.trim());
          });
        });
      } catch (error) {
        r("");
      }
    });
  },
  appendFile: async function ({
    path,
    data
  }) {
    return await new Promise(r => {
      try {
        fs.appendFile(path, data, error => r(error ? false : true));
      } catch (e) {
        error("appendFile error", e);
      }
    });
  },
  writeFile: async function ({
    path,
    data
  }) {
    return await new Promise(r => {
      try {
        fs.writeFile(path, data, error => r(error ? false : true));
      } catch (e) {
        error("writeFile error", e);
      }
    });
  },
  shuffle: array => {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  },
  log_403: async function ({
    timestamp,
    clones,
    number_id
  }) {
    try {
      let _path_session = `./log_403/${timestamp}_${number_id}_sessionids.txt`;
      let _path_cookies = `./log_403/${timestamp}_${number_id}_cookies.txt`;
      let sessionids = (await helper.strData(path.resolve(_path_session))) || "";
      let sessionids_w = [];
      let cookies_w = [];
      for (let clone of clones) {
        if (!sessionids.includes(clone.session_id)) {
          sessionids_w.push(clone.session_id);
          cookies_w.push(clone.cookie_string);
        }
      }
      if (cookies_w.length) {
        sessionids_w = sessionids_w.join("|") + "|";
        cookies_w = cookies_w.join("\n") + "\n";
        helper.appendFile({
          path: _path_session,
          data: sessionids_w
        });
        helper.appendFile({
          path: _path_cookies,
          data: cookies_w
        });
      }
    } catch (e) {
      error("log_403 error", e);
    }
  },
  logs_die: async function ({
    clones
  }) {
    try {
      let _path_session = `./data/acc_die_sessionids.txt`;
      let _path_cookies = `./data/acc_die.txt`;
      let sessionids_w = [],
        cookies_w = [];
      let sessionids = (await helper.strData(path.resolve(_path_session))) || "";
      for (let clone of clones) {
        if (!sessionids.includes(clone.session_id)) {
          sessionids_w.push(clone.session_id);
          cookies_w.push(clone.cookie_string);
        }
      }
      if (cookies_w.length) {
        sessionids_w = sessionids_w.join("|") + "|";
        cookies_w = cookies_w.join("\n") + "\n";
        helper.appendFile({
          path: _path_session,
          data: sessionids_w
        });
        helper.appendFile({
          path: _path_cookies,
          data: cookies_w
        });
      }
    } catch (e) {
      error("log_die error", e);
    }
  },
  getAccs: async function () {
    let stringSource = await helper.strData(path.resolve("./data/acc_string.txt"));
    let strings = stringSource.trim().split("\n");
    let array = [{
      "domain": ".tiktok.com",
      "expirationDate": 1694925287.184404,
      "hostOnly": false,
      "httpOnly": true,
      "name": "cmpl_token",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "AgQQAPOFF-RO0rSNM89JeJ08_tTE3iYMf4UOYM4hxg",
      "id": 1
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1691722929.57717,
      "hostOnly": false,
      "httpOnly": false,
      "name": "msToken",
      "path": "/",
      "sameSite": "no_restriction",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "ZrmrlCOXaPIsJPAAgnhkyYPI54Kh0TAS0z7hTdDE2GuXp4rrxhCc94EKDE3oN0-QJu2tLAaeRdruxwas227-xiHxJJJJ-pCdV7v-3PTJ79S8h_QwwRztW1mFXZi7jnihubLIxKc=",
      "id": 2
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1722394927.966251,
      "hostOnly": false,
      "httpOnly": true,
      "name": "odin_tt",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "c0d19f2b161b916d6da355bd7f1f88145e123c17af81e155ae7478fe734de73c4e4c7f185119408308bb33245768d27f1e127553f07dc64b8aa60659376dfd954e376b1116cc77c861ba98e09101fe0d",
      "id": 3
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1692333287.184437,
      "hostOnly": false,
      "httpOnly": true,
      "name": "passport_auth_status",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "c769e1989f8a526be4320cc7d6150828%2C76c18c9ea61bc03228aebe967af7db83",
      "id": 4
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1692333287.184451,
      "hostOnly": false,
      "httpOnly": true,
      "name": "passport_auth_status_ss",
      "path": "/",
      "sameSite": "no_restriction",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "c769e1989f8a526be4320cc7d6150828%2C76c18c9ea61bc03228aebe967af7db83",
      "id": 5
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1694876512.0136,
      "hostOnly": false,
      "httpOnly": false,
      "name": "passport_csrf_token",
      "path": "/",
      "sameSite": "no_restriction",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "f6adbbf41da4349e1d95e0ff2361f78a",
      "id": 6
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1694876512.013636,
      "hostOnly": false,
      "httpOnly": false,
      "name": "passport_csrf_token_default",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "f6adbbf41da4349e1d95e0ff2361f78a",
      "id": 7
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1705293286.184521,
      "hostOnly": false,
      "httpOnly": true,
      "name": "sessionid",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "118adf4b4f42221cdf948dd6bcfa21b3",
      "id": 8
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1705293286.184533,
      "hostOnly": false,
      "httpOnly": true,
      "name": "sessionid_ss",
      "path": "/",
      "sameSite": "no_restriction",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "118adf4b4f42221cdf948dd6bcfa21b3",
      "id": 9
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1720845287.184469,
      "hostOnly": false,
      "httpOnly": true,
      "name": "sid_guard",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "118adf4b4f42221cdf948dd6bcfa21b3%7C1689741287%7C15551999%7CMon%2C+15-Jan-2024+04%3A34%3A46+GMT",
      "id": 10
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1705293286.184507,
      "hostOnly": false,
      "httpOnly": true,
      "name": "sid_tt",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "118adf4b4f42221cdf948dd6bcfa21b3",
      "id": 11
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1705293286.184547,
      "hostOnly": false,
      "httpOnly": true,
      "name": "sid_ucp_v1",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "1.0.0-KDc2ZjEyZGEwOTFhYzIwOTE0MjEyMjFiMDVjOTNmMDI5NDAxYTAyODQKHwiFiKmKjK332WQQ58_dpQYYswsgDDCMu8-lBjgIQBIQAxoGbWFsaXZhIiAxMThhZGY0YjRmNDIyMjFjZGY5NDhkZDZiY2ZhMjFiMw",
      "id": 12
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1705293286.184559,
      "hostOnly": false,
      "httpOnly": true,
      "name": "ssid_ucp_v1",
      "path": "/",
      "sameSite": "no_restriction",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "1.0.0-KDc2ZjEyZGEwOTFhYzIwOTE0MjEyMjFiMDVjOTNmMDI5NDAxYTAyODQKHwiFiKmKjK332WQQ58_dpQYYswsgDDCMu8-lBjgIQBIQAxoGbWFsaXZhIiAxMThhZGY0YjRmNDIyMjFjZGY5NDhkZDZiY2ZhMjFiMw",
      "id": 13
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1705293285.957351,
      "hostOnly": false,
      "httpOnly": true,
      "name": "store-country-code",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "vn",
      "id": 14
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1705293285.95737,
      "hostOnly": false,
      "httpOnly": true,
      "name": "store-country-code-src",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "uid",
      "id": 15
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1705293285.957268,
      "hostOnly": false,
      "httpOnly": true,
      "name": "store-idc",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "alisg",
      "id": 16
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1706410924.525725,
      "hostOnly": false,
      "httpOnly": true,
      "name": "tt_chain_token",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "Whz3fV/uffg2X3rFI2jDwA==",
      "id": 17
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "tt_csrf_token",
      "path": "/",
      "sameSite": "lax",
      "secure": true,
      "session": true,
      "storeId": "0",
      "value": "LcrwQjqk-fbeiBqQQm_yApX92ZX4znDxqhug",
      "id": 18
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1705293285.957385,
      "hostOnly": false,
      "httpOnly": true,
      "name": "tt-target-idc",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "alisg",
      "id": 19
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1721277288.013407,
      "hostOnly": false,
      "httpOnly": true,
      "name": "tt-target-idc-sign",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "WFpDkj4jovvU0oiahNJfMdjh2TGF15_K7cFJ4zM8cK0M3KYtkD6sE86i7_7LIb8G6R7tX3T-_1-xonpFwS5Q_wPk6f6xiPRXCaDsYEdrOkXrmKPiOXwqClUtXedo_r2V9sDmxiazAjH39J1E8X73xjPBnDNb1RZ1OEimlYv86BteD_FNGlHcf1Dku5BLy5jBReyMpoav7oRggBQLxV6_N-rKbHPDbX_2IMzaYm5Tf7w_woYDtvavO03G-0JkTL5xIthw9NE22hg6F-z2aI4m6pO-4P50rjaZO8T9bFr5WSIxMYRKpRYrQpceIZY-nNzxZyj9YVbozc_pPfdH1NuPBi7sHMM_P0TB4yU8rN7j1QjJ9KUPNARo8rETFH_8r3VayU7jlivdFxZDbDXWql6aVZheMYoYqKZYjpuaEdU-kciZJu0pwOQfgu2v7q1uAOnRMZEpG6KE0vGNFuxLEH4SBEw5wmXSSMMVW2nGlIWpOdyO0d8-rC_oM_V_rvhgFTn6",
      "id": 20
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1722394929.232063,
      "hostOnly": false,
      "httpOnly": true,
      "name": "ttwid",
      "path": "/",
      "sameSite": "no_restriction",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "1%7CcQahXXK1a5BOFLsJFF3vybReES7y-dREXvLhf4dFZ-0%7C1690858929%7C135da0f55ee0113f4ac2424c6d31a72953920a0845e9dec18009f2350c89738b",
      "id": 21
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1705293286.184483,
      "hostOnly": false,
      "httpOnly": true,
      "name": "uid_tt",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "6659faeffde75c6b04d5303ec7499115d60186fa016cc70a0769ea5d83c7caff",
      "id": 22
    }, {
      "domain": ".tiktok.com",
      "expirationDate": 1705293286.184495,
      "hostOnly": false,
      "httpOnly": true,
      "name": "uid_tt_ss",
      "path": "/",
      "sameSite": "no_restriction",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "6659faeffde75c6b04d5303ec7499115d60186fa016cc70a0769ea5d83c7caff",
      "id": 23
    }, {
      "domain": ".www.tiktok.com",
      "expirationDate": 1691463727,
      "hostOnly": false,
      "httpOnly": false,
      "name": "__tea_cache_tokens_1988",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "{%22_type_%22:%22default%22%2C%22user_unique_id%22:%227256809649374184967%22%2C%22timestamp%22:1689607678276}",
      "id": 24
    }, {
      "domain": ".www.tiktok.com",
      "hostOnly": false,
      "httpOnly": false,
      "name": "passport_fe_beating_status",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": true,
      "storeId": "0",
      "value": "true",
      "id": 25
    }, {
      "domain": ".www.tiktok.com",
      "expirationDate": 1716778927,
      "hostOnly": false,
      "httpOnly": false,
      "name": "tiktok_webapp_theme",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "light",
      "id": 26
    }, {
      "domain": "www.tiktok.com",
      "expirationDate": 1721143678.809367,
      "hostOnly": true,
      "httpOnly": false,
      "name": "living_user_id",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "98610993253",
      "id": 27
    }, {
      "domain": "www.tiktok.com",
      "expirationDate": 1698561981,
      "hostOnly": true,
      "httpOnly": false,
      "name": "msToken",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "L8KMHEgRCEs1LGufwSdLNFlGS6q4zyImq0mAyRXmdh-lqcJdHbBSsl_2d4egmql_IiuEoXTwUK-tnhla_-9GTHozKgUSphWxb9AhyzIlGaF1FTnzcq47NVKOMHJ7WUksEHxeryU=",
      "id": 28
    }];
    let list = [];
    strings.forEach(s => {
      let new_arr = [];
      let s2 = s.split("|");
      let string = s2[5];
      let strs = string.split(";");
      let sid = "";
      strs.forEach(item => {
        let is = item.split("=");
        let index = array.findIndex(i => i.name == is[0]);
        if (is[0] == "sessionid") {
          sid = is[1];
        }
        if (index !== -1) {
          let new_i = array[index];
          new_i.value = is[1];
          new_arr.push(new_i);
        }
      });
      list.push({
        array_cookie: new_arr,
        device_id: sid,
        name: sid
      });
    });
    return list;
  },
  delay: function (time) {
    return new Promise(r => setTimeout(() => {
      return r();
    }, time));
  },
  delayRandom: function (time) {
    return new Promise(r => setTimeout(r, (time || 1000) + (Math.floor(Math.random() * 5) + 1) * 18));
  },
  getPosition: function (string, subString, index) {
    return string.split(subString, index).join(subString).length;
  },
  getString: function (test_str, text_begin, text_end, index) {
    var fromIndex = index || 1;
    if (!test_str || test_str == '') {
      return '';
    }
    var start_pos = helper.getPosition(test_str.toString(), text_begin, fromIndex);
    if (start_pos < 0 || start_pos == test_str.length) {
      return '';
    }
    start_pos += text_begin.length;
    var end_pos = test_str.indexOf(text_end, start_pos);
    if (end_pos == -1) end_pos = test_str.length;
    var text_to_get = test_str.substring(start_pos, end_pos);
    if (text_to_get == test_str) return '';
    return text_to_get;
  },
  getRoomId: async function ({
    name,
    proxy,
    retryCount
  }) {
    if (!name.includes("https://")) {
      name = `https://www.tiktok.com/@${name}/live`;
    }
    ;
    // console.log('name',name)
    let retry = retryCount || 0;
    return new Promise(r => {
      const options = {
        url: name,
        method: 'GET'
      };
      if (proxy) {
        let proxystr = "";
        if (typeof proxy == "string") {
          proxystr = proxy;
        } else {
          let {
            protocol,
            host,
            port,
            username,
            password
          } = proxy;
          proxystr = `${protocol || "http"}://${username && password ? `${username}:${password}@` : ''}${host}:${port}`;
        }
        options.proxy = proxystr;
      }
      request(options, async (error, response, body) => {
        if (error || !body) {
          if (retry < 3) {
            retry++;
            return r(await helper.getRoomId({
              name,
              proxy,
              retryCount: retry
            }));
          } else {
            return r("");
          }
        }
        let room = helper.getString(body || "", "room_id=", `"`);
        return r(room);
      });
    });
  },
  getRoomId2: async function ({
    name,
    proxy,
    retryCount,
    cookie_string
  }) {
    // console.log(proxy)
    // proxy = helper.getProxyX();
    if (!name.includes("https://")) {
      name = `https://www.tiktok.com/@${name}/live`;
    }
    ;
    // console.log('name',name)
    let retry = retryCount || 0;
    let headers = {
      "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36",
      'authority': 'www.tiktok.com',
      'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
      'accept-language': 'en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,ko;q=0.6,ja;q=0.5,zh;q=0.4,vi;q=0.3,vi-VN;q=0.2,zh-HK;q=0.1',
      'cache-control': 'no-cache',
      'dnt': '1',
      'pragma': 'no-cache',
      'sec-ch-ua': '"Chromium";v="116", "Not)A;Brand";v="24", "Google Chrome";v="116"',
      'sec-ch-ua-mobile': '?0',
      'sec-ch-ua-platform': '"macOS"',
      'sec-fetch-dest': 'document',
      'sec-fetch-mode': 'navigate',
      'sec-fetch-site': 'none',
      cookie: cookie_string
    };
    return new Promise(r => {
      const options = {
        url: name,
        headers: headers,
        method: 'GET'
      };
      if (proxy) {
        let proxystr = "";
        if (typeof proxy == "string") {
          proxystr = proxy;
        } else {
          let {
            protocol,
            host,
            port,
            username,
            password
          } = proxy;
          proxystr = `${protocol || "http"}://${username && password ? `${username}:${password}@` : ''}${host}:${port}`;
        }
        options.proxy = proxystr;
      }
      request(options, async (error, response, body) => {
        console.log(body, proxy);
        if (error || !body) {
          if (retry < 5) {
            retry++;
            console.log(error, body);
            return r(await helper.getRoomId2({
              name,
              proxy,
              retryCount: retry
            }));
          } else {
            return r("");
          }
        }
        let room = helper.getString(body || "", "room_id=", `"`);
        return r(room);
      });
    });
  },
  isNumeric: function (value) {
    return !isNaN(value) && !isNaN(parseFloat(value));
  },
  getRoomId3: async function ({
    name,
    proxy,
    retryCount,
    cookie_string
  }) {
    console.log(proxy);
    // proxy = helper.getProxyX();
    if (!name) {
      return "";
    }
    // if (!name.includes("https://")) {
    //   name = `https://www.tiktok.com/@${name}/live`
    // };
    let url = `https://www.tiktok.com/api-live/user/room/?aid=1988&app_language=en-US&app_name=tiktok_web&browser_language=en&browser_name=Mozilla&browser_online=true&browser_platform=Win32&browser_version=5.0+%28Windows+NT+10.0%3B+Win64%3B+x64%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F106.0.0.0+Safari%2F537.36&cookie_enabled=true&cursor=&internal_ext=&device_platform=web&focus_state=true&from_page=user&history_len=0&is_fullscreen=false&is_page_visible=true&did_rule=3&fetch_rule=1&last_rtt=0&live_id=12&resp_content_type=protobuf&screen_height=1152&screen_width=2048&tz_name=Europe%2FBerlin&referer=https%3A%2F%2Fwww.tiktok.com%2F&root_referer=https%3A%2F%2Fwww.tiktok.com%2F&host=https%3A%2F%2Fwebcast.tiktok.com&webcast_sdk_version=1.3.0&update_version_code=1.3.0&uniqueId=${name}&sourceType=54`;
    console.log('name', name);
    let retry = retryCount || 0;
    let headers = {
      "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36",
      'authority': 'www.tiktok.com',
      'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
      'accept-language': 'en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,ko;q=0.6,ja;q=0.5,zh;q=0.4,vi;q=0.3,vi-VN;q=0.2,zh-HK;q=0.1',
      'cache-control': 'no-cache',
      'dnt': '1',
      // 'referer': name,
      'pragma': 'no-cache',
      'sec-ch-ua': '"Chromium";v="116", "Not)A;Brand";v="24", "Google Chrome";v="116"',
      'sec-ch-ua-mobile': '?0',
      'sec-ch-ua-platform': '"macOS"',
      'sec-fetch-dest': 'document',
      'sec-fetch-mode': 'navigate',
      'sec-fetch-site': 'none'
    };
    return new Promise(r => {
      const options = {
        url: url,
        headers: headers,
        method: 'GET'
      };
      if (proxy) {
        let proxystr = "";
        if (typeof proxy == "string") {
          proxystr = proxy;
        } else {
          let {
            protocol,
            host,
            port,
            username,
            password
          } = proxy;
          proxystr = `${protocol || "http"}://${username && password ? `${username}:${password}@` : ''}${host}:${port}`;
        }
        options.proxy = proxystr;
      }
      request(options, async (error, response, body) => {
        // console.log(body,proxy)
        if (error || !body) {
          if (retry < 5) {
            retry++;
            console.log(error, body);
            await helper.delay(2000);
            return r(await helper.getRoomId3({
              name,
              proxy,
              retryCount: retry
            }));
          } else {
            return r("");
          }
        }
        try {
          body = JSON.parse(body);
          return r(body);
        } catch (e) {
          console.log(e);
          return r("");
        }
      });
    });
  },
  getRoomId31: async function ({
    name,
    proxy,
    retryCount,
    cookie_string
  }) {
    // console.log(proxy)
    // proxy = helper.getProxyX();
    if (!name.includes("https://")) {
      name = `https://www.tiktok.com/@${name}/live`;
    }
    ;
    // console.log('name',name)
    let retry = retryCount || 0;
    let headers = {
      "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1",
      'authority': 'www.tiktok.com',
      'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
      'accept-language': 'en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,ko;q=0.6,ja;q=0.5,zh;q=0.4,vi;q=0.3,vi-VN;q=0.2,zh-HK;q=0.1',
      'cache-control': 'no-cache',
      'dnt': '1',
      'pragma': 'no-cache',
      'sec-ch-ua': '"Chromium";v="116", "Not)A;Brand";v="24", "Google Chrome";v="116"',
      'sec-ch-ua-mobile': '?0',
      'sec-ch-ua-platform': '"macOS"',
      'sec-fetch-dest': 'document',
      'sec-fetch-mode': 'navigate',
      'sec-fetch-site': 'none',
      cookie: cookie_string
    };
    return new Promise(r => {
      const options = {
        url: name,
        headers: headers,
        method: 'GET'
      };
      if (proxy) {
        let proxystr = "";
        if (typeof proxy == "string") {
          proxystr = proxy;
        } else {
          let {
            protocol,
            host,
            port,
            username,
            password
          } = proxy;
          proxystr = `${protocol || "http"}://${username && password ? `${username}:${password}@` : ''}${host}:${port}`;
        }
        options.proxy = proxystr;
      }
      let req = request(options);
      let dataCollected = '';
      req.on('data', function (chunk) {
        dataCollected += chunk.toString();

        // Check if the desired data is in the partial response
        if (dataCollected.includes('room_id=')) {
          let startIndex = dataCollected.indexOf('room_id=');
          let endIndex = dataCollected.indexOf('&', startIndex);
          let roomId = dataCollected.substring(startIndex, endIndex !== -1 ? endIndex : dataCollected.length);

          // Resolve the Promise with the roomId
          // r(roomId);
          req.abort();
          let room = helper.getString(roomId || "", "room_id=", `"`);
          return r(room);

          // Abort the request
        } else if (dataCollected.includes('"roomId":"')) {
          let startIndex = dataCollected.indexOf('"roomId":"');
          let endIndex = dataCollected.indexOf('signature', startIndex);
          let roomId = dataCollected.substring(startIndex, endIndex !== -1 ? endIndex : dataCollected.length);

          // Resolve the Promise with the roomId
          // r(roomId);
          req.abort();
          let room = helper.getString(roomId || "", `"roomId":"`, `"`);
          return r(room);

          // Abort the request
        }
      });
      req.on('end', async function () {
        // if(retry< 5){
        //   retry++
        //   return r(await helper.getRoomId3({name, proxy, retryCount: retry}))
        // } else {
        //   return r("")
        // }
      });
      req.on('error', async function (error) {
        if (error.message === 'aborted') {
          // console.log('Request was aborted successfully.');
        } else {
          // console.log("ok")
          if (retry < 5) {
            retry++;
            // console.log(error)
            return r(await helper.getRoomId3({
              name,
              proxy,
              retryCount: retry
            }));
          } else {
            return r("");
          }
        }
      });
      // request(options,async (error, response, body) => {
      //   console.log(body,proxy)
      //   if(error || !body) {
      //     if(retry< 5){
      //       retry++
      //       console.log(error,body)
      //       return r(await helper.getRoomId3({name, proxy, retryCount: retry}))
      //     } else {
      //       return r("")
      //     }
      //   }
      //   let room = helper.getString((body || ""), "room_id=", `"`);
      //   return r(room)
      // })
    });
  },
  sign: function (options) {
    let {
      url,
      bodyEncoded,
      msToken,
      bodyJson
    } = options;
    const SERVER_URL = 'http://sign.amazingcpanel.com';
    return new Promise((resolve, reject) => {
      // Chuẩn bị dữ liệu request
      const requestData = {
        url: url,
        bodyEncoded: bodyEncoded,
        msToken: msToken,
        bodyJson
      };

      // Gửi request để lấy signature
      request({
        method: 'POST',
        url: `${SERVER_URL}/api/xbogus`,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData)
      }, (err, response, body) => {
        if (err) {
          error("Lỗi khi lấy signature:", err);
          reject(err);
          return;
        }
        try {
          const data = JSON.parse(body);
          resolve(data);
        } catch (err) {
          error("Lỗi khi parse response:", err);
          reject(err);
        }
      });
    });
  },
  encodeRFC3986URIComponent: function (str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, c => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);
  },
  getProxySite: async function (proxy) {
    let url = 'http://217.15.163.20:8549/api/cron/getliveproxies?authensone=mysonetrend&time=120';
    let res = await helper.makeRequest({
      url
    });
    if (res.bodyJson && res.bodyJson.proxies && res.bodyJson.proxies.length > 0) {
      let proxies = res.bodyJson.proxies;
      return proxies;
    } else {
      error("Error getting proxy site", res.body, res.bodyJson);
      return [];
    }
  },
  getUserInfo: async function ({
    proxy,
    cookie_string = "",
    retryCount,
    username = null
  }) {
    let msToken = helper.getString(cookie_string, "msToken=", ";");
    if (!msToken) {
      msToken = 'X2q7i9LoPqE5eFSjcDdj4HpRSlIDNrf8EtP6oJY6zRM3KwanwHFEGF6sK3jMuMgptUPm5fBRRnl_seQqIiH_bfyUyPas91uCaLqlmNt2CFGgKcKif0F_2UoFjRQCGqXikRFZWBGb6_N0HANT6lo0ZZz0'.slice(0, 150) + helper.generateRandomName(152 - 150);
    }
    msToken = 'LhYE1qGGn-4k0SfbOHfmYgG9_mJf_Ul7Hc0rNhyWBk3CQ4Klw-rUiKlY3YmXmumYjcgTGHtUH5CtM7UnOEleia5ioWPmQofcrsqJwi4Z1kSQ_a9l6FPPDmIkBzzYfBRfIcQYQOGlPoWTshNa4uMQA8P_';
    let device_id = helper.getString(cookie_string.replace(/ /g, '') + ';', ';wid=', ';');
    username = username || helper.getString(cookie_string.replace(/ /g, '') + ';', 'username=', ';');
    let userAgentDefault = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
    let browser_platform = "MacIntel";
    userAgentDefault = "Mozilla/5.0 (X11; Ubuntu; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
    browser_platform = encodeURIComponent("Linux x86_64");
    const appVersionDefault = userAgentDefault.replace("Mozilla/", "");
    let url = `https://www.tiktok.com/api/user/detail/?WebIdLastTime=${Math.floor(Date.now() / 1000)}&abTestVersion=%5Bobject%20Object%5D&aid=1988&appType=t&app_language=en&app_name=tiktok_web&browser_language=en-US&browser_name=Mozilla&browser_online=true&browser_platform=${browser_platform}&browser_version=${helper.encodeRFC3986URIComponent(appVersionDefault)}&channel=tiktok_web&cookie_enabled=true&data_collection_enabled=true&device_id=${device_id}&device_platform=web_pc&focus_state=true&from_page=user&history_len=7&is_fullscreen=false&is_page_visible=true&language=en&needAudienceControl=false&os=linux&priority_region=VN&referer=&region=VN&screen_height=1117&screen_width=1728&secUid=&tz_name=Asia%2FSaigon&uniqueId=${username}&user=%5Bobject%20Object%5D&user_is_login=true&webcast_language=en`;
    let {
      targetUrl
    } = await helper.sign({
      url,
      bodyEncoded: '',
      msToken
    });
    // console.log(targetUrl)
    // process.exit(0)
    if (!targetUrl) {
      return {
        avatarThumb: '',
        roomUsername: '',
        status_code: 0,
        err: true
      };
    }
    const options = {
      retryTime: 3,
      url: targetUrl,
      method: 'GET',
      headers: {
        Connection: 'keep-alive',
        'Cache-Control': 'max-age=0',
        'User-Agent': userAgentDefault,
        Accept: 'text/html,application/json,application/protobuf',
        // Referer: 'https://www.tiktok.com/',
        // Origin: 'https://www.tiktok.com',
        // 'Accept-Language': 'en-US,en;q=0.9',
        // 'Accept-Encoding': 'gzip, deflate',
        cookie: cookie_string
      },
      proxy,
      preCheckRetry: (body, json) => {
        return !body.includes('uniqueId":');
      }
      // proxy_list: proxies
    };
    let res = await helper.makeRequest(options);
    // console.log(res.bodyJson.userInfo.user)
    try {
      let {
        avatarThumb,
        nickname: roomUsername
      } = res.bodyJson.userInfo.user || {};
      let status_code = res.bodyJson.status_code;
      // console.log(status_code,json)
      return {
        avatarThumb,
        roomUsername,
        status_code,
        err: false
      };
    } catch (e) {
      console.log(e);
      return {
        avatarThumb: '',
        roomUsername: '',
        status_code: 0,
        err: true
      };
    }
  },
  getAccountInfo: async function ({
    cookie_string,
    proxy,
    proxy_list,
    username,
    link
  }) {
    let options = {
      url: link ? link : username ? `https://www.tiktok.com/@${username}` : "https://www.tiktok.com",
      proxy,
      isRetry: true,
      retryTime: 1,
      proxy_list,
      headers: {
        cookie: cookie_string,
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36",
        'authority': 'www.tiktok.com',
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'accept-language': 'en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,ko;q=0.6,ja;q=0.5,zh;q=0.4,vi;q=0.3,vi-VN;q=0.2,zh-HK;q=0.1',
        'cache-control': 'no-cache',
        'dnt': '1',
        'pragma': 'no-cache',
        'sec-ch-ua': '"Chromium";v="116", "Not)A;Brand";v="24", "Google Chrome";v="116"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"macOS"',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'none',
        'sec-fetch-user': '?1',
        'upgrade-insecure-requests': '1'
      }
    };
    let result = await helper.makeRequest(options);
    let {
      body,
      bodyJson,
      status,
      headers,
      error
    } = result;
    body = body || "";
    if (username) {
      let account_info = helper.getString(body || "", `{"userInfo":`, `}`);
      let uid = helper.getString(account_info || "", `id":"`, `"`);
      let sec_id = helper.getString(account_info || "", `secUid":"`, `"`);
      let device_id = helper.getString(body || "", "wid\":\"", `"`);
      let csrf_token = helper.getString(body || "", `"csrfToken":"`, `","`);
      let webIdCreatedTime = helper.getString(body || "", `"webIdCreatedTime":"`, `","`);
      return {
        account_info,
        uid,
        sec_id,
        device_id,
        csrf_token,
        webIdCreatedTime,
        error,
        is_alive: body.includes(`Following accounts</h2`)
      };
    } else {
      if (body.includes(`Following accounts</h2`)) {
        let webIdCreatedTime = helper.getString(body || "", `"webIdCreatedTime":"`, `","`);
        let device_id = helper.getString(body || "", "wid\":\"", `"`);
        let uid = helper.getString(body || "", "uid\":\"", `"`);
        return {
          is_alive: true,
          device_id,
          uid,
          webIdCreatedTime,
          error,
          cookie_string
        };
      } else {
        let webIdCreatedTime = helper.getString(body || "", `"webIdCreatedTime":"`, `","`);
        let device_id = helper.getString(body || "", "wid\":\"", `"`);
        let uid = helper.getString(body || "", "uid\":\"", `"`);
        return {
          is_alive: false,
          error,
          cookie_string,
          device_id,
          uid,
          webIdCreatedTime
        };
      }
    }
  },
  getVideoInfo: async function ({
    cookie_string,
    proxy,
    link,
    aweme_id,
    proxy_list
  }) {
    let options = {
      url: link ? link : aweme_id ? `https://www.tiktok.com/@/video/${aweme_id}` : ``,
      proxy,
      proxy_list,
      headers: {
        cookie: cookie_string,
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36",
        'authority': 'www.tiktok.com',
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'accept-language': 'en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,ko;q=0.6,ja;q=0.5,zh;q=0.4,vi;q=0.3,vi-VN;q=0.2,zh-HK;q=0.1',
        'cache-control': 'no-cache',
        'dnt': '1',
        'pragma': 'no-cache',
        'sec-ch-ua': '"Chromium";v="116", "Not)A;Brand";v="24", "Google Chrome";v="116"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"macOS"',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'none',
        'sec-fetch-user': '?1',
        'upgrade-insecure-requests': '1'
      }
    };
    let result = await helper.makeRequest(options);
    let {
      body,
      bodyJson,
      status,
      error
    } = result;
    let video_info = helper.getString(body || "", `"ItemModule":`, `}}}</script>`);
    if (!video_info) video_info = helper.getString(body || "", `"itemStruct":`, `}}}</script>`);
    let like_count = helper.getString(body || "", `"diggCount":`, `,"`);
    return {
      video_info,
      like_count,
      error
    };
  },
  getMstoken: async function ({
    cookie_string,
    proxy,
    retryCount
  }) {
    let retry = retryCount || 0;
    let head = await new Promise(r => {
      const options = {
        url: "https://www.tiktok.com/api/ba/business/suite/permission/list/?aid=1988&app_language=vi-VN&app_name=tiktok_web&browser_language=vi-VN&browser_name=Mozilla&browser_online=true&browser_platform=MacIntel&browser_version=5.0%20%28Macintosh%3B%20Intel%20Mac%20OS%20X%2010_15_7%29%20AppleWebKit%2F537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome%2F116.0.0.0%20Safari%2F537.36&channel=tiktok_web&cookie_enabled=true&device_id=7270945183717885441&device_platform=web_pc&focus_state=true&from_page=fyp&history_len=2&is_fullscreen=false&is_page_visible=true&os=mac&permissionList=001004%2C001005&priority_region=&referer=&region=VN&screen_height=900&screen_width=1440&tz_name=Asia%2FSaigon&webcast_language=vi-VN",
        method: 'GET',
        headers: {
          cookie: cookie_string || ""
        }
      };
      if (proxy) {
        let proxystr = "";
        if (typeof proxy == "string") {
          proxystr = proxy;
        } else {
          let {
            protocol,
            host,
            port,
            username,
            password
          } = proxy;
          proxystr = `${protocol || "http"}://${username && password ? `${username}:${password}@` : ''}${host}:${port}`;
        }
        options.proxy = proxystr;
      }
      request(options, (error, response, body) => {
        return r({
          error,
          body,
          headers: response.headers,
          status: response.statusCode
        });
      });
    });
    if (head.error) {
      if (retry < 3) {
        retry++;
        return await helper.getMstoken({
          cookie_string,
          proxy,
          retryCount: retry
        });
      } else {
        return {
          x_ms_token: "",
          cookies: []
        };
      }
    }
    let headers = head.headers;
    let x_ms_token = headers["x-ms-token"];
    let cookies = headers["set-cookie"];
    return {
      x_ms_token,
      cookies
    };
  },
  getCsrfData: async function ({
    cookie_string,
    proxy,
    type
  }) {
    const options = {
      url: type == "update" ? "https://www.tiktok.com/api/update/profile" : "https://www.tiktok.com/api/commit/follow/user/",
      method: 'HEAD',
      headers: {
        cookie: cookie_string || "",
        "X-Secsdk-Csrf-Request": "1",
        "X-Secsdk-Csrf-Version": "1.2.13"
      },
      isGetBody: false,
      proxy,
      retryTime: 3
    };
    let head = await helper.makeRequest(options);
    let headers = head.headers || {};
    let tokenstring = headers["x-ware-csrf-token"];
    let x_csrf_token = helper.getString(tokenstring, ",", ",");
    let cookies = headers["set-cookie"];
    let csrf_session_id = helper.getString(cookies[0], "csrf_session_id=", ";");
    return {
      csrf_session_id,
      x_csrf_token
    };
  },
  getRoomUser: async function ({
    room_id,
    proxy,
    cookie_string,
    retryCount
  }) {
    if (!room_id) {
      return {
        is_alive: false,
        room_id: false,
        err: true
      };
    }
    let retry = retryCount || 0;
    return await new Promise(r => {
      // Khởi tạo lệnh curl với URL
      let random_de = helper.getRandomInt(187248723442, 934782374123);
      let device_id = "7284943" + random_de;
      let random_an = helper.getRandomInt(187248723442, 934782374123);
      let anchor_id = "7171925" + random_de;
      let curlCommand = `curl "https://webcast.tiktok.com/webcast/ranklist/online_audience/?aid=1988&anchor_id=7375343667404833810&app_language=en&app_name=tiktok_web&browser_language=en-US&browser_name=Mozilla&browser_online=true&browser_platform=MacIntel&browser_version=5.0%20%28Macintosh%3B%20Intel%20Mac%20OS%20X%2010_15_7%29%20AppleWebKit%2F537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome%2F133.0.0.0%20Safari%2F537.36&channel=tiktok_web&cookie_enabled=true&data_collection_enabled=true&device_id=7484543802662487553&device_platform=web_pc&focus_state=true&from_page=user&history_len=6&is_fullscreen=false&is_page_visible=true&os=mac&priority_region=&referer=&region=VN&room_id=7486712098026687252&screen_height=1117&screen_width=1728&tz_name=Asia%2FSaigon&user_is_login=true&verifyFp=verify_lzzndjml_geR45jSd_PKon_4Ykv_Bc0M_n040N3GAU9Nc&webcast_language=en&msToken=CKrxaWHMhir7jUHOpfIOVE-rfAegd1faHpnGwMeBz8lA5AXuoKROyS4rWpGi3UsECx__26WYhjAWJibjRhO5tHS7ucwvYB1u224WHl74S6V-HHegAQ8xIFiCCtIxpmNLrINl352gS1CJHB7i6LSOWL_F&X-Bogus=DFSzswVu0j2ANrk0thBO4jLNKBOE&_signature=_02B4Z6wo000011Y2lYgAAIDABMm1kkAHWy9WNpEAALJ2f3"`;
      curlCommand = `curl "https://webcast.tiktok.com/webcast/ranklist/online_audience/?aid=1988&anchor_id=${anchor_id}&app_language=en&app_name=tiktok_web&browser_language=en-US&browser_name=Mozilla&browser_online=true&browser_platform=MacIntel&browser_version=5.0%20%28Macintosh%3B%20Intel%20Mac%20OS%20X%2010_15_7%29%20AppleWebKit%2F537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome%2F133.0.0.0%20Safari%2F537.36&channel=tiktok_web&cookie_enabled=true&data_collection_enabled=true&device_id=${device_id}&device_platform=web_pc&focus_state=true&from_page=user&history_len=2&is_fullscreen=false&is_page_visible=true&os=mac&priority_region=&referer=&region=VN&room_id=${room_id}&screen_height=1117&screen_width=1728&tz_name=Asia%2FSaigon&user_is_login=true&verifyFp=&webcast_language=en&msToken=&X-Bogus=&_signature="`;

      // Thêm headers cho cookies và User-Agent
      curlCommand += ` -H "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36" -H "cookie: ${cookie_string}"`;

      // Thêm proxy nếu có
      if (proxy) {
        let proxystr = "";
        if (typeof proxy === "string") {
          proxystr = proxy;
        } else {
          let {
            protocol,
            host,
            port,
            username,
            password
          } = proxy;
          proxystr = `${protocol || "http"}://${username && password ? `${username}:${password}@` : ''}${host}:${port}`;
        }
        curlCommand += ` -x ${proxystr}`;
      }

      // Kiểm tra hệ điều hành để thay đổi cách gọi curl
      const platform = os.platform();
      if (platform === 'win32') {
        // Windows: sửa lệnh curl cho Windows
        curlCommand = curlCommand.replace(/'/g, '"');
      }

      // Chạy lệnh curl
      exec(curlCommand, async (error, stdout, stderr) => {
        if (error) {
          if (retry < 3) {
            retry++;
            return r(await helper.getRoomUser({
              room_id,
              proxy,
              cookie_string,
              retryCount: retry
            }));
          } else {
            return r({
              data_user: [],
              room_id: room_id,
              err: true,
              error
            });
          }
        }
        let json = {
          stats: {}
        };
        try {
          json = JSON.parse(stdout);
          // console.log(stdout)
          // console.log(stdout,curlCommand)
          // let { stats, user_count, status, owner, title } = json.data;
          let data_user = [];
          try {
            data_user = json?.data?.ranks?.map(function (a) {
              return a?.user?.display_id;
            });
          } catch (e) {}
          let total_user = json?.data?.total || 0;
          let status_code = json.status_code;
          return r({
            data_user: data_user,
            room_id: room_id,
            err: false,
            total_user: total_user,
            status_code: status_code
          });
        } catch (e) {
          return r({
            data_user: [],
            room_id: room_id,
            err: true,
            error: e
          });
        }
      });
    });
  },
  checkCookieLive: async function ({
    username,
    cookie_string,
    proxy,
    proxy_list
  }) {
    const options = {
      retryTime: 3,
      url: `https://www.tiktok.com/passport/web/account/info/?WebIdLastTime=1742631163&aid=1459&app_language=en&app_name=tiktok_web&browser_language=en-US&browser_name=Mozilla&browser_online=true&browser_platform=MacIntel&browser_version=5.0%20%28Macintosh%3B%20Intel%20Mac%20OS%20X%2010_15_7%29%20AppleWebKit%2F537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome%2F134.0.0.0%20Safari%2F537.36&channel=tiktok_web&cookie_enabled=true&data_collection_enabled=true&device_id=&device_platform=web_pc&focus_state=true&from_page=user&history_len=5&is_fullscreen=false&is_page_visible=true&odinId=&os=mac&priority_region=VN&referer=https%3A%2F%2Fwww.tiktok.com%2Flive&region=VN&root_referer=https%3A%2F%2Fwww.tiktok.com%2Flive&screen_height=1117&screen_width=1728&tz_name=Asia%2FSaigon&user_is_login=true&verifyFp=verify_lzzndjml_geR45jSd_PKon_4Ykv_Bc0M_n040N3GAU9Nc&webcast_language=en`,
      method: 'GET',
      headers: {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36",
        cookie: cookie_string
      },
      proxy,
      preCheckRetry: (body, json) => {
        return !body.includes(username);
      },
      proxy_list: proxy_list
    };
    let res = await helper.makeRequest(options);
    let {
      body,
      bodyJson,
      status,
      headers,
      error
    } = res;
    if (!body) {
      return {
        status: false
      };
    } else if (body.includes(username)) {
      return {
        status: true,
        live: true,
        body
      };
    } else if (body.includes("session_expired")) {
      // console.log(username,body, proxy, cookie_string)
      return {
        status: true,
        live: false,
        body
      };
    }
  },
  getRoomInfo: async function ({
    room_id,
    name,
    proxy,
    cookie_string,
    retryCount
  }) {
    if (!room_id) {
      room_id = await helper.getRoomId({
        name,
        proxy
      });
    }
    if (!room_id) {
      return {
        is_alive: false,
        room_id: false,
        err: true
      };
    }
    let retry = retryCount || 0;
    return await new Promise(r => {
      // Khởi tạo lệnh curl với URL
      let curlCommand = `curl "https://webcast.tiktok.com/webcast/room/info/?aid=1988&app_language=en-US&app_name=tiktok_web&browser_language=en&browser_name=Mozilla&browser_online=true&browser_platform=MacIntel&browser_version=5.0%20%28Macintosh%3B%20Intel%20Mac%20OS%20X%2010_15_7%29%20AppleWebKit%2F537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome%2F116.0.0.0%20Safari%2F537.36&cookie_enabled=true&cursor=&internal_ext=&device_platform=web&focus_state=true&from_page=user&history_len=4&is_fullscreen=false&is_page_visible=true&did_rule=3&fetch_rule=1&last_rtt=0&live_id=12&resp_content_type=protobuf&screen_height=1152&screen_width=2048&tz_name=Europe%2FBerlin&referer=https%3A%2F%2Fwww.tiktok.com%2F&root_referer=https%3A%2F%2Fwww.tiktok.com%2F&version_code=180800&webcast_sdk_version=1.3.0&update_version_code=1.3.0&room_id=${room_id}"`;

      // Thêm headers cho cookies và User-Agent
      curlCommand += ` -H "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36" -H "cookie: ${cookie_string}"`;

      // Thêm proxy nếu có
      if (proxy) {
        let proxystr = "";
        if (typeof proxy === "string") {
          proxystr = proxy;
        } else {
          let {
            protocol,
            host,
            port,
            username,
            password
          } = proxy;
          proxystr = `${protocol || "http"}://${username && password ? `${username}:${password}@` : ''}${host}:${port}`;
        }
        curlCommand += ` -x ${proxystr}`;
      }

      // Kiểm tra hệ điều hành để thay đổi cách gọi curl
      const platform = os.platform();
      if (platform === 'win32') {
        // Windows: sửa lệnh curl cho Windows
        curlCommand = curlCommand.replace(/'/g, '"');
      }

      // Chạy lệnh curl
      exec(curlCommand, async (error, stdout, stderr) => {
        if (error) {
          if (retry < 3) {
            retry++;
            return r(await helper.getRoomInfo({
              name,
              proxy,
              retryCount: retry
            }));
          } else {
            return r({
              is_alive: true,
              room_id: room_id,
              err: true,
              error
            });
          }
        }
        let json = {
          stats: {}
        };
        try {
          // console.log(stdout)
          json = JSON.parse(stdout);
          let {
            stats,
            user_count,
            status,
            owner,
            title
          } = json.data;
          let status_code = json.status_code;
          return r({
            is_alive: status !== 4 ? true : false,
            view_count: user_count,
            room_id: status !== 4 ? stats?.id_str : 0,
            display_id: owner ? owner?.display_id : '',
            bio_description: owner ? owner?.bio_description : '',
            nickname: owner ? owner?.nickname : '',
            title: title,
            err: false,
            status_code: status_code,
            data: json.data
          });
        } catch (e) {
          return r({
            is_alive: true,
            room_id: room_id,
            err: true,
            error: e
          });
        }
      });
    });
  },
  getRoomInfo_old: async function ({
    room_id,
    proxies,
    name,
    proxy,
    cookie_string,
    retryCount
  }) {
    const options = {
      retryTime: 3,
      url: `https://webcast.tiktok.com/webcast/room/info/?aid=1988&app_language=en-US&app_name=tiktok_web&browser_language=en&browser_name=Mozilla&browser_online=true&browser_platform=MacIntel&browser_version=5.0%20%28Macintosh%3B%20Intel%20Mac%20OS%20X%2010_15_7%29%20AppleWebKit%2F537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome%2F116.0.0.0%20Safari%2F537.36&cookie_enabled=true&cursor=&internal_ext=&device_platform=web&focus_state=true&from_page=user&history_len=4&is_fullscreen=false&is_page_visible=true&did_rule=3&fetch_rule=1&last_rtt=0&live_id=12&resp_content_type=protobuf&screen_height=1152&screen_width=2048&tz_name=Europe%2FBerlin&referer=https%3A%2F%2Fwww.tiktok.com%2F&root_referer=https%3A%2F%2Fwww.tiktok.com%2F&version_code=180800&webcast_sdk_version=1.3.0&update_version_code=1.3.0&room_id=${room_id}`,
      method: 'GET',
      headers: {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36",
        cookie: cookie_string
      },
      proxy,
      preCheckRetry: (body, json) => {
        return !body.includes('user_count":');
      },
      proxy_list: proxies
    };
    let res = await helper.makeRequest(options);
    let {
      stats,
      user_count,
      status,
      owner,
      title
    } = res.bodyJson.data || {};
    let status_code = res.status_code;
    // console.log(status_code,json)
    return {
      is_alive: status && status !== 4 ? true : false,
      view_count: user_count,
      room_id: status !== 4 ? stats?.id_str : 0,
      display_id: owner ? owner?.display_id : '',
      bio_description: owner ? owner?.bio_description : '',
      nickname: owner ? owner?.nickname : '',
      title: title,
      err: false,
      status_code: status_code
    };
  },
  getRoomInfo3: async function ({
    room_id,
    proxies,
    name,
    proxy,
    cookie_string,
    retryCount
  }) {
    const options = {
      retryTime: 3,
      url: `https://webcast.tiktok.com/webcast/room/info/?aid=1988&app_language=en-US&app_name=tiktok_web&browser_language=en&browser_name=Mozilla&browser_online=true&browser_platform=MacIntel&browser_version=5.0%20%28Macintosh%3B%20Intel%20Mac%20OS%20X%2010_15_7%29%20AppleWebKit%2F537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome%2F116.0.0.0%20Safari%2F537.36&cookie_enabled=true&cursor=&internal_ext=&device_platform=web&focus_state=true&from_page=user&history_len=4&is_fullscreen=false&is_page_visible=true&did_rule=3&fetch_rule=1&last_rtt=0&live_id=12&resp_content_type=protobuf&screen_height=1152&screen_width=2048&tz_name=Europe%2FBerlin&referer=https%3A%2F%2Fwww.tiktok.com%2F&root_referer=https%3A%2F%2Fwww.tiktok.com%2F&version_code=180800&webcast_sdk_version=1.3.0&update_version_code=1.3.0&room_id=${room_id}`,
      method: 'GET',
      headers: {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36",
        cookie: cookie_string
      },
      proxy,
      preCheckRetry: (body, json) => {
        return !body.includes('user_count":');
      },
      proxy_list: proxies
    };
    let res = await helper.makeRequest(options);
    console.log(res);
    let {
      stats,
      user_count,
      status,
      owner,
      title
    } = res.bodyJson.data || {};
    let status_code = res.status_code;
    // console.log(status_code,json)
    return {
      is_alive: status && status !== 4 ? true : false,
      view_count: user_count,
      room_id: status !== 4 ? stats?.id_str : 0,
      display_id: owner ? owner?.display_id : '',
      bio_description: owner ? owner?.bio_description : '',
      nickname: owner ? owner?.nickname : '',
      title: title,
      err: false,
      status_code: status_code
    };
  },
  getRoomInfo4: async function ({
    room_id,
    proxies,
    name,
    proxy,
    cookie_string,
    retryCount
  }) {
    const options = {
      retryTime: 3,
      url: `https://webcast.tiktok.com/webcast/room/info/?aid=1988&app_language=en-US&app_name=tiktok_web&browser_language=en&browser_name=Mozilla&browser_online=true&browser_platform=Win32&browser_version=5.0+%28Windows+NT+10.0%3B+Win64%3B+x64%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F106.0.0.0+Safari%2F537.36&cookie_enabled=true&cursor=&internal_ext=&device_platform=web&focus_state=true&from_page=user&history_len=0&is_fullscreen=false&is_page_visible=true&did_rule=3&fetch_rule=1&last_rtt=0&live_id=12&resp_content_type=protobuf&screen_height=1152&screen_width=2048&tz_name=Europe%2FBerlin&referer=https%3A%2F%2Fwww.tiktok.com%2F&root_referer=https%3A%2F%2Fwww.tiktok.com%2F&host=https%3A%2F%2Fwebcast.tiktok.com&webcast_sdk_version=1.3.0&update_version_code=1.3.0&room_id=${room_id}`,
      method: 'GET',
      headers: {
        Connection: 'keep-alive',
        'Cache-Control': 'max-age=0',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36',
        Accept: 'text/html,application/json,application/protobuf',
        Referer: 'https://www.tiktok.com/',
        Origin: 'https://www.tiktok.com',
        // 'Accept-Language': 'en-US,en;q=0.9',
        // 'Accept-Encoding': 'gzip, deflate',
        cookie: cookie_string
      },
      proxy,
      preCheckRetry: (body, json) => {
        return !body.includes('user_count":');
      },
      proxy_list: proxies
    };
    let res = await helper.makeRequest(options);
    // console.log(res.body)
    let {
      stats,
      user_count,
      status,
      owner,
      title
    } = res.bodyJson.data || {};
    let status_code = res.status_code;
    // console.log(status_code,json)
    return {
      is_alive: status && status !== 4 ? true : false,
      view_count: user_count,
      room_id: status !== 4 ? stats?.id_str : 0,
      display_id: owner ? owner?.display_id : '',
      bio_description: owner ? owner?.bio_description : '',
      nickname: owner ? owner?.nickname : '',
      title: title,
      err: false,
      status_code: status_code,
      avatarThumb: owner ? owner?.avatar_thumb?.url_list[0] : ''
    };
  },
  getRoomInfo2: async function ({
    room_id,
    name,
    proxy,
    cookie_string,
    retryCount
  }) {
    if (!room_id) {
      room_id = await helper.getRoomId({
        name,
        proxy
      });
    }
    // console.log('room_id', room_id)
    if (!room_id) {
      return {
        is_alive: false,
        room_id: false,
        err: true
      };
    }
    let retry = retryCount || 0;
    return await new Promise(r => {
      const options = {
        url: `https://webcast.tiktok.com/webcast/room/info/?aid=1988&app_language=en-US&app_name=tiktok_web&browser_language=en&browser_name=Mozilla&browser_online=true&browser_platform=MacIntel&browser_version=5.0%20%28Macintosh%3B%20Intel%20Mac%20OS%20X%2010_15_7%29%20AppleWebKit%2F537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome%2F116.0.0.0%20Safari%2F537.36&cookie_enabled=true&cursor=&internal_ext=&device_platform=web&focus_state=true&from_page=user&history_len=4&is_fullscreen=false&is_page_visible=true&did_rule=3&fetch_rule=1&last_rtt=0&live_id=12&resp_content_type=protobuf&screen_height=1152&screen_width=2048&tz_name=Europe%2FBerlin&referer=https%3A%2F%2Fwww.tiktok.com%2F&root_referer=https%3A%2F%2Fwww.tiktok.com%2F&version_code=180800&webcast_sdk_version=1.3.0&update_version_code=1.3.0&room_id=${room_id}`,
        method: 'GET',
        headers: {
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36",
          cookie: cookie_string
        }
      };
      if (proxy) {
        let proxystr = "";
        if (typeof proxy == "string") {
          proxystr = proxy;
        } else {
          let {
            protocol,
            host,
            port,
            username,
            password
          } = proxy;
          proxystr = `${protocol || "http"}://${username && password ? `${username}:${password}@` : ''}${host}:${port}`;
        }
        options.proxy = proxystr;
      }
      request(options, async (error, response, body) => {
        if (error) {
          if (retry < 3) {
            retry++;
            return r(await helper.getRoomInfo2({
              name,
              proxy,
              retryCount: retry
            }));
          } else {
            return r({
              is_alive: true,
              room_id: room_id,
              err: true,
              error
            });
          }
        }
        let json = {
          stats: {}
        };
        try {
          json = JSON.parse(body);
          let {
            stats,
            user_count,
            status,
            owner,
            title
          } = json.data;
          let status_code = json.status_code;
          return r({
            is_alive: status !== 4 ? true : false,
            view_count: user_count,
            room_id: status !== 4 ? stats?.id_str : 0,
            display_id: owner ? owner?.display_id : '',
            bio_description: owner ? owner?.bio_description : '',
            nickname: owner ? owner?.nickname : '',
            title: title,
            err: false,
            status_code: status_code
          });
        } catch (e) {
          return r({
            is_alive: true,
            room_id: room_id,
            err: true,
            error: e
          });
        }
        // console.log(json)
      });
    });
  },
  getRoomInfo1: async function ({
    room_id,
    name,
    proxy,
    cookie_string,
    retryCount
  }) {
    if (!room_id) {
      room_id = await helper.getRoomId({
        name,
        proxy
      });
    }
    // console.log('room_id', room_id)
    if (!room_id) {
      return {
        is_alive: false,
        room_id: false,
        err: true
      };
    }
    let retry = retryCount || 0;
    return await new Promise(r => {
      const options = {
        url: `https://webcast.tiktok.com/webcast/room/info/?aid=1988&app_language=en-US&app_name=tiktok_web&browser_language=en&browser_name=Mozilla&browser_online=true&browser_platform=MacIntel&browser_version=5.0%20%28Macintosh%3B%20Intel%20Mac%20OS%20X%2010_15_7%29%20AppleWebKit%2F537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome%2F116.0.0.0%20Safari%2F537.36&cookie_enabled=true&cursor=&internal_ext=&device_platform=web&focus_state=true&from_page=user&history_len=4&is_fullscreen=false&is_page_visible=true&did_rule=3&fetch_rule=1&last_rtt=0&live_id=12&resp_content_type=protobuf&screen_height=1152&screen_width=2048&tz_name=Europe%2FBerlin&referer=https%3A%2F%2Fwww.tiktok.com%2F&root_referer=https%3A%2F%2Fwww.tiktok.com%2F&version_code=180800&webcast_sdk_version=1.3.0&update_version_code=1.3.0&room_id=${room_id}`,
        method: 'GET',
        headers: {
          "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36",
          cookie: cookie_string
        }
      };
      if (proxy) {
        let proxystr = "";
        if (typeof proxy == "string") {
          proxystr = proxy;
        } else {
          let {
            protocol,
            host,
            port,
            username,
            password
          } = proxy;
          proxystr = `${protocol || "http"}://${username && password ? `${username}:${password}@` : ''}${host}:${port}`;
        }
        options.proxy = proxystr;
      }
      request(options, async (error, response, body) => {
        if (error) {
          if (retry < 3) {
            retry++;
            return r(await helper.getRoomInfo({
              room_id,
              name,
              proxy,
              cookie_string,
              retryCount: retry
            }));
          } else {
            return r({
              is_alive: true,
              room_id: room_id,
              err: true,
              error
            });
          }
        }
        let json = {
          stats: {}
        };
        try {
          json = JSON.parse(body);
        } catch (e) {}
        // console.log(json)
        // console.log(JSON.stringify(json))
        let {
          stats,
          user_count,
          status,
          owner,
          title
        } = json.data;
        let status_code = json.status_code;
        // console.log(status_code,json)
        return r({
          is_alive: status && status !== 4 ? true : false,
          view_count: user_count,
          room_id: status !== 4 ? stats?.id_str : 0,
          display_id: owner ? owner?.display_id : '',
          bio_description: owner ? owner?.bio_description : '',
          nickname: owner ? owner?.nickname : '',
          title: title,
          err: false,
          status_code: status_code
        });
      });
    });
  },
  getProxyX() {
    // if(proxy_root.length > 0){
    //     return (proxy_root[Math.floor((Math.random() * proxy_root.length))]).trim();
    // }else{
    //     return '';
    // }
    // return 'http://bupmat.ddns.net:45403';
    var domain = 'http://xproxysever15.hopto.org:';
    //var domain = 'http://171.240.246.161:';
    var port_start = 4000;
    var port1 = Math.floor(Math.random() * 3) + 1;
    var port2 = Math.floor(Math.random() * 5) + 0;
    //return domain+(port_start+port2*100+port1)
    var domain = 'http://bupview.ddns.net:';
    var port_start = 5000;
    var port1 = Math.floor(Math.random() * 10) + 1;
    var port2 = Math.floor(Math.random() * 0) + 0;
    //return domain+(port_start+port2*100+port1)

    var domain = 'http://bupmat.ddns.net:';
    //var domain = 'http://171.240.246.161:';
    var port_start = 4000;
    var port1 = Math.floor(Math.random() * 10) + 1;
    var port2 = Math.floor(Math.random() * 5) + 0;
    return domain + (port_start + port2 * 100 + port1);
  },
  splice(array, max) {
    var splitCookies = [].concat.apply([], array.map(function (elem, i) {
      return i % max ? [] : [array.slice(i, i + max)];
    }));
    return splitCookies;
  },
  getProxyShopTM: async function (tk) {
    var tm_proxy = (await helper.getTmProxy(tk)).split(':');
    if (tm_proxy.length == 2) {
      var tm_proxy_json = {
        'protocol': 'http',
        'host': tm_proxy[0],
        'port': tm_proxy[1]
      };
    } else {
      var tm_proxy_json = false;
    }
    return tm_proxy_json;
    // async function getNewPorxy(tk) {
    //   return (false)
    //   setTimeout(function(){
    //     SoneLoginMain.postJsonRequestForce(0, 2, `https://tmproxy.com/api/proxy/get-new-proxy`,{

    // "api_key": tk,
    // "id_location": 1

    //     }, function(data){
    //       // try{
    //       //  data = JSON.parse(data)
    //       // }catch(e){}
    //       // if(data.data && data.data.proxy){
    //       //  callbackGet(data.data.proxy)
    //       // }else{
    //       //  callbackGet(false)
    //       // }
    //       console.log(data)
    //       // callbackGet(false)
    //     })
    //   },(id*500*1))

    // }
  },
  getTmProxy: async function (tk) {
    return new Promise(r => {
      var headers = {
        'User-Agent': '',
        'Cookie': '',
        'Content-Type': 'application/json',
        // sec-fetch-dest: empty
        // sec-fetch-mode: cors
        'sec-fetch-site': 'same-origin',
        'Authorization': 'eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6IjkxZDhkZWQ3LWIzNzctNDgzNi1iYzI4LWY5NzJjM2ZkMjZmYyIsImV4cCI6MTY4MDM5NjU5NCwiaWF0IjoxNjgwMzUzMzk0LCJpc3MiOiJ0bS1wcm94eS5jb20iLCJuYmYiOjE2ODAzNTMzOTR9.jZtsyuNN1ySnfx13TDmXcKlPNuFwqtCcGxe-mGcU7HopLdEKY99-cZJke7t5-5-lPI2FxaEohEuSiGEz4hRDqVp91Q6iiui8ktCsaa1cw1jWqPjyNTCAoiObbfLHrm8u66Uwzc19R8cNrcJHjVuODox2C__AxAGElS1YOVONHYIXPciqeryZ-X1l7HPwbR3GNgmoCPeVTS6uGKJMLQWbn0WGdC6AXNWrygYhoNkqNkP5iSPJnbky1lswiOQ-hYGKRWHtERpI-zcaGDu9QS8AJjxKHDZSo0ixjixSoBpFiejRoDcxatWf4wmAGAKwxVut8kJVVluyEKNkL5KMZxlqIOR0VbgQIukCYsqXTxnBAXo30oB08Z8TcJ_FZDgHtcisRSDhPKjJBqesKN8GqE8JclUnGchny4VUk4TOWzEwDHxUYvyPEgzC3UOfNv6vbz2Bsfq4_IPpXrjSn-ClYzbl1LgTykB1qs4Xx3q1UagKGzbJyxzRwYJNi1eWypAv6ODXaKiDVQlRQtSvqh3XC8U-ofQkhAb6ra-b1EtS8S6ZjSLGITrbLq4_H1xPJMx9FrxIilBMcCOFQpkG2T4Qx5kiN4AYQdmSqEhcKXaOs6tlChyeCkHgpgpvT8FoJ_kumTfzPm6k3QIdpkW3Af1_kCf2hcT_-VhwJNVjuOdkUa4uqwk'
      };
      request.post({
        headers: headers,
        url: `https://tmproxy.com/api/proxy/get-current-proxy`,
        // formData: field,
        json: {
          "api_key": tk
        }
      }, function (error, response, data) {
        if (data.data && data.data.https) {
          return r(data.data.https);
        } else {
          return r('');
        }
      });
    });
  },
  getTmProxyNew: async function (tk) {
    return new Promise(r => {
      var headers = {
        'User-Agent': '',
        'Cookie': '',
        'Content-Type': 'application/json',
        // sec-fetch-dest: empty
        // sec-fetch-mode: cors
        'sec-fetch-site': 'same-origin',
        'Authorization': 'eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6IjkxZDhkZWQ3LWIzNzctNDgzNi1iYzI4LWY5NzJjM2ZkMjZmYyIsImV4cCI6MTY4MDM5NjU5NCwiaWF0IjoxNjgwMzUzMzk0LCJpc3MiOiJ0bS1wcm94eS5jb20iLCJuYmYiOjE2ODAzNTMzOTR9.jZtsyuNN1ySnfx13TDmXcKlPNuFwqtCcGxe-mGcU7HopLdEKY99-cZJke7t5-5-lPI2FxaEohEuSiGEz4hRDqVp91Q6iiui8ktCsaa1cw1jWqPjyNTCAoiObbfLHrm8u66Uwzc19R8cNrcJHjVuODox2C__AxAGElS1YOVONHYIXPciqeryZ-X1l7HPwbR3GNgmoCPeVTS6uGKJMLQWbn0WGdC6AXNWrygYhoNkqNkP5iSPJnbky1lswiOQ-hYGKRWHtERpI-zcaGDu9QS8AJjxKHDZSo0ixjixSoBpFiejRoDcxatWf4wmAGAKwxVut8kJVVluyEKNkL5KMZxlqIOR0VbgQIukCYsqXTxnBAXo30oB08Z8TcJ_FZDgHtcisRSDhPKjJBqesKN8GqE8JclUnGchny4VUk4TOWzEwDHxUYvyPEgzC3UOfNv6vbz2Bsfq4_IPpXrjSn-ClYzbl1LgTykB1qs4Xx3q1UagKGzbJyxzRwYJNi1eWypAv6ODXaKiDVQlRQtSvqh3XC8U-ofQkhAb6ra-b1EtS8S6ZjSLGITrbLq4_H1xPJMx9FrxIilBMcCOFQpkG2T4Qx5kiN4AYQdmSqEhcKXaOs6tlChyeCkHgpgpvT8FoJ_kumTfzPm6k3QIdpkW3Af1_kCf2hcT_-VhwJNVjuOdkUa4uqwk'
      };
      request.post({
        headers: headers,
        url: `https://tmproxy.com/api/proxy/get-new-proxy`,
        // formData: field,
        json: {
          "api_key": tk,
          "id_location": 5
        }
      }, function (error, response, data) {
        console.log(data);
        return r(true);
      });
    });
  },
  clearCacheForFile(filePath) {
    try {
      delete __webpack_require__.c[path.resolve(filePath)];
    } catch (e) {}
  },
  generateRandomHex(length) {
    let result = '';
    const characters = 'abcdef0123456789';
    const charactersLength = characters.length;
    for (let i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
  },
  async getandcheckproxy(number) {
    let list_proxy = [];
    let promises = [];
    let number_complete = 0;
    for (var i = 0; i < number; i++) {
      promises.push(helper.getcheckproxy(i, 0));
    }
    let result = await Promise.all(promises);
    return result;
  },
  async getcheckproxy(id, max) {
    let proxy = helper.getproxypy();
    if (max > 3) {
      return proxy;
    }
    await helper.delay(id * 10);
    let retry = 1;
    let list = ["https://api.ipify.org?format=json", "https://api.myip.com", "https://api.seeip.org/jsonip",
    // 'http://amazingcpanel.com/api/cron/myip?authensone=mysonetrend', 
    "https://jsonip.com"];
    let random = (max, min) => {
      return Math.floor(Math.random() * (max - min)) + min;
    };
    let link = list[random(list.length - 1, 0)] || "https://jsonip.com";
    var url = link;
    let options = {
      url: decodeURI(url),
      timeout: 10000,
      retryTime: 2,
      proxy
    };
    let result = await helper.makeRequest(options);
    try {
      if (result && result.bodyJson && result.bodyJson.ip) {
        return proxy;
      }
    } catch (e) {}
    max++;
    return await helper.getcheckproxy(id, max);
  },
  getproxybyslpit(total, per_ip) {
    let number = Math.floor(total / per_ip) + 10;
    let list_proxy = [];
    for (var i = 0; i < number; i++) {
      list_proxy.push("http://amazing129-zone-adam-region-north_america-session-" + helper.generateRandomHex(12) + "-sessTime-120:Amazingcpanel129@pybpm-ins-ei89n3g0.pyproxy.io:2510");
    }
    return list_proxy;
  },
  getproxypy() {
    return "http://amazing129-zone-adam-region-north_america-session-" + helper.generateRandomHex(12) + "-sessTime-120:Amazingcpanel129@pybpm-ins-ei89n3g0.pyproxy.io:2510";
  },
  getAccountProxy: function (id) {
    var file_cookie_content = fs.readFileSync(path.resolve("./data/_acc.txt"), {
      encoding: 'utf8',
      flag: 'r'
    });
    var file_cookie_content2 = fs.readFileSync(path.resolve("./data/_acc2.txt"), {
      encoding: 'utf8',
      flag: 'r'
    });
    file_cookie_content += '\n' + file_cookie_content2;
    var file_proxy_content = fs.readFileSync(path.resolve("./data/_proxy2.txt"), {
      encoding: 'utf8',
      flag: 'r'
    });
    var acc_cookie = file_cookie_content.trim().split('\n');
    var proxy_key = file_proxy_content.trim().split('\n');
    var number_acc_per_line = 200;
    var number_acc_per_proxy = 3 * number_acc_per_line;
    var number_id = id;
    var list_acc = [];
    var number_acc = 25;
    var max_account = acc_cookie.length;
    // max_account = 20;
    for (var i = (number_id - 1) * number_acc_per_line; i < number_id * number_acc_per_line && i < acc_cookie.length; i++) {
      var session_id = helper.getString(acc_cookie[i], 'sessionid=', ';');
      var device_id = helper.getString(acc_cookie[i], 'multi_sids=', '%');
      if (device_id == '') {
        device_id = helper.getString(acc_cookie[i], 'install_id=', ';');
      }
      if (device_id == '') {
        device_id = session_id;
      }
      var proxy_key_id = -1;
      proxy_key_id = Math.floor((number_id - 1) * number_acc_per_line / number_acc_per_proxy);
      if (session_id != '' && proxy_key[proxy_key_id]) {
        var proxy_details = proxy_key[proxy_key_id].split(':');
        var proxy_detail = [proxy_details[0], proxy_details[1], proxy_details[2], proxy_details[3]];
        if (proxy_details.length == 6) {
          proxy_detail[2] = proxy_details[4];
          proxy_detail[3] = proxy_details[5];
        }
        list_acc.push({
          "array_cookie": [{
            "domain": ".tiktok.com",
            "expirationDate": 1705293286.184521,
            "hostOnly": false,
            "httpOnly": true,
            "name": "sessionid",
            "path": "/",
            "sameSite": "unspecified",
            "secure": true,
            "session": false,
            "storeId": "0",
            "value": session_id,
            "id": 8
          }],
          "device_id": device_id,
          "name": `acc_${i + 1}`,
          "proxy": {
            'protocol': 'http',
            'username': proxy_detail[2],
            'password': proxy_detail[3],
            'host': proxy_detail[0],
            'port': proxy_detail[1]
          },
          "proxy_key": "none"
        });
      }
    }
    return list_acc;
  },
  getAccountTMProxy: function (id) {
    var file_cookie_content = fs.readFileSync(path.resolve("./data/_acc.txt"), {
      encoding: 'utf8',
      flag: 'r'
    });
    var acc_cookie = file_cookie_content.trim().split('\n');
    var proxy_key = `
    283a8646d84b2e80d9db19bd8126a69b
    78c0a2424880f1d3139c7d354f343c4e
    `.trim().split('\n');
    var number_acc_per_proxy = 800;
    var number_acc_per_line = 200;
    var number_id = 5;
    var list_acc = [];
    var number_acc = 25;
    var max_account = acc_cookie.length;
    // max_account = 20;
    for (var i = (number_id - 1) * number_acc_per_line; i < number_id * number_acc_per_line && i < acc_cookie.length; i++) {
      var session_id = helper.getString(acc_cookie[i], 'sessionid=', ';');
      var device_id = helper.getString(acc_cookie[i], 'multi_sids=', '%');
      if (device_id == '') {
        device_id = helper.getString(acc_cookie[i], 'install_id=', ';');
      }
      if (device_id == '') {
        device_id = session_id;
      }
      var proxy_key_id = -1;
      proxy_key_id = Math.floor((number_id - 1) * number_acc_per_line / number_acc_per_proxy);
      // console.log(proxy_key[proxy_key_id])
      if (session_id != '' && proxy_key[proxy_key_id]) {
        list_acc.push({
          "array_cookie": [{
            "domain": ".tiktok.com",
            "expirationDate": 1705293286.184521,
            "hostOnly": false,
            "httpOnly": true,
            "name": "sessionid",
            "path": "/",
            "sameSite": "unspecified",
            "secure": true,
            "session": false,
            "storeId": "0",
            "value": session_id,
            "id": 8
          }],
          "device_id": device_id,
          "name": `acc_${i + 1}`,
          "proxy": {
            'protocol': 'http',
            'username': 'root',
            'password': 'nD?E7z6c',
            'host': '102.102.102.102',
            'port': '102'
          },
          "proxy_key": proxy_key[proxy_key_id]
        });
      }
    }
  },
  sendMessageTeleConfig: async function (config) {
    var data_tele = {
      token: config.token,
      chat_id: config.chat_id,
      message: config.message
    };
    var url = 'https://api.telegram.org/bot' + data_tele.token + '/sendMessage?chat_id=' + data_tele.chat_id + '&text=' + encodeURIComponent(data_tele.message);
    return new Promise(r => {
      request.get({
        url: url
      }, function (error, response, data) {
        if (data) {
          return r(data);
        } else {
          return r('');
        }
      });
    });
  },
  sendMessageTele: async function (message) {
    var data_tele = {
      token: '6631966433:AAGG5p7KX8JKusJPGsw2itg3Ano2xVrYzfU',
      chat_id: '@amactiktoklive',
      message: message
    };
    var url = 'https://api.telegram.org/bot' + data_tele.token + '/sendMessage?chat_id=' + data_tele.chat_id + '&text=' + encodeURIComponent(data_tele.message);
    return new Promise(r => {
      request.get({
        url: url
      }, function (error, response, data) {
        if (data) {
          return r(data);
        } else {
          return r('');
        }
      });
    });
  },
  sendMessageTele403: async function (message) {
    var data_tele = {
      token: '6631966433:AAGG5p7KX8JKusJPGsw2itg3Ano2xVrYzfU',
      chat_id: '@amactiktoklive403',
      message: message
    };
    var url = 'https://api.telegram.org/bot' + data_tele.token + '/sendMessage?chat_id=' + data_tele.chat_id + '&text=' + encodeURIComponent(data_tele.message);
    return new Promise(r => {
      request.get({
        url: url
      }, function (error, response, data) {
        if (data) {
          return r(data);
        } else {
          return r('');
        }
      });
    });
  },
  sendMessageTeleDie: async function (message) {
    var data_tele = {
      token: '6631966433:AAGG5p7KX8JKusJPGsw2itg3Ano2xVrYzfU',
      chat_id: '@amactiktokaccountdie',
      message: message
    };
    var url = 'https://api.telegram.org/bot' + data_tele.token + '/sendMessage?chat_id=' + data_tele.chat_id + '&text=' + encodeURIComponent(data_tele.message);
    return new Promise(r => {
      request.get({
        url: url
      }, function (error, response, data) {
        if (data) {
          return r(data);
        } else {
          return r('');
        }
      });
    });
  },
  getDataProxyCron: async function (server_ip) {
    var url = `${'https://' + 'tt1.' + 'fbvideoview' + '.com/' + 'api/' + 'tiktok' + '/proxydata'}?server_ip=${server_ip}`;
    return new Promise(r => {
      request.get({
        url: url
      }, function (error, response, data) {
        return r(data);
      });
    });
  },
  getDataCron: async function (server_ip, server_id = "tt1") {
    var url = `${'https://' + server_id + '.' + 'fbvideoview' + '.com/' + 'api/' + 'tiktok' + '/cusdata'}?server_ip=${server_ip}`;
    return new Promise(r => {
      request.get({
        url: url
      }, function (error, response, data) {
        return r(data);
      });
    });
  },
  getDataCron2: async function (proxy_string, status) {
    var url = `${'https://' + 'tt1.' + 'fbvideoview' + '.com/' + 'api/' + 'tiktok' + '/setproxy'}?proxy_string=${proxy_string}&status=${status}`;
    return new Promise(r => {
      request.get({
        url: url
      }, function (error, response, data) {
        try {
          return r(JSON.parse(data));
        } catch (e) {
          return r(false);
        }
      });
    });
  },
  getDataSite: async function (server_ip) {
    var url = `${'https://' + 'tt1.' + 'fbvideoview' + '.com/' + 'api/' + 'tiktok' + '/cusdata'}?server_ip=${server_ip}`;
    return new Promise(r => {
      request.get({
        url: url
      }, function (error, response, data) {
        if (data) {
          try {
            data = JSON.parse(data);
          } catch (e) {}
          var data_return = {
            proxy: data.proxy,
            cookie: []
          };
          if (fs.existsSync(path.resolve("./data/acc_die_sessionids.txt"))) {
            var file_cookie_die_content = fs.readFileSync(path.resolve("./data/acc_die_sessionids.txt"), {
              encoding: 'utf8',
              flag: 'r'
            });
            var acc_cookie_die = file_cookie_die_content.trim().split('|');
          } else {
            var acc_cookie_die = [];
          }
          data.accounts.forEach(function (doc) {
            // console.log(`${doc.facebook_id}|${doc.cookie}`)
            var sessionid = helper.getString(doc.cookie, 'sessionid=', ';');
            if (acc_cookie_die.indexOf(sessionid) == -1) {
              data_return.cookie.push(doc.cookie);
            }
          });
          // console.log(data_return.cookie.length)
          // process.exit(1)
          return r(data_return);
        } else {
          return r(false);
        }
      });
    });
  },
  changeProxyIp: async function (proxy) {
    helper.clearCacheForFile(path.resolve("./data/key.js"));
    let key_data = __webpack_require__("./main/businesses sync recursive")(path.resolve("./data/key.js"));
    let key = key_data[proxy.trim()];
    if (key) {
      var url = `https://app.proxyno1.com/api/change-key-ip/${key}`;
      if (proxy.indexOf('proxyxoay.net') > -1) {
        url = `https://proxyxoay.net/api/rotating-proxy/change-key-ip/${key}`;
      }
      return new Promise(r => {
        var headers = {
          'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Safari/605.1.15',
          'sec-fetch-site': 'same-origin',
          'Authorization': 'Bearer 1938|N1jYGbPNm4XyHnOtakG1gFbPHjF0Y62MSYrnV3Yy'
        };
        request.get({
          headers: headers,
          url: url
        }, function (error, response, data) {
          if (data) {
            try {
              data = JSON.parse(data);
            } catch (e) {
              data = false;
            }
            console.log(key, data);
            return r(data);
            // callback(id, data)
          } else {
            console.log('ok', key, error);
            // callback(id, false)
            return r(false);
          }
        });
      });
    } else {
      return false;
    }
  },
  changeIp: async function (id) {
    var data = await helper.changeIpProcess(list_id[id_current]);
    if (data.indexOf('Đổi IP thành công') > -1 || data.indexOf('giây cho lần đổi ip tiếp theo.') > -1) {
      console.log('success', id);
      return true;
    } else {
      console.log('failed', id);
      await helper.delay(5000);
      return await helper.changeIp(id);
    }
  },
  changeIpProcess: async function (id) {
    return new Promise(r => {
      var config = helper.getDomainProxy();
      var cookie_string = request.cookie(config.cookie);
      var headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36',
        'Cookie': cookie_string,
        'sec-fetch-site': 'same-origin',
        'Authorization': config.Authorization
      };
      request.post({
        headers: headers,
        url: `${config.url}/detail/${id}`,
        form: {
          "action": "createIP"
        }
      }, function (error, response, data) {
        if (data) {
          // console.log(data)
          return r(data);
        } else {
          console.log('error', error);
          return r(false);
        }
      });
    });
  },
  updateInfo: async function (id) {
    var data = await helper.updateInfoProcess(list_id[id_current]);
    if (data.indexOf('Cập nhật thành công thông tin') > -1) {
      console.log('success', id);
      return true;
    } else {
      console.log('failed', id);
      await helper.delay(5000);
      return await helper.updateInfo(id);
    }
  },
  updateInfoProcess: async function (id) {
    return new Promise(r => {
      var config = helper.getDomainProxy();
      var cookie_string = request.cookie(config.cookie);
      var headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36',
        'Cookie': cookie_string,
        'sec-fetch-site': 'same-origin',
        'Authorization': config.Authorization
      };
      request.post({
        headers: headers,
        url: `${config.url}/detail/${id}`,
        form: {
          "action": "updateProxy"
        }
      }, function (error, response, data) {
        if (data) {
          // console.log(data)
          return r(data);
        } else {
          console.log('error', error);
          return r(false);
        }
      });
    });
  },
  getProxy: async function (id) {
    return new Promise(r => {
      var config = helper.getDomainProxy();
      var cookie_string = request.cookie(config.cookie);
      var headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36',
        'Cookie': cookie_string,
        'sec-fetch-site': 'same-origin',
        'Authorization': config.Authorization
      };
      request.get({
        headers: headers,
        url: `${config.url}/detail/${id}`
      }, function (error, response, data) {
        if (data) {
          var proxy_id = helper.getString(data, 'HTTP IPv4 Proxy:</span>', '</span>');
          proxy_id = helper.getString(proxy_id + '<', '>', '<').trim();
          return r(proxy_id + ':' + id);
        } else {
          console.log('error', error);
          return r(false);
        }
      });
    });
  },
  getDomainProxy: function () {
    return {
      url: 'h' + 't' + 't' + 'p' + 's' + ':' + '/' + '/' + 'a' + 'p' + 'p' + '.' + 'p' + 'r' + 'o' + 'x' + 'y' + 'd' + 'a' + 'n' + 'c' + 'u' + '.' + 'c' + 'o' + 'm' + '/' + 'p' + 'r' + 'o' + 'x' + 'y' + '/' + 'residential/vietnam',
      Authorization: 'eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6IjkxZDhkZWQ3LWIzNzctNDgzNi1iYzI4LWY5NzJjM2ZkMjZmYyIsImV4cCI6MTY4MDM5NjU5NCwiaWF0IjoxNjgwMzUzMzk0LCJpc3MiOiJ0bS1wcm94eS5jb20iLCJuYmYiOjE2ODAzNTMzOTR9.jZtsyuNN1ySnfx13TDmXcKlPNuFwqtCcGxe-mGcU7HopLdEKY99-cZJke7t5-5-lPI2FxaEohEuSiGEz4hRDqVp91Q6iiui8ktCsaa1cw1jWqPjyNTCAoiObbfLHrm8u66Uwzc19R8cNrcJHjVuODox2C__AxAGElS1YOVONHYIXPciqeryZ-X1l7HPwbR3GNgmoCPeVTS6uGKJMLQWbn0WGdC6AXNWrygYhoNkqNkP5iSPJnbky1lswiOQ-hYGKRWHtERpI-zcaGDu9QS8AJjxKHDZSo0ixjixSoBpFiejRoDcxatWf4wmAGAKwxVut8kJVVluyEKNkL5KMZxlqIOR0VbgQIukCYsqXTxnBAXo30oB08Z8TcJ_FZDgHtcisRSDhPKjJBqesKN8GqE8JclUnGchny4VUk4TOWzEwDHxUYvyPEgzC3UOfNv6vbz2Bsfq4_IPpXrjSn-ClYzbl1LgTykB1qs4Xx3q1UagKGzbJyxzRwYJNi1eWypAv6ODXaKiDVQlRQtSvqh3XC8U-ofQkhAb6ra-b1EtS8S6ZjSLGITrbLq4_H1xPJMx9FrxIilBMcCOFQpkG2T4Qx5kiN4AYQdmSqEhcKXaOs6tlChyeCkHgpgpvT8FoJ_kumTfzPm6k3QIdpkW3Af1_kCf2hcT_-VhwJNVjuOdkUa4uqwk',
      cookie: 'auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NGQ1ZTA5NDY0ZDQ4NjRiMTQ2NDg3MDMiLCJpYXQiOjE2OTE3NTgxODIsImV4cCI6MjAwMDAxNjkxNzU4MTgyfQ.TptlUZz9y0KCBU5UFCingkUA3BOA2dKoPsYncgITGq8'
    };
  },
  getConFigCPUDefalt: function () {
    return {
      is_full: false,
      cpu_max: 83,
      time_max: 10,
      time_current: 0
    };
  },
  getCpuUsage: function () {
    const cpus = os.cpus();
    let totalIdle = 0;
    let totalTick = 0;
    for (const cpu of cpus) {
      for (const type in cpu.times) {
        totalTick += cpu.times[type];
      }
      totalIdle += cpu.times.idle;
    }
    return {
      idle: totalIdle / cpus.length,
      total: totalTick / cpus.length
    };
  },
  calculateCpuUsage: function () {
    const startMeasure = helper.getCpuUsage();
    return new Promise(resolve => {
      setTimeout(() => {
        const endMeasure = helper.getCpuUsage();
        const idleDifference = endMeasure.idle - startMeasure.idle;
        const totalDifference = endMeasure.total - startMeasure.total;
        const cpuUsage = 100 - 100 * idleDifference / totalDifference;
        // resolve(cpuUsage.toFixed(2));
        resolve(parseInt(cpuUsage));
      }, 100);
    });
  },
  subArray: function (array, length) {
    return [helper.splice(array, length)[0], array.slice(length)];
  },
  parserCookieString: function (string) {
    let array = [{
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "cmpl_token",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "AgQQAPOFF-RO0rSNM89JeJ08_tTE3iYMf4UOYM4hxg",
      "id": 1
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": false,
      "name": "msToken",
      "path": "/",
      "sameSite": "no_restriction",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "ZrmrlCOXaPIsJPAAgnhkyYPI54Kh0TAS0z7hTdDE2GuXp4rrxhCc94EKDE3oN0-QJu2tLAaeRdruxwas227-xiHxJJJJ-pCdV7v-3PTJ79S8h_QwwRztW1mFXZi7jnihubLIxKc=",
      "id": 2
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "odin_tt",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "c0d19f2b161b916d6da355bd7f1f88145e123c17af81e155ae7478fe734de73c4e4c7f185119408308bb33245768d27f1e127553f07dc64b8aa60659376dfd954e376b1116cc77c861ba98e09101fe0d",
      "id": 3
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "passport_auth_status",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "c769e1989f8a526be4320cc7d6150828%2C76c18c9ea61bc03228aebe967af7db83",
      "id": 4
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "passport_auth_status_ss",
      "path": "/",
      "sameSite": "no_restriction",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "c769e1989f8a526be4320cc7d6150828%2C76c18c9ea61bc03228aebe967af7db83",
      "id": 5
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": false,
      "name": "passport_csrf_token",
      "path": "/",
      "sameSite": "no_restriction",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "f6adbbf41da4349e1d95e0ff2361f78a",
      "id": 6
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": false,
      "name": "passport_csrf_token_default",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "f6adbbf41da4349e1d95e0ff2361f78a",
      "id": 7
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "sessionid",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "118adf4b4f42221cdf948dd6bcfa21b3",
      "id": 8
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "sessionid_ss",
      "path": "/",
      "sameSite": "no_restriction",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "118adf4b4f42221cdf948dd6bcfa21b3",
      "id": 9
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "sid_guard",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "118adf4b4f42221cdf948dd6bcfa21b3%7C1689741287%7C15551999%7CMon%2C+15-Jan-2024+04%3A34%3A46+GMT",
      "id": 10
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "sid_tt",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "118adf4b4f42221cdf948dd6bcfa21b3",
      "id": 11
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "sid_ucp_v1",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "1.0.0-KDc2ZjEyZGEwOTFhYzIwOTE0MjEyMjFiMDVjOTNmMDI5NDAxYTAyODQKHwiFiKmKjK332WQQ58_dpQYYswsgDDCMu8-lBjgIQBIQAxoGbWFsaXZhIiAxMThhZGY0YjRmNDIyMjFjZGY5NDhkZDZiY2ZhMjFiMw",
      "id": 12
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "ssid_ucp_v1",
      "path": "/",
      "sameSite": "no_restriction",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "1.0.0-KDc2ZjEyZGEwOTFhYzIwOTE0MjEyMjFiMDVjOTNmMDI5NDAxYTAyODQKHwiFiKmKjK332WQQ58_dpQYYswsgDDCMu8-lBjgIQBIQAxoGbWFsaXZhIiAxMThhZGY0YjRmNDIyMjFjZGY5NDhkZDZiY2ZhMjFiMw",
      "id": 13
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "store-country-code",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "vn",
      "id": 14
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "store-country-code-src",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "uid",
      "id": 15
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "store-idc",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "alisg",
      "id": 16
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "tt_chain_token",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "Whz3fV/uffg2X3rFI2jDwA==",
      "id": 17
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "tt_csrf_token",
      "path": "/",
      "sameSite": "lax",
      "secure": true,
      "session": true,
      "storeId": "0",
      "value": "LcrwQjqk-fbeiBqQQm_yApX92ZX4znDxqhug",
      "id": 18
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "tt-target-idc",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "alisg",
      "id": 19
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "tt-target-idc-sign",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "WFpDkj4jovvU0oiahNJfMdjh2TGF15_K7cFJ4zM8cK0M3KYtkD6sE86i7_7LIb8G6R7tX3T-_1-xonpFwS5Q_wPk6f6xiPRXCaDsYEdrOkXrmKPiOXwqClUtXedo_r2V9sDmxiazAjH39J1E8X73xjPBnDNb1RZ1OEimlYv86BteD_FNGlHcf1Dku5BLy5jBReyMpoav7oRggBQLxV6_N-rKbHPDbX_2IMzaYm5Tf7w_woYDtvavO03G-0JkTL5xIthw9NE22hg6F-z2aI4m6pO-4P50rjaZO8T9bFr5WSIxMYRKpRYrQpceIZY-nNzxZyj9YVbozc_pPfdH1NuPBi7sHMM_P0TB4yU8rN7j1QjJ9KUPNARo8rETFH_8r3VayU7jlivdFxZDbDXWql6aVZheMYoYqKZYjpuaEdU-kciZJu0pwOQfgu2v7q1uAOnRMZEpG6KE0vGNFuxLEH4SBEw5wmXSSMMVW2nGlIWpOdyO0d8-rC_oM_V_rvhgFTn6",
      "id": 20
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "ttwid",
      "path": "/",
      "sameSite": "no_restriction",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "1%7CcQahXXK1a5BOFLsJFF3vybReES7y-dREXvLhf4dFZ-0%7C1690858929%7C135da0f55ee0113f4ac2424c6d31a72953920a0845e9dec18009f2350c89738b",
      "id": 21
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "uid_tt",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "6659faeffde75c6b04d5303ec7499115d60186fa016cc70a0769ea5d83c7caff",
      "id": 22
    }, {
      "domain": ".tiktok.com",
      "hostOnly": false,
      "httpOnly": true,
      "name": "uid_tt_ss",
      "path": "/",
      "sameSite": "no_restriction",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "6659faeffde75c6b04d5303ec7499115d60186fa016cc70a0769ea5d83c7caff",
      "id": 23
    }, {
      "domain": ".www.tiktok.com",
      "hostOnly": false,
      "httpOnly": false,
      "name": "__tea_cache_tokens_1988",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "{%22_type_%22:%22default%22%2C%22user_unique_id%22:%227256809649374184967%22%2C%22timestamp%22:1689607678276}",
      "id": 24
    }, {
      "domain": ".www.tiktok.com",
      "hostOnly": false,
      "httpOnly": false,
      "name": "passport_fe_beating_status",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": true,
      "storeId": "0",
      "value": "true",
      "id": 25
    }, {
      "domain": ".www.tiktok.com",
      "hostOnly": false,
      "httpOnly": false,
      "name": "tiktok_webapp_theme",
      "path": "/",
      "sameSite": "unspecified",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "light",
      "id": 26
    }, {
      "domain": "www.tiktok.com",
      "hostOnly": true,
      "httpOnly": false,
      "name": "living_user_id",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "98610993253",
      "id": 27
    }, {
      "domain": "www.tiktok.com",
      "hostOnly": true,
      "httpOnly": false,
      "name": "msToken",
      "path": "/",
      "sameSite": "unspecified",
      "secure": false,
      "session": false,
      "storeId": "0",
      "value": "L8KMHEgRCEs1LGufwSdLNFlGS6q4zyImq0mAyRXmdh-lqcJdHbBSsl_2d4egmql_IiuEoXTwUK-tnhla_-9GTHozKgUSphWxb9AhyzIlGaF1FTnzcq47NVKOMHJ7WUksEHxeryU=",
      "id": 28
    }];
    let list = [];
    let new_arr = [];
    let strs = string.split(";");
    let sid = "";
    strs.forEach(item => {
      let is = item.trim().split("=");
      let value = helper.getString(item.trim(), `${is[0]}=`, ";");
      let index = array.findIndex(i => i.name == is[0]);
      if (is[0] == "sessionid") {
        sid = value;
      }
      if (index !== -1) {
        let new_i = array[index];
        new_i.value = value;
        new_arr.push(new_i);
      }
    });
    return new_arr;
  },
  getTime: function () {
    // Thiết lập đối tượng Date theo múi giờ Việt Nam
    const now = new Date(new Date().toLocaleString("en-US", {
      timeZone: "Asia/Ho_Chi_Minh"
    }));

    // Định dạng giờ, phút, giây
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');

    // Trả về chuỗi thời gian đã định dạng
    return `[${hours}:${minutes}:${seconds}]`;
  },
  parserProxyString: function (proxystring) {
    proxystring = proxystring || "";
    let authInfoI = "";
    let proxyAddressI = proxystring;
    proxystring = proxystring.replace("https://", "").replace("http://", "");
    if ((proxystring || "").includes("@")) {
      const [authInfo, proxyAddress] = proxystring.split('@');
      proxyAddressI = proxyAddress;
      authInfoI = authInfo;
    }
    const [username, password] = authInfoI.split(':');
    const [host, port] = proxyAddressI.split(':');
    if (port && host) return {
      "protocol": "http",
      username,
      password,
      host,
      port
    };
  },
  /**
  * makeRequest
  * @param {options: {url, headers, method, proxy,retryCount, body, timeout, proxy_list, form, isRetry, isGetBody, preCheckRetry, retryTime }}  options
  * @return {{ body, stautus, bodyJson, headers}}
  */
  makeRequestNew: async function (options) {
    // console.log(options)
    let {
      url,
      headers,
      method,
      proxy,
      retryCount,
      body,
      timeout,
      retryTime,
      proxy_list,
      form,
      preCheckRetry,
      name,
      retryAfter
    } = options;
    method = method || "get";
    retryTime = retryTime || 2;
    retryAfter = retryAfter || 1000;
    let isGetBody = true;
    if (options.hasOwnProperty("isGetBody")) {
      isGetBody = options.isGetBody;
    }
    let isRetry = true;
    if (options.hasOwnProperty("isRetry")) {
      isRetry = options.isRetry;
    }
    let retry = retryCount || 0;
    let head = await new Promise(r => {
      const reqOptions = {
        url,
        method: method.toUpperCase(),
        headers,
        timeout: timeout || 10000
      };
      if (body) reqOptions.body = body;
      if (form) reqOptions.form = form;
      if (proxy) {
        let proxystr = "";
        if (typeof proxy == "string") {
          proxystr = proxy;
          if (!proxy.includes("https") && !proxy.includes("http")) {
            let {
              protocol,
              host,
              port,
              username,
              password
            } = helper.parserProxyString(proxy);
            proxystr = `${protocol || "http"}://${username && password ? `${username}:${password}@` : ''}${host}:${port}`;
          }
        } else {
          let {
            protocol,
            host,
            port,
            username,
            password
          } = proxy;
          proxystr = `${protocol || "http"}://${username && password ? `${username}:${password}@` : ''}${host}:${port}`;
        }
        reqOptions.proxy = proxystr;
      }
      let done = false;
      const req = request(reqOptions, (error, response, body) => {
        if (!done) {
          log('body');
          log(helper.getTime(), "done");
          done = true;
          return r({
            error,
            body,
            headers: response ? response.headers : {},
            status: response ? response.statusCode : null
          });
        }
      });
      req.on('response', res => {
        log(helper.getTime(), "destroy", reqOptions.proxy, res.statusCode);
        done = true;
        res.destroy(); // huỷ nhận dữ liệu từ server
        return r({
          error: null,
          body: res && res.body ? res.body : "ok",
          headers: res ? res.headers : {},
          status: res ? res.statusCode : null
        });
      });
      req.on('data', res => {
        // console.log(helper.getTime(),"data started");
        res.abort(); // huỷ nhận dữ liệu từ server
        done = true;
        return r({
          error: "Request aborted after send",
          body: "",
          headers: {},
          status: null
        });
      });
      req.on('socket', socket => {
        socket.on('connect', () => {
          log("cancel");
          setTimeout(() => {
            if (!done) {
              req.abort();
              done = true;
              return r({
                error: "Request aborted after send",
                body: "",
                headers: {},
                status: null
              });
            }
          }, 20);
        });
      });
      req.on('error', err => {
        log("Error or aborted:", err.message);
      });
      setTimeout(() => {
        if (!done) {
          done = true;
          log("cancel timeout");
          return r({
            error: "Request timeout",
            body: "",
            headers: {},
            status: null
          });
        }
      }, timeout || 10000);
    });
    // console.log("head",head)
    let isRetryPreCheck = false;
    if (typeof preCheckRetry === "function") {
      try {
        isRetryPreCheck = await preCheckRetry(head.body || "", head);
      } catch (e) {
        log("err pre", e);
      }
    }
    let bodyJson = {};
    try {
      bodyJson = JSON.parse(head.body);
    } catch (e) {}
    head.bodyJson = bodyJson;
    if (isRetryPreCheck || head.error || !head.body && isGetBody) {
      if (retry < retryTime && isRetry) {
        if (proxy_list && proxy_list.length > 0) {
          options.proxy = proxy_list[Math.floor(Math.random() * proxy_list.length)];
        }
        retry++;
        options.retryCount = retry;
        await helper.delay(retryAfter || 1000);
        log("get again");
        return await helper.makeRequestNew(options);
      }
      return head;
    }
    // console.log("done")
    return head;
  },
  makeRequest: async function (options) {
    let {
      url,
      headers,
      method,
      proxy,
      retryCount,
      body,
      timeout,
      retryTime,
      proxy_list,
      form,
      preCheckRetry,
      name,
      retryAfter
    } = options;
    method = method || "get";
    retryTime = retryTime || 2;
    retryAfter = retryAfter || 1000;
    let isGetBody = true;
    if (options.hasOwnProperty("isGetBody")) {
      isGetBody = options.isGetBody;
    }
    let isRetry = true;
    if (options.hasOwnProperty("isRetry")) {
      isRetry = options.isRetry;
    }
    let retry = retryCount || 0;
    let head = await new Promise(r => {
      const options = {
        url,
        method: method.toUpperCase(),
        headers: headers,
        body,
        timeout: timeout || 10000
      };
      if (body) options.body = body;
      if (form) options.form = form;
      let done = false;
      setTimeout(() => {
        if (!done) {
          done = true;
          return r({
            error: "Request timeout",
            body: "",
            headers: {},
            status: null
          });
        }
      }, timeout || 10000);
      if (proxy) {
        let proxystr = "";
        if (typeof proxy == "string") {
          proxystr = proxy;
          if (!proxy.includes("https" || 0)) {
            let {
              protocol,
              host,
              port,
              username,
              password
            } = helper.parserProxyString(proxy);
            proxystr = `${protocol || "http"}://${username && password ? `${username}:${password}@` : ''}${host}:${port}`;
          }
        } else {
          let {
            protocol,
            host,
            port,
            username,
            password
          } = proxy;
          proxystr = `${protocol || "http"}://${username && password ? `${username}:${password}@` : ''}${host}:${port}`;
        }
        options.proxy = proxystr;
      }
      options.encoding = null;
      request(options, (error, response, body) => {
        if (!done) {
          done = true;
          return r({
            error,
            body: body ? body.toString("utf8") : "",
            bodyBinary: body,
            headers: response ? response.headers : {},
            status: response ? response.statusCode : null
          });
        }
      });
    });
    let isRetryPreCheck = false;
    if ("function" == typeof preCheckRetry) {
      try {
        isRetryPreCheck = await preCheckRetry(head.body || "", head);
        isRetryPreCheck;
      } catch (e) {
        error("err pre", e);
      }
    }
    let bodyJson = {};
    try {
      bodyJson = JSON.parse(head.body);
    } catch (e) {}
    head.bodyJson = bodyJson;
    if (isRetryPreCheck || head.error || !head.body && isGetBody) {
      if (retry < retryTime && isRetry) {
        // console.log("retry request:",name)
        if (proxy_list && proxy_list.length > 0) {
          options.proxy = proxy_list[Math.floor(Math.random() * proxy_list.length)];
        }
        retry++;
        options.retryCount = retry;
        await helper.delay(retryAfter || 1000);
        return await helper.makeRequest(options);
      }
      return head;
    }
    return head;
  },
  makeRequestCC: async function (options) {
    let {
      url,
      headers,
      method,
      proxy,
      retryCount,
      body,
      timeout,
      retryTime,
      proxy_list
    } = options;
    method = method || "get";
    retryTime = retryTime || 3;
    headers.cookie = request.cookie(headers.cookie);
    let isGetBody = true;
    if (options.hasOwnProperty("isGetBody")) {
      isGetBody = options.isGetBody;
    }
    let isRetry = true;
    if (options.hasOwnProperty("isRetry")) {
      isRetry = options.isRetry;
    }
    let retry = retryCount || 0;
    let head = await new Promise(r => {
      const options = {
        url,
        method: method.toUpperCase(),
        headers: headers,
        body,
        timeout: timeout || 10000
      };
      let done = false;
      setTimeout(() => {
        if (!done) {
          done = true;
          return r({
            error: "Request timeout",
            body: "",
            headers: {},
            status: null
          });
        }
      }, timeout || 10000);
      if (proxy) {
        let proxystr = "";
        if (typeof proxy == "string") {
          proxystr = proxy;
        } else {
          let {
            protocol,
            host,
            port,
            username,
            password
          } = proxy;
          proxystr = `${protocol || "http"}://${username && password ? `${username}:${password}@` : ''}${host}:${port}`;
        }
        options.proxy = proxystr;
      }
      request(options, (error, response, body) => {
        if (!done) {
          done = true;
          return r({
            error,
            body,
            headers: response ? response.headers : {},
            status: response ? response.statusCode : null
          });
        }
      });
    });
    if (head.error || !head.body && isGetBody) {
      if (retry < retryTime && isRetry) {
        if (proxy_list && proxy_list.length > 0) {
          options.proxy = proxy_list[Math.floor(Math.random() * proxy_list.length)];
        }
        retry++;
        options.retryCount = retry;
        return await helper.makeRequestCC(options);
      }
      return head;
    }
    let bodyJson = {};
    try {
      bodyJson = JSON.parse(head.body);
    } catch (e) {}
    head.bodyJson = bodyJson;
    return head;
  },
  getRandomInt: (min, max) => {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min) + min);
  },
  generateRandomName: length => {
    const characters = 'abcdefghijklmnopqrstuvwxyz';
    let result = '';
    for (let i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return result;
  },
  /**
  * parserAccounts
  * @param {{acc_string:string| [string],number_slice, getIndex, number_ignore,key,format,key_format, item_return_type}} options 
  * @return [Account]
  * @description 
  *  item_return_type: +obejct then return obejct Account, + key_in_format then return value of key
  */
  parserAccounts: ({
    acc_string,
    number_slice,
    getIndex,
    number_ignore,
    key,
    format,
    key_format,
    item_return_type,
    preReturn
  }) => {
    format = format || "username|temp1|temp2|temp3|cookie_string";
    key_format = key_format || "|";
    item_return_type = item_return_type || "object";
    let accounts = typeof acc_string == "string" ? acc_string.split(key || "\n") : acc_string;
    if (number_ignore) {
      let [sub, remain] = helper.subArray(accounts, number_ignore);
      accounts = remain;
    }
    let spliced_array = [accounts];
    if (number_slice || number_slice > 0) {
      spliced_array = helper.splice(accounts, number_slice);
      getIndex = 0;
    }
    if (!spliced_array || !spliced_array.length) return [];
    if (getIndex > spliced_array.length - 1) return [];
    let array_return = [];
    for (let index = 0; index < spliced_array[getIndex].length; index++) {
      let i = spliced_array[getIndex][index];
      let item = {};
      if (typeof i == "string") {
        let arr = i.split(key_format);
        let keys = format.split(key_format);
        for (let i = 0; i < keys.length; i++) {
          item[keys[i]] = arr[i];
        }
      } else {
        item = i;
      }
      let is_pass = true;
      if (preReturn) {
        try {
          is_pass = preReturn(item, item[item_return_type]);
        } catch (e) {
          error("error", e);
        }
      }
      if (is_pass) array_return.push(item_return_type == "object" ? item : item[item_return_type]);
    }
    return array_return;
  },
  saveAccStatus: status_viewer_data => {
    let folder_account_no_login = "./data_test/111_no_login.json";
    let folder_account_403 = "./data_test/111_403.json";
    let folder_account_ok = "./data_test/111_ok.json";
    let folder_account_no_data = "./data_test/111_no_data.json";
    let folder_account_timeout = "./data_test/111_timeout.json";
    //3 - no login, 1 viewed, 2 - error,4 - 403
    helper.saveAccItem(status_viewer_data, folder_account_ok, 1);
    helper.saveAccItem(status_viewer_data, folder_account_no_data, 2);
    helper.saveAccItem(status_viewer_data, folder_account_no_login, 3);
    helper.saveAccItem(status_viewer_data, folder_account_403, 4);
    helper.saveAccItem(status_viewer_data, folder_account_timeout, -1);
  },
  getAccFile: value_check => {
    let folder_account_no_login = "./data_test/111_no_login.json";
    let folder_account_403 = "./data_test/111_403.json";
    let folder_account_ok = "./data_test/111_ok.json";
    let folder_account_no_data = "./data_test/111_no_data.json";
    let folder_account_timeout = "./data_test/111_timeout.json";
    let folder_account_good = "./data_test/111_good.json";
    let data = [];
    switch (value_check) {
      case -1:
        file_path = folder_account_timeout;
        break;
      case 1:
        file_path = folder_account_ok;
        break;
      case 2:
        file_path = folder_account_no_data;
        break;
      case 3:
        file_path = folder_account_no_login;
        break;
      case 4:
        file_path = folder_account_403;
        break;
      case 0:
        file_path = folder_account_good;
        break;
    }
    if (fs.existsSync(file_path)) {
      data = __webpack_require__("./main/businesses sync recursive")(path.resolve(file_path));
    }
    return data;
  },
  saveAccItem: (status_viewer_data, file_path, value_check) => {
    // Đọc file nếu có, nếu không thì tạo mảng rỗng
    let existingKeys = [];
    if (fs.existsSync(file_path)) {
      try {
        existingKeys = __webpack_require__("./main/businesses sync recursive")(path.resolve(file_path));
        if (!Array.isArray(existingKeys)) existingKeys = [];
      } catch (e) {
        existingKeys = [];
      }
    }

    // Dùng Set để tăng tốc độ tìm kiếm
    const existingSet = new Set(existingKeys);
    let updated = false;
    for (const [key, value] of Object.entries(status_viewer_data)) {
      if (value === value_check && !existingSet.has(key)) {
        existingSet.add(key);
        updated = true;
      }
    }

    // Nếu có update thì lưu lại file
    if (updated) {
      const updatedArray = Array.from(existingSet);
      fs.writeFileSync(file_path, JSON.stringify(updatedArray, null, 2), 'utf-8');
      log("Đã cập nhật file với key mới.");
    } else {
      log("Không có gì thay đổi.");
    }
  },
  genheaderenter: function ({
    s_sdk_crypt_sdk,
    s_sdk_sign_data_key,
    path
  }) {
    s_sdk_crypt_sdk = Buffer.from(s_sdk_crypt_sdk, 'base64');
    s_sdk_sign_data_key = Buffer.from(s_sdk_sign_data_key, 'base64');
    let s_sdk_crypt_sdk_json = JSON.parse(JSON.parse(s_sdk_crypt_sdk).data);
    let s_sdk_sign_data_key_json = JSON.parse(JSON.parse(s_sdk_sign_data_key).data);
    const privateKey = s_sdk_crypt_sdk_json.ec_privateKey;
    const publicKey = s_sdk_crypt_sdk_json.ec_publicKey;
    const ts_sign = s_sdk_sign_data_key_json.ts_sign;
    const ticket = s_sdk_sign_data_key_json.ticket;
    let time_now = Math.floor(Date.now() / 1000);
    const result = signDataECDSA(privateKey, `ticket=${ticket}&path=${path}&timestamp=${time_now}`);
    const publicKeyObject = crypto.createPublicKey(publicKey);

    // Xuất dưới dạng `raw` key (đúng là Q = 04 || X || Y)
    const publicKeyRaw = publicKeyObject.export({
      format: 'der',
      type: 'spki'
    });

    // Tách đúng phần Q (raw EC point)
    const rawQ = publicKeyRaw.slice(-65); // EC P-256 raw public key always 65 bytes

    const publicRawKeyBase64 = rawQ.toString('base64');

    // console.log('HEX Signature:', result.hex);
    // console.log('Base64 Signature:', result.base64);
    let client_data = {
      "ts_sign": ts_sign,
      "req_content": "ticket,path,timestamp",
      "req_sign": result.base64,
      "timestamp": time_now
    };
    let client_data_encode = Buffer.from(JSON.stringify(client_data), 'utf8').toString('base64');
    return {
      "tt-ticket-guard-public-key": publicRawKeyBase64,
      "tt-ticket-guard-client-data": client_data_encode
    };
    // Convert raw R||S to DER format (like rawSigToDER)
    function rawSigToDER(sig) {
      const halfLen = sig.length / 2;
      const r = sig.slice(0, halfLen);
      const s = sig.slice(halfLen);
      function encodeInt(val) {
        let i = 0;
        while (i < val.length && val[i] === 0) i++;
        let v = val.slice(i);
        if (v[0] & 0x80) v = Buffer.concat([Buffer.from([0]), v]);
        return Buffer.concat([Buffer.from([0x02, v.length]), v]);
      }
      const encodedR = encodeInt(r);
      const encodedS = encodeInt(s);
      const totalLength = encodedR.length + encodedS.length;
      return Buffer.concat([Buffer.from([0x30, totalLength]), encodedR, encodedS]);
    }

    // Main sign function
    function signDataECDSA(privateKeyPem, sign_str) {
      const privateKey = crypto.createPrivateKey(privateKeyPem);
      const data = Buffer.from(sign_str, 'utf8');

      // Create raw signature (64 bytes, R||S)
      const rawSignature = crypto.sign('sha256', data, {
        key: privateKey,
        dsaEncoding: 'ieee-p1363'
      });

      // Convert raw to DER (ASN.1)
      const derSignature = rawSigToDER(rawSignature);

      // Convert to hex
      const hexSignature = derSignature.toString('hex');
      return {
        hex: hexSignature,
        base64: Buffer.from(derSignature).toString('base64')
      };
    }
  },
  requestCURL: async function ({
    cookie_string,
    proxyUrl,
    useragent,
    url
  }) {
    let cmd;
    let file = path.resolve(Date.now() + "_" + helper.getRandomInt(100000, 900000) + ".txt");
    // cmd = `curl -i ${proxyUrl? ("-x '"+ (proxyUrl.replace("http://","")))+"'" :""} "${url}" \
    // -H 'accept: */*' \
    // -H 'accept-language: vi,en-US;q=0.9,en;q=0.8,vi-VN;q=0.7' \
    // -H 'cache-control: no-cache' \
    // -H 'content-type: application/x-www-form-urlencoded; charset=UTF-8' \
    // -H 'Cookie: ${cookie_string}' \
    // -b '${cookie_string}' \
    // -H 'dnt: 1' \
    // -H 'origin: https://www.tiktok.com' \
    // -H 'pragma: no-cache' \
    // -H 'priority: u=1, i' \
    // -H 'referer: https://www.tiktok.com/' \
    // -H 'sec-ch-ua: "Chromium";v="134", "Not:A-Brand";v="24", "Google Chrome";v="134"' \
    // -H 'sec-ch-ua-mobile: ?0' \
    // -H 'sec-ch-ua-platform: "macOS"' \
    // -H 'sec-fetch-dest: empty' \
    // -H 'sec-fetch-mode: cors' \
    // -H 'sec-fetch-site: same-site' \
    // -H 'user-agent: ${useragent}'`
    const proxy = proxyUrl ? ['-x', proxyUrl.replace('http://', '')] : [];
    const headers = ['-H', 'accept: */*', '-H', 'accept-language: vi,en-US;q=0.9,en;q=0.8,vi-VN;q=0.7', '-H', 'cache-control: no-cache', '-H', 'content-type: application/x-www-form-urlencoded; charset=UTF-8', '-H', `Cookie: ${cookie_string}`, '-b', cookie_string, '-H', 'dnt: 1', '-H', 'origin: https://www.tiktok.com', '-H', 'pragma: no-cache', '-H', 'priority: u=1, i', '-H', 'referer: https://www.tiktok.com/', '-H', 'sec-ch-ua: "Chromium";v="134", "Not:A-Brand";v="24", "Google Chrome";v="134"', '-H', 'sec-ch-ua-mobile: ?0', '-H', 'sec-ch-ua-platform: "macOS"', '-H', 'sec-fetch-dest: empty', '-H', 'sec-fetch-mode: cors', '-H', 'sec-fetch-site: same-site', '-H', `user-agent: ${useragent}`];
    const args = ['-i', ...proxy, ...headers, url];
    let {
      stdout,
      stdoutString
    } = await helper.runCmdSpawn("curl", args, ({
      error,
      stdout,
      stderr
    }) => {
      // console.log(error, stdout, stderr)
    });
    stdoutString = stdoutString || "";
    let spl_array = stdoutString.split("\n");
    let set_cookie = "";
    let location = "";
    spl_array.forEach(item => {
      let [name, value] = item.split(":");
      value = (value || "").trim();
      name = (name || "").trim();
      if (name == "set-cookie") {
        set_cookie += value + ",";
      }
      if (name == "location") {
        location = item.replace("location:", "").trim();
      }
    });
    return {
      location,
      set_cookie,
      stdout: stdoutString,
      cmd,
      file,
      body: stdoutString,
      bodyBinary: stdout
    };
  },
  runCmd: cmd => {
    return new Promise(r => {
      const child = exec(cmd, (error, stdout, stderr) => {
        return r({
          error,
          success: error ? false : true,
          stdout,
          stderr
        });
      });
      const cleanup = () => {
        if (child) {
          log('Killing child process...');
          child.kill(); // Sends SIGTERM to the child process
        }
      };

      // Handle parent process exit
      process.on('exit', cleanup);

      // Handle SIGINT (Ctrl+C)
      process.on('SIGINT', () => {
        cleanup();
        process.exit();
      });

      // Handle SIGTERM
      process.on('SIGTERM', () => {
        cleanup();
        process.exit();
      });

      // Optionally handle other termination signals if needed
      process.on('SIGUSR1', () => {
        cleanup();
        process.exit();
      });
      process.on('SIGUSR2', () => {
        cleanup();
        process.exit();
      });

      // Handle uncaught exceptions to ensure cleanup
      process.on('uncaughtException', err => {
        log('Uncaught exception:', err);
        cleanup();
        process.exit(1);
      });
    });
  },
  runCmdSpawn: (cmd, args = [], callback) => {
    return new Promise(resolve => {
      const child = spawn(cmd, args);
      const stdoutChunks = [];
      const stderrChunks = [];
      child.stdout.on('data', chunk => stdoutChunks.push(chunk));
      child.stderr.on('data', chunk => stderrChunks.push(chunk));
      child.on('close', code => {
        let rs = {
          error: code !== 0 ? new Error(`Exited with code ${code}`) : null,
          success: code === 0,
          stdout: Buffer.concat(stdoutChunks),
          stdoutString: Buffer.concat(stdoutChunks).toString(),
          stderr: Buffer.concat(stderrChunks).toString()
        };
        callback(rs);
        resolve(rs);
      });
      const cleanup = () => {
        if (child) {
          log('Killing child process...');
          child.kill();
        }
      };
      process.on('exit', cleanup);
      process.on('SIGINT', () => {
        cleanup();
        process.exit();
      });
      process.on('SIGTERM', () => {
        cleanup();
        process.exit();
      });
      process.on('SIGUSR1', () => {
        cleanup();
        process.exit();
      });
      process.on('SIGUSR2', () => {
        cleanup();
        process.exit();
      });
      process.on('uncaughtException', err => {
        error('Uncaught exception:', err);
        cleanup();
        process.exit(1);
      });
    });
  }
};
module.exports = helper;

/***/ }),

/***/ "./main/handlers/accountHandlers.js":
/*!******************************************!*\
  !*** ./main/handlers/accountHandlers.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const {
  log,
  error
} = __webpack_require__(/*! ../../lib/logger */ "./lib/logger.js");
const accountHandlers = (accountManager, storageManager) => {
  return {
    'get-accounts': async () => {
      try {
        return await accountManager.getAllAccounts();
      } catch (error) {
        console.error('Error getting accounts:', error);
        return [];
      }
    },
    'add-account': async (event, account) => {
      try {
        return await accountManager.addAccount(account);
      } catch (error) {
        console.error('Error adding account:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'delete-account': async (event, accountId) => {
      try {
        return await accountManager.deleteAccount(accountId);
      } catch (error) {
        console.error('Error deleting account:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'update-account': async (event, accountId, data) => {
      try {
        const result = await storageManager.updateAccount(accountId, data);
        return result;
      } catch (error) {
        console.error('Error updating account:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'get-accounts-by-folder': async (event, folderId) => {
      try {
        const accounts = await accountManager.getAccountsByFolder(folderId);
        return {
          success: true,
          accounts
        };
      } catch (error) {
        console.error('Error getting accounts by folder:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'get-accounts-with-filter': async (event, filterOptions, sortOptions) => {
      try {
        const accounts = await storageManager.getAllAccounts();
        let filtered = [...accounts];

        // Apply filters
        if (filterOptions.folder && filterOptions.folder !== 'all') {
          filtered = filtered.filter(acc => acc.folderId === filterOptions.folder);
        }
        if (filterOptions.status && filterOptions.status !== 'all') {
          filtered = filtered.filter(acc => acc.status === filterOptions.status);
        }
        if (filterOptions.proxy) {
          if (filterOptions.proxy === 'with-proxy') {
            filtered = filtered.filter(acc => acc.proxy);
          } else if (filterOptions.proxy === 'without-proxy') {
            filtered = filtered.filter(acc => !acc.proxy);
          }
        }
        if (filterOptions.maxCurrentRooms !== undefined) {
          filtered = filtered.filter(acc => (acc.currentRooms || 0) <= filterOptions.maxCurrentRooms);
        }

        // Apply sorting
        if (sortOptions && sortOptions.sortBy) {
          filtered.sort((a, b) => {
            let aVal, bVal;
            switch (sortOptions.sortBy) {
              case 'currentRooms':
                aVal = a.currentRooms || 0;
                bVal = b.currentRooms || 0;
                break;
              case 'createdAt':
                aVal = new Date(a.createdAt || 0);
                bVal = new Date(b.createdAt || 0);
                break;
              case 'lastViewed':
                aVal = new Date(a.lastViewed || 0);
                bVal = new Date(b.lastViewed || 0);
                break;
              default:
                return 0;
            }
            if (sortOptions.sortOrder === 'desc') {
              return bVal > aVal ? 1 : bVal < aVal ? -1 : 0;
            } else {
              return aVal > bVal ? 1 : aVal < bVal ? -1 : 0;
            }
          });
        }
        return {
          success: true,
          accounts: filtered
        };
      } catch (error) {
        console.error('Error getting filtered accounts:', error);
        return {
          success: false,
          error: error.message,
          accounts: []
        };
      }
    },
    'import-accounts-from-text': async (event, text, folderId = 'default') => {
      try {
        const result = await storageManager.importAccountsFromText(text, folderId);
        return result;
      } catch (error) {
        console.error('Error importing accounts from text:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'import-accounts-with-proxy-from-text': async (event, text, folderId = 'default') => {
      try {
        const result = await storageManager.importAccountsWithProxyFromText(text, folderId);
        return {
          success: true,
          message: `Imported ${result.imported} accounts and ${result.proxies.length} proxies successfully`,
          accountCount: result.imported,
          proxyCount: result.proxies.length,
          total: result.total,
          accounts: result.accounts,
          proxies: result.proxies,
          errors: result.errors
        };
      } catch (error) {
        console.error('Error importing accounts with proxy from text:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'export-accounts-to-text': async (event, format, accountIds, folderId) => {
      try {
        const result = await storageManager.exportAccountsToText(format, accountIds, folderId);
        return result;
      } catch (error) {
        console.error('Error exporting accounts to text:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'import-accounts': async (event, folderId = 'default') => {
      try {
        // Mở file dialog để người dùng chọn file
        const {
          dialog
        } = __webpack_require__(/*! electron */ "electron");
        const fs = (__webpack_require__(/*! fs */ "fs").promises);
        const result = await dialog.showOpenDialog({
          title: 'Import Accounts',
          filters: [{
            name: 'Text Files',
            extensions: ['txt']
          }, {
            name: 'All Files',
            extensions: ['*']
          }],
          properties: ['openFile']
        });
        if (result.canceled || !result.filePaths.length) {
          return {
            success: false,
            error: 'No file selected'
          };
        }

        // Đọc nội dung file
        const filePath = result.filePaths[0];

        // Kiểm tra filePath có phải là string không
        if (typeof filePath !== 'string') {
          console.error('Invalid filePath type:', typeof filePath, filePath);
          return {
            success: false,
            error: 'Invalid file path type. Expected string.'
          };
        }
        const fileContent = await fs.readFile(filePath, 'utf8');

        // Import từ nội dung file
        const importResult = await storageManager.importAccountsFromText(fileContent, folderId);
        return importResult;
      } catch (error) {
        console.error('Error importing accounts from file:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'import-accounts-from-file': async (event, filePath, folderId = 'default') => {
      try {
        // Kiểm tra filePath có phải là string không
        if (typeof filePath !== 'string') {
          error('Invalid filePath type:', typeof filePath, filePath);
          return {
            success: false,
            error: 'Invalid file path type. Expected string.'
          };
        }
        const fs = (__webpack_require__(/*! fs */ "fs").promises);
        const fileContent = await fs.readFile(filePath, 'utf8');
        const result = await storageManager.importAccountsFromText(fileContent, folderId);
        return result;
      } catch (err) {
        error('Error importing accounts from file:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    'set-proxy-for-accounts': async (event, data) => {
      try {
        log('Setting proxy for accounts:', data);
        const {
          accountIds,
          proxyId,
          folderId,
          proxyFolderId,
          accountsPerProxy = 1,
          selectedProxies
        } = data;

        // Fix: Use proxyFolderId if folderId is not provided
        const targetFolderId = folderId || proxyFolderId;

        // Lấy cài đặt để sử dụng maxAccountsPerProxy
        const settings = await storageManager.getSettings();
        const maxAccountsPerProxy = settings.proxy?.maxAccountsPerProxy || 5;

        // DEBUG: Thêm logging chi tiết
        log('=== SET PROXY DEBUG INFO ===');
        log('Input parameters:', {
          accountIds: accountIds?.length || 0,
          proxyId,
          folderId,
          proxyFolderId,
          targetFolderId,
          accountsPerProxy,
          maxAccountsPerProxy,
          selectedProxies: selectedProxies?.length || 0
        });

        // Nếu có proxyId cụ thể, gán proxy đó
        if (proxyId && proxyId !== 'none') {
          log('Assigning specific proxy:', proxyId);
          let assignedCount = 0;
          const errors = [];
          const assignments = [];

          // Kiểm tra số lượng tài khoản đã gán cho proxy này
          const accounts = await storageManager.getAllAccounts();
          const accountsWithThisProxy = accounts.filter(acc => acc.proxyId === proxyId).length;
          if (accountsWithThisProxy + accountIds.length > maxAccountsPerProxy) {
            return {
              success: false,
              error: `Proxy này đã có ${accountsWithThisProxy} tài khoản, vượt quá giới hạn ${maxAccountsPerProxy} khi thêm ${accountIds.length} tài khoản mới`
            };
          }
          for (const accountId of accountIds) {
            try {
              const result = await storageManager.updateAccount(accountId, {
                proxyId: proxyId,
                updatedAt: new Date().toISOString()
              });
              if (result.success) {
                assignedCount++;
                assignments.push({
                  accountId,
                  proxyId
                });
              } else {
                errors.push(`Account ${accountId}: ${result.error}`);
              }
            } catch (error) {
              errors.push(`Account ${accountId}: ${error.message}`);
            }
          }
          return {
            success: assignedCount > 0,
            message: `Đã gán proxy cho ${assignedCount}/${accountIds.length} tài khoản`,
            assignedCount,
            totalCount: accountIds.length,
            assignments,
            errors: errors.length > 0 ? errors : undefined
          };
        }

        // Nếu proxyId là 'none', xóa proxy khỏi accounts
        if (proxyId === 'none') {
          log('Removing proxy from accounts');
          let removedCount = 0;
          const errors = [];
          for (const accountId of accountIds) {
            try {
              const result = await storageManager.updateAccount(accountId, {
                proxyId: null,
                updatedAt: new Date().toISOString()
              });
              if (result.success) {
                removedCount++;
              } else {
                errors.push(`Account ${accountId}: ${result.error}`);
              }
            } catch (error) {
              errors.push(`Account ${accountId}: ${error.message}`);
            }
          }
          return {
            success: removedCount > 0,
            message: `Đã xóa proxy khỏi ${removedCount}/${accountIds.length} tài khoản`,
            removedCount,
            totalCount: accountIds.length,
            errors: errors.length > 0 ? errors : undefined
          };
        }

        // Nếu có folderId hoặc selectedProxies, sử dụng bulk assignment logic
        if (targetFolderId || selectedProxies) {
          log('Using bulk assignment with targetFolderId:', targetFolderId, 'selectedProxies:', selectedProxies?.length || 0);

          // DEBUG: Kiểm tra proxies trong folder trước khi gọi bulkSetProxy
          if (targetFolderId) {
            const folderProxies = await storageManager.getProxiesByFolder(targetFolderId);
            log(`DEBUG - Proxies in folder ${targetFolderId}:`, folderProxies.length);
            log('Proxy details:', folderProxies.map(p => ({
              id: p.id,
              folderId: p.folderId,
              host: p.host || p.proxyInfo,
              status: p.status
            })));
            if (folderProxies.length === 0) {
              // Get all proxies to debug folder distribution
              const allProxies = await storageManager.getAllProxies();
              log('DEBUG - All proxies folder distribution:', allProxies.reduce((acc, p) => {
                const folderIdKey = p.folderId || 'undefined';
                acc[folderIdKey] = (acc[folderIdKey] || 0) + 1;
                return acc;
              }, {}));
              log('DEBUG - Sample proxies:', allProxies.slice(0, 3).map(p => ({
                id: p.id,
                folderId: p.folderId,
                host: p.host || p.proxyInfo
              })));
            }
          }

          // Sử dụng maxAccountsPerProxy từ settings thay vì accountsPerProxy từ input
          return await storageManager.bulkSetProxy(accountIds, targetFolderId, maxAccountsPerProxy, selectedProxies);
        }
        log('ERROR: Invalid proxy assignment parameters');
        return {
          success: false,
          error: 'Invalid proxy assignment parameters'
        };
      } catch (error) {
        console.error('Error setting proxy for accounts:', error);
        return {
          success: false,
          error: error.message
        };
      }
    }
  };
};
module.exports = accountHandlers;

/***/ }),

/***/ "./main/handlers/bulkOperationHandlers.js":
/*!************************************************!*\
  !*** ./main/handlers/bulkOperationHandlers.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const {
  log,
  error
} = __webpack_require__(/*! ../../lib/logger */ "./lib/logger.js");
const bulkOperationHandlers = storageManager => {
  return {
    'set-account-proxy': async (event, accountId, proxyId) => {
      try {
        log(`Setting proxy ${proxyId} for account ${accountId}`);

        // Kiểm tra proxy có tồn tại không
        const allProxies = await storageManager.getAllProxies();
        const proxy = allProxies.find(p => p.id === proxyId);
        if (proxyId && !proxy) {
          return {
            success: false,
            error: 'Proxy không tồn tại'
          };
        }
        const result = await storageManager.updateAccount(accountId, {
          proxyId: proxyId || null,
          updatedAt: new Date().toISOString()
        });
        log(`Proxy assignment result:`, result);
        return result;
      } catch (err) {
        error('Error setting account proxy:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    'bulk-set-proxy': async (event, accountIds, proxyFolderId, accountsPerProxy, selectedProxies = null) => {
      try {
        log(`Bulk setting proxy for ${accountIds.length} accounts`);
        log('RAW PARAMETERS:', {
          accountIds,
          proxyFolderId,
          accountsPerProxy,
          selectedProxies
        });
        log('selectedProxies type:', typeof selectedProxies, 'isArray:', Array.isArray(selectedProxies));
        let availableProxies = [];
        if (selectedProxies && selectedProxies.length > 0) {
          log('Using selected proxies:', selectedProxies);
          const allProxies = await storageManager.getAllProxies();
          availableProxies = allProxies.filter(proxy => selectedProxies.includes(proxy.id));
          log('Filtered to selected proxies:', availableProxies.length);
        } else {
          log('selectedProxies is empty/null, using all proxies from folder');
          // Fix: Đảm bảo getProxiesByFolder luôn trả về mảng hợp lệ
          const proxiesResult = await storageManager.getProxiesByFolder(proxyFolderId);
          availableProxies = Array.isArray(proxiesResult) ? proxiesResult : [];
          log(`Found ${availableProxies.length} proxies in folder ${proxyFolderId}`);
          log('Proxies details:', availableProxies.map(p => ({
            id: p.id,
            host: p.host || p.proxyInfo,
            folderId: p.folderId,
            status: p.status
          })));
          if (!availableProxies || availableProxies.length === 0) {
            // Thêm debug info để hiểu tại sao không có proxy
            const allProxies = await storageManager.getAllProxies();
            log(`Total proxies in system: ${allProxies.length}`);
            log('All proxies folder distribution:', allProxies.reduce((acc, p) => {
              const folderId = p.folderId || 'undefined';
              acc[folderId] = (acc[folderId] || 0) + 1;
              return acc;
            }, {}));
            return {
              success: false,
              error: 'Không tìm thấy proxy trong thư mục đã chọn'
            };
          }
        }
        if (availableProxies.length === 0) {
          return {
            success: false,
            error: 'Không có proxy khả dụng để gán'
          };
        }
        const settings = await storageManager.getSettings();
        const maxAccountsPerProxy = settings.maxAccountsPerProxy || accountsPerProxy || 5;
        const allAccounts = await storageManager.getAllAccounts();
        const proxiesWithSlots = availableProxies.map(proxy => {
          const assignedAccountsCount = allAccounts.filter(acc => acc.proxyId === proxy.id).length;
          const availableSlots = Math.max(0, maxAccountsPerProxy - assignedAccountsCount);
          return {
            ...proxy,
            availableSlots: Math.min(availableSlots, accountsPerProxy)
          };
        });
        const usableProxies = proxiesWithSlots.filter(proxy => proxy.availableSlots > 0);
        if (usableProxies.length === 0) {
          return {
            success: false,
            error: 'Tất cả proxy đã đạt giới hạn số lượng tài khoản'
          };
        }
        usableProxies.sort((a, b) => b.availableSlots - a.availableSlots);
        const totalAvailableSlots = usableProxies.reduce((sum, proxy) => sum + proxy.availableSlots, 0);
        if (totalAvailableSlots < accountIds.length) {
          return {
            success: false,
            error: `Không đủ proxy khả dụng! Cần ${accountIds.length} slot nhưng chỉ có ${totalAvailableSlots} slot khả dụng.`
          };
        }
        let assignedCount = 0;
        let accountIndex = 0;
        const errors = [];
        const assignments = [];
        for (const proxy of usableProxies) {
          if (accountIndex >= accountIds.length) break;
          for (let i = 0; i < proxy.availableSlots && accountIndex < accountIds.length; i++) {
            const accountId = accountIds[accountIndex];
            try {
              const result = await storageManager.updateAccount(accountId, {
                proxyId: proxy.id,
                updatedAt: new Date().toISOString()
              });
              if (result.success) {
                assignedCount++;
                assignments.push({
                  accountId,
                  proxyId: proxy.id,
                  proxyHost: proxy.host || proxy.proxyInfo
                });
              } else {
                errors.push(`Account ${accountId}: ${result.error}`);
              }
            } catch (error) {
              errors.push(`Account ${accountId}: ${error.message}`);
            }
            accountIndex++;
          }
        }
        return {
          success: assignedCount > 0,
          code: 'proxyAssigned',
          params: {
            assigned: assignedCount,
            total: accountIds.length
          },
          assignedCount,
          totalCount: accountIds.length,
          assignments,
          errors: errors.length > 0 ? errors : undefined
        };
      } catch (error) {
        log('Error in bulk-set-proxy:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'bulk-set-status': async (event, data) => {
      try {
        const {
          accountIds,
          status
        } = data;

        // Cập nhật trạng thái cho từng account
        let updateCount = 0;
        const errors = [];
        for (const accountId of accountIds) {
          try {
            const result = await storageManager.updateAccount(accountId, {
              status: status,
              updatedAt: new Date().toISOString()
            });
            if (result.success) {
              updateCount++;
            } else {
              errors.push(`Account ${accountId}: ${result.error}`);
            }
          } catch (error) {
            errors.push(`Account ${accountId}: ${error.message}`);
          }
        }
        return {
          success: updateCount > 0,
          message: `Đã cập nhật trạng thái ${updateCount}/${accountIds.length} tài khoản`,
          updateCount,
          totalCount: accountIds.length,
          errors: errors.length > 0 ? errors : undefined
        };
      } catch (error) {
        log('Error in bulk set status:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'bulk-remove-proxy': async (event, accountIds) => {
      try {
        const result = await storageManager.bulkRemoveProxy(accountIds);
        return result;
      } catch (error) {
        log('Error bulk removing proxy:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'bulk-move-to-folder': async (event, accountIds, folderId) => {
      try {
        const result = await storageManager.bulkMoveToFolder(accountIds, folderId);
        return result;
      } catch (error) {
        log('Error bulk moving to folder:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'bulk-delete-accounts': async (event, accountIds) => {
      try {
        let deleted = 0;
        for (const accountId of accountIds) {
          const result = await storageManager.deleteAccount(accountId);
          if (result.success) deleted++;
        }
        return {
          success: true,
          deleted,
          message: `Đã xóa ${deleted} tài khoản`
        };
      } catch (error) {
        log('Error bulk deleting accounts:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'bulk-delete-proxies': async (event, proxyIds) => {
      try {
        let deleted = 0;
        for (const proxyId of proxyIds) {
          const result = await storageManager.deleteProxy(proxyId);
          if (result.success) deleted++;
        }
        return {
          success: true,
          deleted,
          message: `Đã xóa ${deleted} proxy`
        };
      } catch (error) {
        log('Error bulk deleting proxies:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'bulk-export-accounts': async (event, accountIds, format) => {
      try {
        const result = await storageManager.exportAccountsToText(format, accountIds);
        return result;
      } catch (error) {
        log('Error bulk exporting accounts:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'bulk-export-proxies': async (event, proxyIds, format) => {
      try {
        const result = await storageManager.exportProxies(format, proxyIds);
        return result;
      } catch (error) {
        log('Error bulk exporting proxies:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'validate-proxy-assignment': async (event, accountIds, proxyId) => {
      try {
        const allProxies = await storageManager.getAllProxies();
        const proxy = allProxies.find(p => p.id === proxyId);
        if (!proxy) {
          return {
            success: false,
            error: 'Proxy không tồn tại'
          };
        }
        const allAccounts = await storageManager.getAllAccounts();
        const validAccountIds = accountIds.filter(id => allAccounts.find(acc => acc.id === id));
        if (validAccountIds.length !== accountIds.length) {
          return {
            success: false,
            error: `${accountIds.length - validAccountIds.length} tài khoản không tồn tại`
          };
        }
        return {
          success: true,
          validAccountIds,
          proxy: {
            id: proxy.id,
            host: proxy.host,
            port: proxy.port,
            status: proxy.status
          }
        };
      } catch (error) {
        log('Error validating proxy assignment:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'get-account-proxy-details': async (event, accountId) => {
      try {
        const accounts = await storageManager.getAllAccounts();
        const account = accounts.find(acc => acc.id === accountId);
        if (!account || !account.proxyId) {
          return {
            success: true,
            proxy: null
          };
        }
        const proxies = await storageManager.getAllProxies();
        const proxy = proxies.find(p => p.id === account.proxyId);
        return {
          success: true,
          proxy
        };
      } catch (error) {
        log('Error getting account proxy details:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'bulk-move-accounts-to-folder': async (event, data) => {
      try {
        const {
          accountIds,
          folderId
        } = data;

        // Kiểm tra xem folder tồn tại không
        const folder = await storageManager.getFolderById(folderId);
        if (!folder) {
          return {
            success: false,
            error: 'Folder not found'
          };
        }

        // Chuyển từng account vào folder
        let moveCount = 0;
        const errors = [];
        for (const accountId of accountIds) {
          try {
            const result = await storageManager.updateAccount(accountId, {
              folderId: folderId,
              updatedAt: new Date().toISOString()
            });
            if (result.success) {
              moveCount++;
            } else {
              errors.push(`Account ${accountId}: ${result.error}`);
            }
          } catch (error) {
            errors.push(`Account ${accountId}: ${error.message}`);
          }
        }
        return {
          success: moveCount > 0,
          message: `Đã chuyển ${moveCount}/${accountIds.length} tài khoản`,
          moveCount,
          totalCount: accountIds.length,
          errors: errors.length > 0 ? errors : undefined
        };
      } catch (error) {
        log('Error in bulk move accounts to folder:', error);
        return {
          success: false,
          error: error.message
        };
      }
    }
  };
};
module.exports = bulkOperationHandlers;

/***/ }),

/***/ "./main/handlers/folderHandlers.js":
/*!*****************************************!*\
  !*** ./main/handlers/folderHandlers.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const {
  log,
  error
} = __webpack_require__(/*! ../../lib/logger */ "./lib/logger.js");
const folderHandlers = storageManager => {
  return {
    'get-folders': async (event, type) => {
      try {
        log(`📬 get-folders handler called with type: ${type}`);
        const result = await storageManager.getAllFolders(type);
        log('📬 get-folders result:', JSON.stringify(result));

        // Ensure we return the correct structure
        if (result && result.success) {
          if (type === 'proxies' && result.folders && result.folders.proxies) {
            // Convert to simple array format for easier handling in frontend
            log('📬 Simplifying response for proxies:', Array.isArray(result.folders.proxies) ? result.folders.proxies.length : 'not array');
            return {
              success: true,
              folders: Array.isArray(result.folders.proxies) ? result.folders.proxies : []
            };
          }
        }
        return result;
      } catch (error) {
        error('Error getting folders:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'create-folder': async (event, type, folderData) => {
      try {
        const result = await storageManager.createFolder(type, folderData);
        return result;
      } catch (error) {
        error('Error creating folder:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'delete-folder': async (event, type, folderId) => {
      try {
        const result = await storageManager.deleteFolder(type, folderId);
        return result;
      } catch (error) {
        error('Error deleting folder:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    // Reset folders data to default
    'reset-folders': async () => {
      try {
        const defaultFolders = await storageManager.resetFoldersData();
        return {
          success: true,
          data: defaultFolders
        };
      } catch (error) {
        error('Error resetting folders:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    // Reset folders to default
    'reset-folders-to-default': async () => {
      try {
        const result = await storageManager.resetFoldersToDefault();
        return result;
      } catch (error) {
        error('Error resetting folders to default:', error);
        return {
          success: false,
          error: error.message
        };
      }
    }
  };
};
module.exports = folderHandlers;

/***/ }),

/***/ "./main/handlers/notificationHandlers.js":
/*!***********************************************!*\
  !*** ./main/handlers/notificationHandlers.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const {
  log,
  error
} = __webpack_require__(/*! ../../lib/logger */ "./lib/logger.js");
const notificationManager = __webpack_require__(/*! ../../lib/notification-manager */ "./lib/notification-manager.js");
const {
  dialog,
  BrowserWindow
} = __webpack_require__(/*! electron */ "electron");
const notificationHandlers = () => {
  return {
    /**
     * Lấy trạng thái thông báo
     */
    'get-notification-settings': async () => {
      try {
        return {
          success: true,
          data: {
            enabled: notificationManager.enabled,
            soundEnabled: notificationManager.soundEnabled
          }
        };
      } catch (err) {
        error('Error getting notification settings:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    /**
     * Bật/tắt thông báo
     */
    'toggle-notifications': async (event, enabled) => {
      try {
        notificationManager.setEnabled(Boolean(enabled));
        log(`📢 Thông báo đã được ${enabled ? 'bật' : 'tắt'}`);
        return {
          success: true,
          enabled: notificationManager.enabled
        };
      } catch (err) {
        error('Error toggling notifications:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    /**
     * Bật/tắt âm thanh thông báo
     */
    'toggle-notification-sound': async (event, enabled) => {
      try {
        notificationManager.setSoundEnabled(Boolean(enabled));
        log(`🔊 Âm thanh thông báo đã được ${enabled ? 'bật' : 'tắt'}`);
        return {
          success: true,
          soundEnabled: notificationManager.soundEnabled
        };
      } catch (err) {
        error('Error toggling notification sound:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    /**
     * Lấy lịch sử thông báo
     */
    'get-notification-history': async () => {
      try {
        const history = notificationManager.getHistory();
        return {
          success: true,
          data: history
        };
      } catch (err) {
        error('Error getting notification history:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    /**
     * Gửi thông báo test
     */
    'send-test-notification': async event => {
      try {
        log('📢 Gửi thông báo test');

        // Sử dụng phương thức notifyTest của notificationManager
        const notification = notificationManager.notifyTest();

        // Hiển thị dialog bất kể kết quả của Notification API
        // try {
        //   const focusedWindow = BrowserWindow.getFocusedWindow() || BrowserWindow.getAllWindows()[0];

        //   dialog.showMessageBox(focusedWindow, {
        //     type: 'info',
        //     title: 'Thông báo thử nghiệm',
        //     message: 'Đây là thông báo thử nghiệm sử dụng dialog.',
        //     detail: 'Nếu bạn thấy thông báo này, tính năng dialog đang hoạt động tốt.',
        //     buttons: ['OK']
        //   });

        //   log('📢 Đã hiển thị dialog thông báo thử nghiệm');
        // } catch (dialogErr) {
        //   error('❌ Lỗi khi hiển thị dialog thông báo thử nghiệm:', dialogErr);
        // }

        return {
          success: true,
          sent: true
        };
      } catch (err) {
        error('Error sending test notification:', err);
        return {
          success: false,
          error: err.message
        };
      }
    }
  };
};
module.exports = notificationHandlers;

/***/ }),

/***/ "./main/handlers/proxyHandlers.js":
/*!****************************************!*\
  !*** ./main/handlers/proxyHandlers.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const {
  log,
  error
} = __webpack_require__(/*! ../../lib/logger */ "./lib/logger.js");
const proxyHandlers = (proxyManager, storageManager) => {
  return {
    'get-proxies': async () => {
      try {
        return await proxyManager.getAllProxies();
      } catch (error) {
        console.error('Error getting proxies:', error);
        return [];
      }
    },
    'add-proxy': async (event, proxy) => {
      try {
        return await proxyManager.addProxy(proxy);
      } catch (error) {
        console.error('Error adding proxy:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'delete-proxy': async (event, proxyId) => {
      try {
        return await proxyManager.deleteProxy(proxyId);
      } catch (error) {
        console.error('Error deleting proxy:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'test-proxy': async (event, proxyId) => {
      try {
        const result = await proxyManager.testProxy(proxyId);
        return {
          success: true,
          result
        };
      } catch (error) {
        console.error('Error testing proxy:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'get-proxies-by-folder': async (event, folderId) => {
      try {
        const proxies = await proxyManager.getProxiesByFolder(folderId);
        return {
          success: true,
          proxies
        };
      } catch (error) {
        console.error('Error getting proxies by folder:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'get-proxies-with-filter': async (event, filterOptions, sortOptions) => {
      try {
        const proxies = await proxyManager.getAllProxies();
        let filtered = [...proxies];

        // Apply filters
        if (filterOptions.folder && filterOptions.folder !== 'all') {
          filtered = filtered.filter(proxy => proxy.folderId === filterOptions.folder);
        }
        if (filterOptions.status && filterOptions.status !== 'all') {
          filtered = filtered.filter(proxy => proxy.status === filterOptions.status);
        }
        if (filterOptions.type && filterOptions.type !== 'all') {
          filtered = filtered.filter(proxy => proxy.type === filterOptions.type);
        }
        if (filterOptions.searchTerm) {
          const searchTerm = filterOptions.searchTerm.toLowerCase();
          filtered = filtered.filter(proxy => proxy.host && proxy.host.toLowerCase().includes(searchTerm) || proxy.proxyInfo && proxy.proxyInfo.toLowerCase().includes(searchTerm) || proxy.description && proxy.description.toLowerCase().includes(searchTerm));
        }

        // Apply sorting
        if (sortOptions && sortOptions.sortBy) {
          filtered.sort((a, b) => {
            let aVal, bVal;
            switch (sortOptions.sortBy) {
              case 'createdAt':
                aVal = new Date(a.createdAt || 0);
                bVal = new Date(b.createdAt || 0);
                break;
              case 'status':
                const statusOrder = {
                  'active': 1,
                  'error': 2,
                  'untested': 3
                };
                aVal = statusOrder[a.status] || 4;
                bVal = statusOrder[b.status] || 4;
                break;
              case 'lastTested':
                aVal = new Date(a.lastTested || 0);
                bVal = new Date(b.lastTested || 0);
                break;
              case 'host':
                aVal = a.host || '';
                bVal = b.host || '';
                break;
              default:
                return 0;
            }
            if (sortOptions.sortOrder === 'desc') {
              return bVal > aVal ? 1 : bVal < aVal ? -1 : 0;
            } else {
              return aVal > bVal ? 1 : aVal < bVal ? -1 : 0;
            }
          });
        }

        // Apply pagination
        const page = filterOptions.page || 1;
        const pageSize = filterOptions.pageSize || 20;
        const startIndex = (page - 1) * pageSize;
        const endIndex = startIndex + pageSize;
        const paginatedProxies = filtered.slice(startIndex, endIndex);
        return {
          success: true,
          proxies: paginatedProxies,
          totalCount: filtered.length,
          totalPages: Math.ceil(filtered.length / pageSize),
          currentPage: page
        };
      } catch (error) {
        console.error('Error getting filtered proxies:', error);
        return {
          success: false,
          error: error.message,
          proxies: [],
          totalCount: 0,
          totalPages: 0
        };
      }
    },
    'import-proxies-from-text': async (event, text, folderId = 'default') => {
      try {
        log(`📥 Importing proxies from text. Length: ${text.length}, FolderId: ${folderId}`);
        if (!folderId || folderId === '') {
          folderId = 'default';
          log('📥 FolderId was empty, using default folder');
        }

        // Gọi qua proxyManager thay vì storageManager
        const result = await proxyManager.importFromText(text, folderId);
        log('📥 Import result:', JSON.stringify(result));
        if (!result.success) {
          error('📥 Import failed:', result.error);
          return {
            success: false,
            error: result.error
          };
        }
        return {
          success: true,
          message: `Đã nhập ${result.imported || 0} proxy thành công`,
          imported: result.imported || 0,
          total: result.total || 0,
          results: result.results || []
        };
      } catch (err) {
        error('Error importing proxies from text:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    'import-proxies': async (event, folderId = 'default') => {
      try {
        // Mở file dialog để người dùng chọn file
        const {
          dialog
        } = __webpack_require__(/*! electron */ "electron");
        const fs = (__webpack_require__(/*! fs */ "fs").promises);
        const result = await dialog.showOpenDialog({
          title: 'Import Proxies',
          filters: [{
            name: 'Text Files',
            extensions: ['txt']
          }, {
            name: 'All Files',
            extensions: ['*']
          }],
          properties: ['openFile']
        });
        if (result.canceled || !result.filePaths.length) {
          return {
            success: false,
            error: 'No file selected'
          };
        }

        // Đọc nội dung file
        const filePath = result.filePaths[0];
        const fileContent = await fs.readFile(filePath, 'utf8');

        // Import từ nội dung file
        const importResult = await proxyManager.importFromText(fileContent, folderId);
        return {
          success: true,
          message: `Imported ${importResult.imported} proxies successfully`,
          count: importResult.imported,
          total: importResult.total,
          proxies: importResult.proxies
        };
      } catch (error) {
        console.error('Error importing proxies from file:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'import-proxies-from-file': async (event, filePath, folderId = 'default') => {
      try {
        // Validate filePath
        if (!filePath || typeof filePath !== 'string') {
          return {
            success: false,
            error: 'Invalid file path provided. File path must be a valid string.'
          };
        }
        const fs = (__webpack_require__(/*! fs */ "fs").promises);
        const fileContent = await fs.readFile(filePath, 'utf8');
        const result = await proxyManager.importFromText(fileContent, folderId);
        return {
          success: true,
          message: `Imported ${result.imported} proxies successfully`,
          count: result.imported,
          total: result.total,
          proxies: result.proxies
        };
      } catch (error) {
        console.error('Error importing proxies from file:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'bulk-move-proxies-to-folder': async (event, proxyIds, folderId) => {
      try {
        console.log(`📤 Bulk moving ${proxyIds.length} proxies to folder ${folderId}`);
        const result = await proxyManager.bulkMoveProxiesToFolder(proxyIds, folderId);
        console.log(`📤 Bulk move result:`, result);
        return result;
      } catch (error) {
        console.error('Error bulk moving proxies to folder:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'bulk-test-proxies': async (event, proxyIds) => {
      try {
        console.log(`🔍 Bulk testing ${proxyIds.length} proxies`);
        const result = await proxyManager.bulkTestProxies(proxyIds);
        console.log(`🔍 Bulk test result:`, result);
        return result;
      } catch (error) {
        console.error('Error bulk testing proxies:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'export-proxies': async (event, format, proxyIds) => {
      try {
        console.log(`📤 Exporting proxies with format ${format}`);
        const result = await proxyManager.exportProxies(format, proxyIds);
        console.log(`📤 Export result:`, result);
        return result;
      } catch (error) {
        console.error('Error exporting proxies:', error);
        return {
          success: false,
          error: error.message
        };
      }
    }
  };
};
module.exports = proxyHandlers;

/***/ }),

/***/ "./main/handlers/roomHandlers.js":
/*!***************************************!*\
  !*** ./main/handlers/roomHandlers.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const {
  log,
  error
} = __webpack_require__(/*! ../../lib/logger */ "./lib/logger.js");
const GroupView = __webpack_require__(/*! ../businesses/Viewer */ "./main/businesses/Viewer.js");
const helper = __webpack_require__(/*! ../businesses/helper */ "./main/businesses/helper.js");
const notificationManager = __webpack_require__(/*! ../../lib/notification-manager */ "./lib/notification-manager.js");
const {
  dialog,
  BrowserWindow
} = __webpack_require__(/*! electron */ "electron");
const roomHandlers = (storageManager, viewerManager) => {
  return {
    'get-rooms': async () => {
      try {
        const rooms = await storageManager.getAllRooms();
        return {
          success: true,
          rooms
        };
      } catch (error) {
        console.error('Error getting rooms:', error);
        return {
          success: false,
          error: error.message,
          rooms: []
        };
      }
    },
    'add-room': async (event, roomData) => {
      try {
        log("roomData", roomData);
        let roomId = roomData.roomUrl.trim();

        // Nếu là URL TikTok, chỉ lấy username
        if (roomData.roomUrl.includes('tiktok.com')) {
          // Extract từ format @username/live
          const usernameMatch = roomData.roomUrl.match(/@([^\/]+)\/live/);
          if (usernameMatch) {
            roomId = usernameMatch[1]; // Chỉ lấy username
          } else {
            // Fallback: extract từ các format khác nếu có
            const urlMatch = roomData.roomUrl.match(/\/live\/(\w+)/);
            if (urlMatch) {
              roomId = urlMatch[1];
            }
          }
        }
        // Nếu không phải URL, giữ nguyên input (đó chính là room_id)
        let avatarThumb = null;
        let roomUsername = roomId;
        let roomStatus = 2;
        let startCount = 0;
        if (!helper.isNumeric(roomId)) {
          let dataUser = await helper.getRoomId3({
            name: roomId
          });
          log(dataUser.data.user.avatarThumb);
          log(dataUser.data.user.roomId);
          log(dataUser.data.user.status);
          if (dataUser && dataUser.data && dataUser.data.user && dataUser.data.user.roomId) {
            roomId = dataUser.data.user.roomId;
          }
          if (dataUser && dataUser.data && dataUser.data.user && dataUser.data.user.status) {
            roomStatus = dataUser.data.user.status;
          }
          if (dataUser && dataUser.data && dataUser.data.user && dataUser.data.user.avatarThumb) {
            avatarThumb = dataUser.data.user.avatarThumb;
          }
        }
        let dataRoom = await helper.getRoomInfo4({
          room_id: roomId
        });
        if (dataRoom && dataRoom.display_id) {
          roomUsername = dataRoom.display_id;
        }
        if (dataRoom && !dataRoom.is_alive) {
          roomStatus = 4;
        }
        if (dataRoom && dataRoom.view_count) {
          startCount = dataRoom.view_count;
        }
        if (dataRoom && dataRoom.avatarThumb) {
          avatarThumb = dataRoom.avatarThumb;
        }
        if (roomStatus != 2) {
          return {
            success: false,
            error: 'Phòng live đã kết thúc'
          };
        }

        // Generate unique ID for the room
        const uniqueId = `room_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;

        // Đảm bảo room có uid và id
        roomData.uid = uniqueId;
        roomData.id = uniqueId; // id và uid giống nhau để đảm bảo tương thích

        roomData.roomId = roomId;
        roomData.avatarThumb = avatarThumb;
        roomData.roomUsername = roomUsername;
        roomData.startCount = startCount;
        roomData.currentViewers = 0;
        roomData.status = 'watching';
        log(`🆔 Created room with uid=${roomData.uid}, id=${roomData.id}, roomId=${roomData.roomId}`);
        const result = await storageManager.addRoom(roomData);

        // Gửi thông báo khi thêm phòng mới thành công
        if (result.success) {
          notificationManager.notifyNewRoom(roomData);
          log(`📲 Đã gửi thông báo cho room mới: ${roomData.roomUsername || roomData.roomId}`);
        }
        return result;
      } catch (err) {
        error('Error adding room:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    'delete-room': async (event, roomId) => {
      try {
        const result = await storageManager.deleteRoom(roomId);
        return result;
      } catch (err) {
        error('Error deleting room:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    'stop-room': async (event, roomId) => {
      try {
        // Kiểm tra roomId không được null
        if (!roomId) {
          error('❌ Không thể dừng room: roomId là null');
          return {
            success: false,
            error: 'ROOM_ID_NULL'
          };
        }

        // Lấy thông tin của room trước khi dừng để hiển thị thông báo
        const rooms = await storageManager.getAllRooms();
        const roomData = rooms.find(room => room.id === roomId);

        // Dừng viewers trước
        await GroupView.stopViewers({
          task_id: roomId
        });

        // Cập nhật trạng thái room
        const result = await storageManager.updateRoom(roomId, {
          status: 'stopped',
          stoppedAt: new Date().toISOString()
        });

        // Giải phóng các accounts
        try {
          await storageManager.releaseAccountsFromRoom(roomId);
          log(`✅ Released accounts from stopped room ${roomId}`);
        } catch (releaseErr) {
          error(`❌ Error releasing accounts from room ${roomId}:`, releaseErr);
        }

        // Gửi thông báo khi room đã dừng
        if (roomData) {
          // Sử dụng Notification API
          notificationManager.notifyRoomStopped(roomData);

          // Hiển thị dialog thay thế
          // try {
          //   const focusedWindow = BrowserWindow.getFocusedWindow() || BrowserWindow.getAllWindows()[0];
          //   if (focusedWindow) {
          //     const roomIdentifier = roomData.roomName || roomData.roomId || roomData.roomUsername || 'Unknown';
          //     dialog.showMessageBox(focusedWindow, {
          //       type: 'info',
          //       title: 'Room đã dừng phát',
          //       message: `Room "${roomIdentifier}" đã dừng phát sóng.`,
          //       buttons: ['OK']
          //     });
          //   }
          // } catch (dialogErr) {
          //   error(`❌ Lỗi khi hiển thị dialog thông báo room dừng: ${dialogErr}`);
          // }

          log(`📲 Đã gửi thông báo cho room ${roomId} dừng phát sóng`);
        }
        log(`Room ${roomId} stopped successfully`);
        return result;
      } catch (err) {
        error('Error stopping room:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    'update-room': async (event, roomId, data) => {
      try {
        const result = await storageManager.updateRoom(roomId, data);
        return result;
      } catch (error) {
        console.error('Error updating room:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'duplicate-room': async (event, roomId, newData) => {
      try {
        const result = await storageManager.duplicateRoom(roomId, newData);
        return result;
      } catch (error) {
        console.error('Error duplicating room:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'get-rooms-with-filter': async (event, filterOptions, sortOptions) => {
      try {
        const rooms = await storageManager.getAllRooms();
        let filtered = [...rooms];

        // Apply filters
        if (filterOptions.status && filterOptions.status !== 'all') {
          filtered = filtered.filter(room => room.status === filterOptions.status);
        }
        if (filterOptions.minViewers !== undefined) {
          filtered = filtered.filter(room => (room.currentViewers || 0) >= filterOptions.minViewers);
        }
        if (filterOptions.maxViewers !== undefined) {
          filtered = filtered.filter(room => (room.currentViewers || 0) <= filterOptions.maxViewers);
        }
        if (filterOptions.minDuration !== undefined) {
          filtered = filtered.filter(room => (room.duration || 0) >= filterOptions.minDuration);
        }
        if (filterOptions.maxDuration !== undefined) {
          filtered = filtered.filter(room => (room.duration || 0) <= filterOptions.maxDuration);
        }
        if (filterOptions.searchTerm) {
          filtered = filtered.filter(room => room.roomUrl.toLowerCase().includes(filterOptions.searchTerm.toLowerCase()) || room.note && room.note.toLowerCase().includes(filterOptions.searchTerm.toLowerCase()));
        }

        // Apply sorting
        if (sortOptions && sortOptions.sortBy) {
          filtered.sort((a, b) => {
            let aVal, bVal;
            switch (sortOptions.sortBy) {
              case 'createdAt':
                aVal = new Date(a.createdAt || 0);
                bVal = new Date(b.createdAt || 0);
                break;
              case 'currentViewers':
                aVal = a.currentViewers || 0;
                bVal = b.currentViewers || 0;
                break;
              case 'status':
                const statusOrder = {
                  'watching': 1,
                  'stopped': 2,
                  'completed': 3
                };
                aVal = statusOrder[a.status] || 4;
                bVal = statusOrder[b.status] || 4;
                break;
              default:
                return 0;
            }
            if (sortOptions.sortOrder === 'desc') {
              return bVal > aVal ? 1 : bVal < aVal ? -1 : 0;
            } else {
              return aVal > bVal ? 1 : aVal < bVal ? -1 : 0;
            }
          });
        }

        // Apply pagination
        const page = filterOptions.page || 1;
        const pageSize = filterOptions.pageSize || 20;
        const startIndex = (page - 1) * pageSize;
        const endIndex = startIndex + pageSize;
        const paginatedRooms = filtered.slice(startIndex, endIndex);
        return {
          success: true,
          rooms: paginatedRooms,
          totalCount: filtered.length,
          totalPages: Math.ceil(filtered.length / pageSize),
          currentPage: page
        };
      } catch (error) {
        console.error('Error getting filtered rooms:', error);
        return {
          success: false,
          error: error.message,
          rooms: [],
          totalCount: 0,
          totalPages: 0
        };
      }
    },
    'start-room-viewer': async (event, config) => {
      try {
        const {
          roomId,
          accounts,
          duration
        } = config;

        // Lấy thông tin room để có roomId thực
        const rooms = await storageManager.getAllRooms();
        const room = rooms.find(r => r.id === roomId);
        if (!room) {
          return {
            success: false,
            error: 'Room not found'
          };
        }

        // Cập nhật trạng thái room thành "watching"
        await storageManager.updateRoom(roomId, {
          status: 'watching',
          startedAt: new Date().toISOString(),
          currentViewers: accounts.length
        });

        // Thêm accounts vào activeRooms với room.roomId
        for (const account of accounts) {
          await storageManager.addAccountToRoom(account.id, room.roomId);
        }
        console.log(`Started room viewer for room ${roomId} with ${accounts.length} accounts`);
        return {
          success: true,
          message: 'Room viewer started successfully'
        };
      } catch (error) {
        console.error('Error starting room viewer:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'startRoomViewer': async (event, config) => {
      try {
        const {
          roomId,
          accounts,
          duration
        } = config;
        const rooms = await storageManager.getAllRooms();
        const room = rooms.find(r => r.id === roomId);
        if (!room) {
          return {
            success: false,
            error: 'Room not found'
          };
        }

        // Lấy tất cả proxies để map với proxyId
        const allProxies = await storageManager.getAllProxies();
        const proxyMap = new Map();
        allProxies.forEach(proxy => {
          proxyMap.set(proxy.id, proxy.proxyInfo);
        });

        // Cập nhật trạng thái room thành "watching"
        await storageManager.updateRoom(roomId, {
          status: 'watching',
          startedAt: new Date().toISOString(),
          currentViewers: accounts.length
        });

        // Thêm accounts vào activeRooms với room.roomId
        for (const account of accounts) {
          await storageManager.addAccountToRoom(account.id, room.roomId);
        }
        console.log(`Started room viewer for room ${roomId} with ${accounts.length} accounts`);

        // Tạo accountsList với proxy info đầy đủ
        let accountsList = accounts.map(acc => {
          console.log(acc);
          const proxyInfo = acc.proxyId ? proxyMap.get(acc.proxyId) : 'no-proxy';
          const normalizedProxy = normalizeProxyFormat(proxyInfo);
          // console.log("proxyInfo",proxyInfo,"normalizedProxy",normalizedProxy)
          return `${acc.cookie};username=${acc.username};proxy=${normalizedProxy};`.replace(/;;/g, ';').replace(/; /g, ';');
        });
        await GroupView.startViewers({
          accounts: accountsList,
          task_id: roomId,
          room_id: room.roomId,
          proxy: null
        });
        // console.log(`Accounts: ${accountsList.join(', ')}`)

        return {
          success: true,
          message: 'Room viewer started successfully'
        };
      } catch (error) {
        console.error('Error starting room viewer:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'get-room-stats': async (event, roomId) => {
      try {
        if (viewerManager && typeof viewerManager.getRoomStats === 'function') {
          return viewerManager.getRoomStats(roomId);
        }
        return {
          currentViewers: 0,
          status: 'stopped',
          accounts: []
        };
      } catch (error) {
        console.error('Error getting room stats:', error);
        return {
          currentViewers: 0,
          status: 'stopped',
          accounts: []
        };
      }
    },
    'update-room-stats': async (event, roomId, stats) => {
      try {
        if (viewerManager && typeof viewerManager.updateRoomStats === 'function') {
          viewerManager.updateRoomStats(roomId, stats);
          return {
            success: true
          };
        }
        return {
          success: false,
          error: 'ViewerManager not available'
        };
      } catch (error) {
        console.error('Error updating room stats:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'update-room-viewers': async (event, roomId, viewerCount) => {
      try {
        const result = await storageManager.updateRoom(roomId, {
          currentViewers: viewerCount,
          lastViewerUpdate: new Date().toISOString()
        });
        return result;
      } catch (error) {
        console.error('Error updating room viewers:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'add-room-and-start-viewer': async (event, roomData, accounts) => {
      try {
        log("🔄 Xử lý add-room-and-start-viewer với", roomData.roomUrl, "và", accounts.length, "accounts");
        let roomId = roomData.roomUrl.trim();

        // Nếu là URL TikTok, chỉ lấy username
        if (roomData.roomUrl.includes('tiktok.com')) {
          // Extract từ format @username/live
          const usernameMatch = roomData.roomUrl.match(/@([^\/]+)\/live/);
          if (usernameMatch) {
            roomId = usernameMatch[1]; // Chỉ lấy username
          } else {
            // Fallback: extract từ các format khác nếu có
            const urlMatch = roomData.roomUrl.match(/\/live\/(\w+)/);
            if (urlMatch) {
              roomId = urlMatch[1];
            }
          }
        }
        // Nếu không phải URL, giữ nguyên input (đó chính là room_id)
        let avatarThumb = null;
        let roomUsername = roomId;
        let roomStatus = 2;
        let startCount = 0;
        if (!helper.isNumeric(roomId)) {
          let dataUser = await helper.getRoomId3({
            name: roomId
          });
          log(dataUser.data.user.avatarThumb);
          log(dataUser.data.user.roomId);
          log(dataUser.data.user.status);
          if (dataUser && dataUser.data && dataUser.data.user && dataUser.data.user.roomId) {
            roomId = dataUser.data.user.roomId;
          }
          if (dataUser && dataUser.data && dataUser.data.user && dataUser.data.user.status) {
            roomStatus = dataUser.data.user.status;
          }
          if (dataUser && dataUser.data && dataUser.data.user && dataUser.data.user.avatarThumb) {
            avatarThumb = dataUser.data.user.avatarThumb;
          }
        }
        let dataRoom = await helper.getRoomInfo4({
          room_id: roomId
        });
        if (dataRoom && dataRoom.display_id) {
          roomUsername = dataRoom.display_id;
        }
        if (dataRoom && !dataRoom.is_alive) {
          roomStatus = 4;
        }
        if (dataRoom && dataRoom.view_count) {
          startCount = dataRoom.view_count;
        }
        if (dataRoom && dataRoom.avatarThumb) {
          avatarThumb = dataRoom.avatarThumb;
        }
        if (roomStatus != 2) {
          return {
            success: false,
            error: 'Phòng live đã kết thúc'
          };
        }

        // Generate unique ID for the room
        const uniqueId = `room_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;

        // Đảm bảo room có uid và id
        roomData.uid = uniqueId;
        roomData.id = uniqueId; // id và uid giống nhau để đảm bảo tương thích

        roomData.roomId = roomId;
        roomData.avatarThumb = avatarThumb;
        roomData.roomUsername = roomUsername;
        roomData.startCount = startCount;
        roomData.currentViewers = accounts.length;
        roomData.status = 'watching';
        roomData.startedAt = new Date().toISOString();
        roomData.realViewers = startCount;
        roomData.lastTimeCheckViewers = new Date().toISOString();
        log(`🆔 Created room with uid=${roomData.uid}, id=${roomData.id}, roomId=${roomData.roomId}`);

        // 1. Lưu room vào database
        const result = await storageManager.addRoom(roomData);
        if (!result.success) {
          console.error('❌ Lỗi khi thêm room:', result.error);
          return result;
        }
        // Thêm vào file history riêng thay vì rooms.json
        await storageManager.addViewerHistoryEntry(roomData.id, {
          timestamp: roomData.lastTimeCheckViewers,
          viewers: roomData.realViewers,
          isAlive: true
        });
        notificationManager.notifyNewRoom(roomData);
        log(`✅ Đã thêm room thành công: ${roomData.id}`);

        // 2. Liên kết từng account với room
        log(`🔄 Liên kết ${accounts.length} accounts với room ${roomData.id}`);
        for (const account of accounts) {
          await storageManager.addAccountToRoom(account.id, roomData.id);
        }

        // 3. Tạo accountsList với proxy từ bảng proxies
        let accountsList = [];
        for (const acc of accounts) {
          log("🔄 Account", acc);
          let proxyInfo = 'no-proxy';

          // Nếu account có proxyId, lấy thông tin proxy từ bảng proxies
          if (acc.proxyId) {
            try {
              // Lấy một proxy cụ thể theo ID thay vì lấy tất cả
              const proxy = await storageManager.getProxyById(acc.proxyId);
              if (proxy) {
                // Sử dụng host, port, username, password của proxy
                const {
                  host,
                  port,
                  username,
                  password
                } = proxy;
                if (username && password) {
                  proxyInfo = `${username}:${password}@${host}:${port}`;
                } else {
                  proxyInfo = `${host}:${port}`;
                }
              }
            } catch (e) {
              console.error(`❌ Lỗi khi lấy proxy cho account ${acc.id}:`, e);
            }
          }
          const normalizedProxy = normalizeProxyFormat(proxyInfo);
          accountsList.push(`${acc.metadata.cookie};username=${acc.username};proxy=${normalizedProxy};`.replace(/;;/g, ';').replace(/; /g, ';'));
        }

        // 4. Bắt đầu viewers
        log("🔄 Accounts", accountsList);
        await GroupView.startViewers({
          accounts: accountsList,
          task_id: roomData.id,
          room_id: roomId,
          proxy: null
        });
        log(`✅ Đã bắt đầu viewer thành công cho room ${roomData.id}`);
        return {
          success: true,
          roomId: roomData.id,
          room: result.room,
          message: 'Room added and viewer started successfully'
        };
      } catch (err) {
        error('Error in add-room-and-start-viewer:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    'get-real-time-viewers': async () => {
      try {
        const rooms = await storageManager.getAllRooms();
        const activeRooms = rooms.filter(room => room.status === 'running');
        const stats = {};
        for (const room of activeRooms) {
          const accountsInRoom = await storageManager.getAccountsInRoom(room.id);
          stats[room.id] = {
            currentViewers: accountsInRoom.count || 0,
            targetViewers: room.targetViewers || 0,
            status: room.status,
            updatedAt: new Date().toISOString()
          };
        }
        return {
          success: true,
          stats
        };
      } catch (error) {
        console.error('Error getting real-time viewers:', error);
        return {
          success: false,
          error: error.message,
          stats: {}
        };
      }
    },
    'get-room-viewer-history': async (event, roomId, days) => {
      try {
        const result = await storageManager.getRoomViewerHistory(roomId, days);

        // Nếu là mảng (từ database) thì chuyển đổi sang định dạng phù hợp với frontend
        if (Array.isArray(result)) {
          console.log(`Chuyển đổi ${result.length} kết quả từ database sang định dạng frontend`);
          return {
            success: true,
            history: result.map(item => ({
              timestamp: item.timestamp,
              viewers: item.viewerCount || 0,
              isAlive: true
            })),
            totalEntries: result.length,
            roomInfo: {
              roomUid: roomId
            }
          };
        }

        // Trường hợp đã là đúng định dạng từ file storage
        return result;
      } catch (error) {
        console.error('Error getting room viewer history:', error);
        return {
          success: false,
          errorCode: 'UNKNOWN_ERROR',
          error: error.message
        };
      }
    },
    'assign-account-to-room': async (event, data) => {
      try {
        const {
          accountId,
          roomId
        } = data;
        if (!accountId || !roomId) {
          return {
            success: false,
            error: 'accountId và roomId là bắt buộc'
          };
        }

        // Kiểm tra account và room có tồn tại không
        const account = await storageManager.getAccountById(accountId);
        const room = await storageManager.getRoomByUid(roomId);
        if (!account) {
          return {
            success: false,
            error: 'Account không tồn tại'
          };
        }
        if (!room) {
          return {
            success: false,
            error: 'Room không tồn tại'
          };
        }

        // Thêm liên kết giữa account và room
        await storageManager.assignAccountToRoom(accountId, roomId);

        // Cập nhật account status
        await storageManager.updateAccount(accountId, {
          status: 'assigned',
          updatedAt: new Date().toISOString()
        });
        return {
          success: true,
          message: `Đã gán account ${account.username} vào room ${room.roomInfo?.owner?.nickname || room.uid}`
        };
      } catch (error) {
        console.error('Error assigning account to room:', error);
        return {
          success: false,
          error: error.message
        };
      }
    }
  };
};
function normalizeProxyFormat(proxyString) {
  if (!proxyString || proxyString === 'no-proxy') return 'no-proxy';
  try {
    if (proxyString.includes('@')) return proxyString; // đã đúng

    const match = proxyString.match(/^([^:]+):(\d+):([^:]+):(.+)$/);
    if (match) {
      const [, ip, port, user, pass] = match;
      return `${user}:${pass}@${ip}:${port}`;
    }
    const simple = proxyString.match(/^([^:]+):(\d+)$/);
    if (simple) return proxyString;
    console.log(`Invalid proxy format: ${proxyString}`);
    return 'no-proxy';
  } catch (err) {
    console.log(`Error parsing proxy: ${proxyString}`, err);
    return 'no-proxy';
  }
}
module.exports = roomHandlers;

/***/ }),

/***/ "./main/handlers/settingsHandlers.js":
/*!*******************************************!*\
  !*** ./main/handlers/settingsHandlers.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const {
  log,
  error
} = __webpack_require__(/*! ../../lib/logger */ "./lib/logger.js");
const notificationManager = __webpack_require__(/*! ../../lib/notification-manager */ "./lib/notification-manager.js");
const appState = __webpack_require__(/*! ../../lib/app-state */ "./lib/app-state.js");
const settingsHandlers = configManager => {
  return {
    'get-settings': async () => {
      try {
        const settings = await configManager.getSettings();
        const defaultSettings = {
          theme: 'dark',
          language: 'vi',
          autoSave: true,
          notifications: true,
          maxConcurrentViewers: 50,
          viewerDelay: 1000,
          autoReconnect: true,
          system: {
            autoUpdate: true,
            maxRoomsPerAccount: 5,
            accountCooldown: 60 // Mặc định là 60 giây
          },
          proxy: {
            maxAccountsPerProxy: 5
          },
          ...settings
        };

        // Đồng bộ với AppState
        appState.language = defaultSettings.language;
        appState.theme = defaultSettings.theme;
        appState.notifications = defaultSettings.notifications;
        return {
          success: true,
          settings: defaultSettings
        };
      } catch (error) {
        error('Error getting settings:', error);
        return {
          success: false,
          error: error.message,
          settings: {
            theme: 'dark',
            language: 'vi',
            autoSave: true,
            notifications: true,
            maxConcurrentViewers: 50,
            viewerDelay: 1000,
            autoReconnect: true,
            system: {
              autoUpdate: true,
              maxRoomsPerAccount: 5,
              accountCooldown: 60
            },
            proxy: {
              maxAccountsPerProxy: 5
            }
          }
        };
      }
    },
    'save-settings': async (event, settings) => {
      try {
        const validatedSettings = {
          theme: settings.theme || 'dark',
          language: settings.language || 'vi',
          autoSave: settings.autoSave !== undefined ? settings.autoSave : true,
          notifications: settings.notifications !== undefined ? settings.notifications : true,
          maxConcurrentViewers: settings.maxConcurrentViewers || 50,
          viewerDelay: settings.viewerDelay || 1000,
          autoReconnect: settings.autoReconnect !== undefined ? settings.autoReconnect : true,
          ...settings
        };

        // Đồng bộ với AppState
        appState.language = validatedSettings.language;
        appState.theme = validatedSettings.theme;
        appState.notifications = validatedSettings.notifications;
        await configManager.saveSettings(validatedSettings);
        log('Settings saved:', validatedSettings);
        return {
          success: true,
          settings: validatedSettings
        };
      } catch (error) {
        error('Error saving settings:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'change-language': async (event, language) => {
      try {
        const currentSettings = await configManager.getSettings();
        const updatedSettings = {
          ...currentSettings,
          language
        };
        await configManager.saveSettings(updatedSettings);

        // Cập nhật ngôn ngữ trong AppState
        appState.language = language;
        log('Language changed to:', language);
        return {
          success: true,
          language
        };
      } catch (error) {
        error('Error changing language:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'change-theme': async (event, theme) => {
      try {
        const currentSettings = await configManager.getSettings();
        const updatedSettings = {
          ...currentSettings,
          theme
        };
        await configManager.saveSettings(updatedSettings);

        // Cập nhật theme trong AppState
        appState.theme = theme;
        log('Theme changed to:', theme);
        return {
          success: true,
          theme
        };
      } catch (error) {
        error('Error changing theme:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'get-available-languages': async () => {
      try {
        const languages = [{
          code: 'vi',
          name: 'Tiếng Việt',
          flag: '🇻🇳'
        }, {
          code: 'en',
          name: 'English',
          flag: '🇺🇸'
        }, {
          code: 'zh',
          name: '中文',
          flag: '🇨🇳'
        }, {
          code: 'ko',
          name: '한국어',
          flag: '🇰🇷'
        }, {
          code: 'ja',
          name: '日本語',
          flag: '🇯🇵'
        }, {
          code: 'th',
          name: 'ไทย',
          flag: '🇹🇭'
        }];
        return {
          success: true,
          languages
        };
      } catch (error) {
        error('Error getting available languages:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'get-available-themes': async () => {
      try {
        const themes = [{
          code: 'dark',
          name: 'Dark Theme',
          nameVi: 'Giao diện tối',
          description: 'Dark theme for better night viewing',
          descriptionVi: 'Giao diện tối phù hợp xem ban đêm'
        }, {
          code: 'light',
          name: 'Light Theme',
          nameVi: 'Giao diện sáng',
          description: 'Light theme for daylight viewing',
          descriptionVi: 'Giao diện sáng phù hợp ban ngày'
        }, {
          code: 'auto',
          name: 'Auto Theme',
          nameVi: 'Tự động',
          description: 'Automatically switch based on system preference',
          descriptionVi: 'Tự động chuyển theo hệ thống'
        }];
        return {
          success: true,
          themes
        };
      } catch (error) {
        error('Error getting available themes:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'reset-settings': async () => {
      try {
        const defaultSettings = {
          theme: 'dark',
          language: 'vi',
          autoSave: true,
          notifications: true,
          maxConcurrentViewers: 50,
          viewerDelay: 1000,
          autoReconnect: true,
          system: {
            autoUpdate: true,
            maxRoomsPerAccount: 5,
            accountCooldown: 60
          },
          proxy: {
            maxAccountsPerProxy: 5
          }
        };
        await configManager.saveSettings(defaultSettings);
        log('Settings reset to default');
        return {
          success: true,
          settings: defaultSettings
        };
      } catch (error) {
        error('Error resetting settings:', error);
        return {
          success: false,
          error: error.message
        };
      }
    }
  };
};
module.exports = settingsHandlers;

/***/ }),

/***/ "./main/handlers/taskHandlers.js":
/*!***************************************!*\
  !*** ./main/handlers/taskHandlers.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const {
  ipcMain
} = __webpack_require__(/*! electron */ "electron");
const TaskManager = __webpack_require__(/*! ../../lib/task-manager */ "./lib/task-manager.js");
const {
  log,
  error
} = __webpack_require__(/*! ../../lib/logger */ "./lib/logger.js");

// Khởi tạo task manager instance
let taskManagerInstance = null;
const taskHandlers = storageManager => {
  // Lazy initialization của task manager với storageManager
  if (!taskManagerInstance) {
    taskManagerInstance = new TaskManager(storageManager);
  }
  return {
    /**
     * Lấy tất cả tasks
     */
    'get-all-tasks': async event => {
      try {
        const tasks = await taskManagerInstance.getAllTasks();
        return {
          success: true,
          data: tasks
        };
      } catch (error) {
        console.error('Error getting tasks:', error);
        return {
          success: false,
          message: error.message
        };
      }
    },
    /**
     * Thêm task mới
     */
    'add-task': async (event, taskData) => {
      try {
        const task = await taskManagerInstance.addTask(taskData);
        return {
          success: true,
          data: task
        };
      } catch (error) {
        console.error('Error adding task:', error);
        return {
          success: false,
          message: error.message
        };
      }
    },
    /**
     * Cập nhật task
     */
    'update-task': async (event, taskId, updates) => {
      try {
        const task = await taskManagerInstance.updateTask(taskId, updates);
        return {
          success: true,
          data: task
        };
      } catch (error) {
        console.error('Error updating task:', error);
        return {
          success: false,
          message: error.message
        };
      }
    },
    /**
     * Xóa task
     */
    'delete-task': async (event, taskId) => {
      try {
        await taskManagerInstance.deleteTask(taskId);
        return {
          success: true
        };
      } catch (error) {
        console.error('Error deleting task:', error);
        return {
          success: false,
          message: error.message
        };
      }
    },
    /**
     * Bắt đầu task
     */
    'start-task': async (event, taskId) => {
      try {
        await taskManagerInstance.startTask(taskId);
        return {
          success: true
        };
      } catch (err) {
        error('Error starting task:', err);
        return {
          success: false,
          message: err.message
        };
      }
    },
    /**
     * Dừng task
     */
    'stop-task': async (event, taskId) => {
      try {
        taskManagerInstance.stopTask(taskId);
        return {
          success: true
        };
      } catch (err) {
        error('Error stopping task:', err);
        return {
          success: false,
          message: err.message
        };
      }
    },
    /**
     * Chạy task ngay lập tức
     */
    'run-task-now': async (event, taskId) => {
      try {
        await taskManagerInstance.runTaskNow(taskId);
        return {
          success: true
        };
      } catch (err) {
        error('Error running task:', err);
        return {
          success: false,
          message: err.message
        };
      }
    },
    /**
     * Lấy danh sách handlers có sẵn
     */
    'get-available-handlers': async event => {
      try {
        const handlers = taskManagerInstance.getAvailableHandlers();
        return {
          success: true,
          data: handlers
        };
      } catch (err) {
        error('Error getting handlers:', err);
        return {
          success: false,
          message: err.message
        };
      }
    }
  };
};

// Cleanup khi shutdown
process.on('beforeExit', () => {
  if (taskManagerInstance) {
    taskManagerInstance.cleanup();
  }
});
module.exports = taskHandlers;

/***/ }),

/***/ "./main/handlers/utilityHandlers.js":
/*!******************************************!*\
  !*** ./main/handlers/utilityHandlers.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const {
  shell,
  dialog,
  BrowserWindow
} = __webpack_require__(/*! electron */ "electron");
const {
  readFileSync
} = __webpack_require__(/*! fs */ "fs");
const {
  log,
  error
} = __webpack_require__(/*! ../../lib/logger */ "./lib/logger.js");
const utilityHandlers = (storageManager, viewerManager) => {
  return {
    'get-analytics': async (event, params) => {
      try {
        let analytics = {
          totalViews: 0,
          totalLikes: 0,
          totalComments: 0,
          totalAccounts: 0,
          activeViewers: 0,
          totalRuntime: 0,
          dailyStats: [],
          accountStats: [],
          recentActivities: []
        };
        if (viewerManager) {
          const stats = viewerManager.getStats();
          analytics.activeViewers = stats.activeViewers;
          analytics.totalAccounts = stats.totalAccounts;
          if (stats.isRunning) {
            analytics.recentActivities.push({
              type: 'viewer_running',
              message: 'TikTok viewer is currently running (simple mode)',
              timestamp: new Date().toISOString()
            });
          }
        }
        try {
          const accounts = await storageManager.getAllAccounts();
          analytics.totalAccounts = accounts.length;
        } catch (error) {
          console.error('Error getting account count:', error);
        }
        return {
          success: true,
          data: analytics
        };
      } catch (error) {
        console.error('Error getting analytics:', error);
        return {
          success: false,
          error: error.message,
          data: {
            totalViews: 0,
            totalLikes: 0,
            totalComments: 0,
            totalAccounts: 0,
            activeViewers: 0,
            totalRuntime: 0,
            dailyStats: [],
            accountStats: [],
            recentActivities: []
          }
        };
      }
    },
    'get-viewer-manager-stats': async () => {
      try {
        const stats = viewerManager.getStats();
        return {
          success: true,
          stats
        };
      } catch (err) {
        error('Error getting viewer manager stats:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    'get-viewer-stats': async event => {
      try {
        if (viewerManager && typeof viewerManager.getStats === 'function') {
          return viewerManager.getStats();
        }
        return {
          activeViewers: 0,
          isRunning: false,
          totalAccounts: 0,
          viewers: []
        };
      } catch (err) {
        error('Error getting viewer stats:', err);
        return {
          activeViewers: 0,
          isRunning: false,
          totalAccounts: 0,
          viewers: []
        };
      }
    },
    'open-file': async (event, filePath) => {
      try {
        // Kiểm tra filePath có phải là string không
        if (typeof filePath !== 'string') {
          return {
            success: false,
            error: 'Invalid file path type'
          };
        }
        const result = await shell.openPath(filePath);
        return {
          success: result === ''
        };
      } catch (err) {
        error('Error opening file:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    'open-file-dialog': async (event, options) => {
      try {
        const result = await dialog.showOpenDialog(options);
        if (!result.canceled && result.filePaths && result.filePaths.length > 0) {
          const filePath = result.filePaths[0];

          // Kiểm tra filePath có phải là string không
          if (typeof filePath !== 'string') {
            return {
              success: false,
              error: 'Invalid file path type'
            };
          }
          const content = readFileSync(filePath, 'utf-8');
          return {
            success: true,
            content,
            filePath
          };
        }
        return {
          success: false,
          error: 'No file selected'
        };
      } catch (error) {
        console.error('Error in open-file-dialog:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'add-account-to-room': async (event, accountId, roomId) => {
      try {
        const result = await storageManager.addAccountToRoom(accountId, roomId);
        return result;
      } catch (error) {
        console.error('Error adding account to room:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'remove-account-from-room': async (event, accountId, roomId) => {
      try {
        const result = await storageManager.removeAccountFromRoom(accountId, roomId);
        return result;
      } catch (error) {
        console.error('Error removing account from room:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'clear-account-rooms': async (event, accountId) => {
      try {
        const result = await storageManager.clearAccountRooms(accountId);
        return result;
      } catch (error) {
        console.error('Error clearing account rooms:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'get-account-active-rooms': async (event, accountId) => {
      try {
        const result = await storageManager.getAccountActiveRooms(accountId);
        return result;
      } catch (error) {
        console.error('Error getting account active rooms:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'get-accounts-in-room': async (event, roomId) => {
      try {
        const result = await storageManager.getAccountsInRoom(roomId);
        return result;
      } catch (error) {
        console.error('Error getting accounts in room:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'select-all-accounts-in-folder': async (event, folderId) => {
      try {
        const accounts = await storageManager.getAccountsByFolder(folderId);
        return {
          success: true,
          accountIds: accounts.map(acc => acc.id),
          count: accounts.length
        };
      } catch (error) {
        console.error('Error selecting all accounts in folder:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'select-all-proxies-in-folder': async (event, folderId) => {
      try {
        const proxies = await storageManager.getProxiesByFolder(folderId);
        return {
          success: true,
          proxyIds: proxies.map(proxy => proxy.id),
          count: proxies.length
        };
      } catch (error) {
        console.error('Error selecting all proxies in folder:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'clear-selection': async (event, type) => {
      try {
        return {
          success: true,
          message: `Cleared ${type} selection`
        };
      } catch (error) {
        console.error('Error clearing selection:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'get-bulk-operation-status': async (event, operationId) => {
      try {
        return {
          success: true,
          status: 'completed',
          progress: 100,
          message: 'Operation completed successfully'
        };
      } catch (error) {
        console.error('Error getting bulk operation status:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'close-proxy-dropdown': async event => {
      try {
        return {
          success: true,
          message: 'Proxy dropdown closed'
        };
      } catch (error) {
        console.error('Error closing proxy dropdown:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'close-all-modals': async event => {
      try {
        return {
          success: true,
          message: 'All modals closed'
        };
      } catch (error) {
        console.error('Error closing modals:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'reset-ui-state': async event => {
      try {
        return {
          success: true,
          message: 'UI state reset'
        };
      } catch (error) {
        console.error('Error resetting UI state:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    'emergency-ui-reset': async event => {
      try {
        return {
          success: true,
          message: 'Emergency UI reset completed'
        };
      } catch (error) {
        console.error('Error during emergency UI reset:', error);
        return {
          success: false,
          error: error.message
        };
      }
    },
    // Menu related handlers 
    'open-add-room-modal': async event => {
      try {
        log('Menu action: Opening add room modal');
        const focusedWindow = BrowserWindow.getFocusedWindow();
        if (focusedWindow) {
          focusedWindow.webContents.send('app:open-add-room-modal');
        }
        return {
          success: true
        };
      } catch (err) {
        error('Error opening add room modal:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    'open-add-account-modal': async event => {
      try {
        log('Menu action: Opening add account modal');
        const focusedWindow = BrowserWindow.getFocusedWindow();
        if (focusedWindow) {
          focusedWindow.webContents.send('app:open-add-account-modal');
        }
        return {
          success: true
        };
      } catch (err) {
        error('Error opening add account modal:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    'open-add-proxy-modal': async event => {
      try {
        log('Menu action: Opening add proxy modal');
        const focusedWindow = BrowserWindow.getFocusedWindow();
        if (focusedWindow) {
          focusedWindow.webContents.send('app:open-add-proxy-modal');
        }
        return {
          success: true
        };
      } catch (err) {
        error('Error opening add proxy modal:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    'check-all-accounts': async event => {
      try {
        log('Menu action: Checking all accounts');
        // Thực hiện kiểm tra tất cả tài khoản
        return {
          success: true
        };
      } catch (err) {
        error('Error checking all accounts:', err);
        return {
          success: false,
          error: err.message
        };
      }
    },
    'check-all-proxies': async event => {
      try {
        log('Menu action: Checking all proxies');
        // Nếu storageManager có phương thức bulk test proxies
        if (storageManager && typeof storageManager.bulkTestProxies === 'function') {
          return await storageManager.bulkTestProxies([]);
        }
        return {
          success: true
        };
      } catch (err) {
        error('Error checking all proxies:', err);
        return {
          success: false,
          error: err.message
        };
      }
    }
  };
};
module.exports = utilityHandlers;

/***/ }),

/***/ "./main/helpers/create-window.js":
/*!***************************************!*\
  !*** ./main/helpers/create-window.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const {
  screen,
  BrowserWindow
} = __webpack_require__(/*! electron */ "electron");
const path = __webpack_require__(/*! path */ "path");
const createWindow = (windowName, options) => {
  const defaultSize = {
    width: options.width,
    height: options.height
  };

  // Get screen bounds để tính center
  const bounds = screen.getPrimaryDisplay().bounds;
  const defaultPosition = {
    x: (bounds.width - defaultSize.width) / 2,
    y: (bounds.height - defaultSize.height) / 2
  };

  // Determine icon path based on environment
  const isProd = "development" === 'production';
  const iconPath = isProd ? path.join(process.resourcesPath, 'icon.png') : path.join(__dirname, '../resources/icon.png');
  const win = new BrowserWindow({
    ...defaultSize,
    ...defaultPosition,
    ...options,
    title: 'TTL TikTok Live',
    icon: (__webpack_require__(/*! fs */ "fs").existsSync)(iconPath) ? iconPath : undefined,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      ...options.webPreferences
    },
    enableWebSQL: true,
    enablePreferredSizeMode: true,
    enableLargerThanScreen: true
  });
  win.webContents.on('dom-ready', () => {
    win.webContents.executeJavaScript(`
      const meta = document.createElement('meta');
      meta.setAttribute('name', 'ime-mode');
      meta.setAttribute('content', 'auto');
      document.head.appendChild(meta);
    `);
  });
  return win;
};
module.exports = {
  createWindow
};

/***/ }),

/***/ "./main/helpers/index.js":
/*!*******************************!*\
  !*** ./main/helpers/index.js ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const {
  createWindow
} = __webpack_require__(/*! ./create-window */ "./main/helpers/create-window.js");
module.exports = {
  createWindow
};

/***/ }),

/***/ "./main/menu.js":
/*!**********************!*\
  !*** ./main/menu.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const {
  app,
  Menu,
  shell,
  BrowserWindow
} = __webpack_require__(/*! electron */ "electron");
const {
  log
} = __webpack_require__(/*! ../lib/logger */ "./lib/logger.js");
const path = __webpack_require__(/*! path */ "path");
const appState = __webpack_require__(/*! ../lib/app-state */ "./lib/app-state.js");
const fs = __webpack_require__(/*! fs */ "fs");

// Hàm tạo Menu với hỗ trợ đa ngôn ngữ
function createMenu() {
  // Đọc file translation dựa trên ngôn ngữ hiện tại
  const currentLanguage = appState.language || 'vi';
  const isProd = "development" === 'production';

  // Đọc file translation từ thư mục locales
  let translations = {};
  try {
    let translationPath;
    if (isProd) {
      // Trong môi trường production, đường dẫn tới thư mục locales đã giải nén
      const appPath = app.getAppPath();
      const appDir = path.dirname(appPath);

      // Thử tìm trong thư mục locales giải nén ở cùng cấp với app.asar
      translationPath = path.join(appDir, 'locales', currentLanguage, 'common.json');

      // Trên macOS có thể có cấu trúc khác
      if (process.platform === 'darwin' && !fs.existsSync(translationPath)) {
        // Thử tìm trong Resources
        translationPath = path.join(process.resourcesPath, 'locales', currentLanguage, 'common.json');
      }
    } else {
      // Môi trường development
      translationPath = path.join(app.getAppPath(), 'renderer', 'locales', currentLanguage, 'common.json');
    }
    log(`🔍 Menu: Trying to load translations from: ${translationPath}`);
    if (fs.existsSync(translationPath)) {
      const data = fs.readFileSync(translationPath, 'utf8');
      translations = JSON.parse(data);
      log(`✅ Menu: Loaded ${currentLanguage} translations successfully`);
    } else {
      log(`❌ Menu: Translation file not found for ${currentLanguage} at ${translationPath}`);
      // Fallback to Vietnamese
      let fallbackPath;
      if (isProd) {
        // Trong môi trường production
        const appPath = app.getAppPath();
        const appDir = path.dirname(appPath);

        // Thử tìm trong thư mục locales giải nén
        fallbackPath = path.join(appDir, 'locales', 'vi', 'common.json');

        // Trên macOS có thể có cấu trúc khác
        if (process.platform === 'darwin' && !fs.existsSync(fallbackPath)) {
          // Thử tìm trong Resources
          fallbackPath = path.join(process.resourcesPath, 'locales', 'vi', 'common.json');
        }
      } else {
        // Môi trường development
        fallbackPath = path.join(app.getAppPath(), 'renderer', 'locales', 'vi', 'common.json');
      }
      log(`🔍 Menu: Trying fallback at: ${fallbackPath}`);
      if (fs.existsSync(fallbackPath)) {
        const fallbackData = fs.readFileSync(fallbackPath, 'utf8');
        translations = JSON.parse(fallbackData);
        log(`✅ Menu: Loaded fallback (vi) translations`);
      } else {
        log(`❌ Menu: Fallback translation file not found at ${fallbackPath}`);
      }
    }
  } catch (err) {
    log(`❌ Menu: Error loading translations: ${err.message}`);
    // Continue with empty translations object
  }

  // Helper function để lấy translation string
  const t = (key, params = {}) => {
    try {
      // Phân tách key
      const keyParts = key.split('.');
      let result = translations;

      // Duyệt qua các phần của key
      for (const part of keyParts) {
        if (result && result[part] !== undefined) {
          result = result[part];
        } else {
          return key; // Trả về key gốc nếu không tìm thấy dịch
        }
      }

      // Thay thế các tham số
      if (typeof result === 'string') {
        Object.keys(params).forEach(paramKey => {
          result = result.replace(`{${paramKey}}`, params[paramKey]);
        });
      }
      return result;
    } catch (err) {
      log(`❌ Menu: Translation error for key ${key}: ${err.message}`);
      return key;
    }
  };
  const appName = app.getName() || 'TTL TikTok Live';
  const isMac = process.platform === 'darwin';

  // Template cho menu
  const template = [
  // App menu (macOS only)
  ...(isMac ? [{
    label: appName,
    submenu: [{
      label: t('menu.app.about', {
        appName
      }),
      role: 'about'
    }, {
      type: 'separator'
    }, {
      label: t('menu.app.hide', {
        appName
      }),
      role: 'hide'
    }, {
      label: t('menu.app.hideOthers', {}),
      role: 'hideOthers'
    }, {
      label: t('menu.app.showAll', {}),
      role: 'unhide'
    }, {
      type: 'separator'
    }, {
      label: t('menu.app.quit', {
        appName
      }),
      role: 'quit'
    }]
  }] : []),
  // File Menu
  {
    label: t('menu.file.title'),
    submenu: [{
      label: t('menu.file.newRoom'),
      accelerator: 'CmdOrCtrl+N',
      click: async () => {
        const focusedWindow = BrowserWindow.getFocusedWindow();
        if (focusedWindow) {
          // Trực tiếp gọi executeJavaScript để mở modal
          focusedWindow.webContents.executeJavaScript("if (typeof window.openModal === 'function') { window.openModal('ADD_ROOM') }");
        }
      }
    }, {
      type: 'separator'
    },
    // {
    //   label: t('menu.file.newAccount'),
    //   accelerator: 'CmdOrCtrl+Shift+A',
    //   click: async () => {
    //     const focusedWindow = BrowserWindow.getFocusedWindow();
    //     if (focusedWindow) {
    //       // Trực tiếp gọi executeJavaScript để mở modal
    //       focusedWindow.webContents.executeJavaScript(
    //         "if (typeof window.openModal === 'function') { window.openModal('ADD_ACCOUNT') }"
    //       );
    //     }
    //   }
    // },
    {
      label: t('menu.file.importAccountsText'),
      accelerator: 'CmdOrCtrl+Shift+I',
      click: async () => {
        const focusedWindow = BrowserWindow.getFocusedWindow();
        if (focusedWindow) {
          // Trực tiếp gọi executeJavaScript để mở modal
          focusedWindow.webContents.executeJavaScript("if (typeof window.openModal === 'function') { window.openModal('IMPORT_ACCOUNT_TEXT') }");
        }
      }
    },
    // { type: 'separator' },
    // {
    //   label: t('menu.file.newProxy'),
    //   accelerator: 'CmdOrCtrl+Shift+P',
    //   click: async () => {
    //     const focusedWindow = BrowserWindow.getFocusedWindow();
    //     if (focusedWindow) {
    //       // Trực tiếp gọi executeJavaScript để mở modal
    //       focusedWindow.webContents.executeJavaScript(
    //         "if (typeof window.openModal === 'function') { window.openModal('ADD_PROXY') }"
    //       );
    //     }
    //   }
    // },
    {
      label: t('menu.file.importProxiesText'),
      click: async () => {
        const focusedWindow = BrowserWindow.getFocusedWindow();
        if (focusedWindow) {
          // Trực tiếp gọi executeJavaScript để mở modal
          focusedWindow.webContents.executeJavaScript("if (typeof window.openModal === 'function') { window.openModal('IMPORT_PROXY_TEXT') }");
        }
      }
    }, {
      type: 'separator'
    }, isMac ? {
      label: t('menu.file.close'),
      role: 'close'
    } : {
      label: t('menu.app.quit', {
        appName
      }),
      role: 'quit'
    }]
  },
  // Edit menu
  {
    label: t('menu.edit.title'),
    submenu: [{
      label: t('menu.edit.undo'),
      role: 'undo'
    }, {
      label: t('menu.edit.redo'),
      role: 'redo'
    }, {
      type: 'separator'
    }, {
      label: t('menu.edit.cut'),
      role: 'cut'
    }, {
      label: t('menu.edit.copy'),
      role: 'copy'
    }, {
      label: t('menu.edit.paste'),
      role: 'paste'
    }, ...(isMac ? [{
      label: t('menu.edit.selectAll'),
      role: 'selectAll'
    }, {
      type: 'separator'
    }] : [{
      label: t('menu.edit.selectAll'),
      role: 'selectAll'
    }])]
  },
  // View menu
  {
    label: t('menu.view.title'),
    submenu: [{
      label: t('menu.view.reload'),
      role: 'reload'
    },
    // { label: t('menu.view.toggleDevTools'), role: 'toggleDevTools' },
    {
      type: 'separator'
    }, {
      label: t('menu.view.resetZoom'),
      role: 'resetZoom'
    }, {
      label: t('menu.view.zoomIn'),
      role: 'zoomIn'
    }, {
      label: t('menu.view.zoomOut'),
      role: 'zoomOut'
    }, {
      type: 'separator'
    }, {
      label: t('menu.view.toggleFullscreen'),
      role: 'togglefullscreen'
    }]
  },
  // Tools menu
  {
    label: t('menu.tools.title'),
    submenu: [{
      label: t('menu.tools.checkAllAccounts'),
      click: async () => {
        const focusedWindow = BrowserWindow.getFocusedWindow();
        if (focusedWindow) {
          focusedWindow.webContents.send('app:check-all-accounts');
        }
      }
    }, {
      label: t('menu.tools.checkAllProxies'),
      click: async () => {
        const focusedWindow = BrowserWindow.getFocusedWindow();
        if (focusedWindow) {
          focusedWindow.webContents.send('app:check-all-proxies');
        }
      }
    }, {
      type: 'separator'
    }, {
      label: t('menu.tools.clearCache'),
      click: async () => {
        const session = BrowserWindow.getFocusedWindow()?.webContents?.session;
        if (session) {
          await session.clearCache();
          await session.clearStorageData();
          BrowserWindow.getFocusedWindow()?.reload();
        }
      }
    }, {
      type: 'separator'
    }, {
      label: t('menu.tools.exportData'),
      click: async () => {
        const focusedWindow = BrowserWindow.getFocusedWindow();
        if (focusedWindow) {
          focusedWindow.webContents.send('app:export-data');
        }
      }
    }, {
      label: t('menu.tools.importData'),
      click: async () => {
        const focusedWindow = BrowserWindow.getFocusedWindow();
        if (focusedWindow) {
          focusedWindow.webContents.send('app:import-data');
        }
      }
    }]
  },
  // Window menu
  {
    label: t('menu.window.title'),
    role: 'window',
    submenu: [{
      label: t('menu.window.minimize'),
      role: 'minimize'
    }, {
      label: t('menu.window.zoom'),
      role: 'zoom'
    }, ...(isMac ? [{
      type: 'separator'
    }, {
      label: t('menu.window.front'),
      role: 'front'
    }] : [])]
  },
  // Help menu
  {
    label: t('menu.help.title'),
    role: 'help',
    submenu: [{
      label: t('menu.help.documentation'),
      click: async () => {
        await shell.openExternal('https://amac.ai/docs');
      }
    }, {
      label: t('menu.help.reportIssue'),
      click: async () => {
        await shell.openExternal('https://amac.ai/support');
      }
    }, {
      label: t('menu.help.checkForUpdates'),
      click: async () => {
        const focusedWindow = BrowserWindow.getFocusedWindow();
        if (focusedWindow) {
          focusedWindow.webContents.send('app:check-for-updates');
        }
      }
    }, {
      type: 'separator'
    }, ...(isMac ? [] : [{
      label: t('menu.help.about'),
      click: async () => {
        const focusedWindow = BrowserWindow.getFocusedWindow();
        if (focusedWindow) {
          focusedWindow.webContents.send('app:show-about');
        }
      }
    }])]
  }];
  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
  return menu;
}

// Đăng ký lắng nghe sự kiện thay đổi ngôn ngữ
function setupMenuLocalization() {
  appState.addListener('language', language => {
    log(`🌐 Menu: Language changed to ${language}, updating menu`);
    createMenu();
  });
}
module.exports = {
  createMenu,
  setupMenuLocalization
};

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "electron":
/*!***************************!*\
  !*** external "electron" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("electron");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_axios__;

/***/ }),

/***/ "better-sqlite3":
/*!*********************************!*\
  !*** external "better-sqlite3" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_better_sqlite3__;

/***/ }),

/***/ "electron-serve":
/*!*********************************!*\
  !*** external "electron-serve" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_electron_serve__;

/***/ }),

/***/ "https-proxy-agent":
/*!************************************!*\
  !*** external "https-proxy-agent" ***!
  \************************************/
/***/ ((module) => {

"use strict";
if(typeof __WEBPACK_EXTERNAL_MODULE_https_proxy_agent__ === 'undefined') { var e = new Error("Cannot find module 'https-proxy-agent'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports = __WEBPACK_EXTERNAL_MODULE_https_proxy_agent__;

/***/ }),

/***/ "request":
/*!**************************!*\
  !*** external "request" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_request__;

/***/ }),

/***/ "tunnel":
/*!*************************!*\
  !*** external "tunnel" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_tunnel__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	var __webpack_exports__ = __webpack_require__("./main/background.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,