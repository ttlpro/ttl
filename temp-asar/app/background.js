(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("electron-serve"), require("request"), require("axios"), require("tunnel"), require("better-sqlite3"), (function webpackLoadOptionalExternalModule() { try { return require("https-proxy-agent"); } catch(e) {} }()));
	else if(typeof define === 'function' && define.amd)
		define(["electron-serve", "request", "axios", "tunnel", "better-sqlite3", "https-proxy-agent"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("electron-serve"), require("request"), require("axios"), require("tunnel"), require("better-sqlite3"), (function webpackLoadOptionalExternalModule() { try { return require("https-proxy-agent"); } catch(e) {} }())) : factory(root["electron-serve"], root["request"], root["axios"], root["tunnel"], root["better-sqlite3"], root["https-proxy-agent"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(global, (__WEBPACK_EXTERNAL_MODULE_electron_serve__, __WEBPACK_EXTERNAL_MODULE_request__, __WEBPACK_EXTERNAL_MODULE_axios__, __WEBPACK_EXTERNAL_MODULE_tunnel__, __WEBPACK_EXTERNAL_MODULE_better_sqlite3__, __WEBPACK_EXTERNAL_MODULE_https_proxy_agent__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./main/businesses sync recursive":
/*!*******************************!*\
  !*** ./main/businesses/ sync ***!
  \*******************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "./main/businesses sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "./lib/app-state.js":
/*!**************************!*\
  !*** ./lib/app-state.js ***!
  \**************************/
/***/ ((module) => {

"use strict";


/**
 * Qu·∫£n l√Ω tr·∫°ng th√°i to√†n c·ª•c c·ªßa ·ª©ng d·ª•ng trong main process
 */
class AppState {
  constructor() {
    // Kh·ªüi t·∫°o tr·∫°ng th√°i m·∫∑c ƒë·ªãnh
    this._state = {
      language: 'vi',
      // Ng√¥n ng·ªØ m·∫∑c ƒë·ªãnh
      theme: 'dark',
      notifications: true,
      soundEnabled: true
    };

    // Danh s√°ch c√°c listeners
    this._listeners = {
      language: []
    };
  }

  /**
   * L·∫•y ng√¥n ng·ªØ hi·ªán t·∫°i
   */
  get language() {
    return this._state.language;
  }

  /**
   * ƒê·∫∑t ng√¥n ng·ªØ hi·ªán t·∫°i v√† th√¥ng b√°o cho c√°c listeners
   */
  set language(value) {
    if (this._state.language !== value) {
      this._state.language = value;
      this._notifyListeners('language', value);
    }
  }

  /**
   * L·∫•y theme hi·ªán t·∫°i
   */
  get theme() {
    return this._state.theme;
  }

  /**
   * ƒê·∫∑t theme hi·ªán t·∫°i
   */
  set theme(value) {
    this._state.theme = value;
  }

  /**
   * L·∫•y tr·∫°ng th√°i th√¥ng b√°o
   */
  get notifications() {
    return this._state.notifications;
  }

  /**
   * ƒê·∫∑t tr·∫°ng th√°i th√¥ng b√°o
   */
  set notifications(value) {
    this._state.notifications = value;
  }

  /**
   * L·∫•y tr·∫°ng th√°i √¢m thanh
   */
  get soundEnabled() {
    return this._state.soundEnabled;
  }

  /**
   * ƒê·∫∑t tr·∫°ng th√°i √¢m thanh
   */
  set soundEnabled(value) {
    this._state.soundEnabled = value;
  }

  /**
   * ƒêƒÉng k√Ω listener cho c√°c thay ƒë·ªïi
   * @param {string} event - T√™n s·ª± ki·ªán ('language', 'theme', etc)
   * @param {Function} callback - H√†m callback khi c√≥ thay ƒë·ªïi
   */
  addListener(event, callback) {
    if (!this._listeners[event]) {
      this._listeners[event] = [];
    }
    this._listeners[event].push(callback);
  }

  /**
   * H·ªßy ƒëƒÉng k√Ω listener
   * @param {string} event - T√™n s·ª± ki·ªán
   * @param {Function} callback - H√†m callback ƒë√£ ƒëƒÉng k√Ω
   */
  removeListener(event, callback) {
    if (this._listeners[event]) {
      this._listeners[event] = this._listeners[event].filter(cb => cb !== callback);
    }
  }

  /**
   * Th√¥ng b√°o cho c√°c listeners v·ªÅ thay ƒë·ªïi
   * @param {string} event - T√™n s·ª± ki·ªán
   * @param {any} value - Gi√° tr·ªã m·ªõi
   */
  _notifyListeners(event, value) {
    if (this._listeners[event]) {
      this._listeners[event].forEach(callback => {
        try {
          callback(value);
        } catch (err) {
          console.error(`L·ªói khi g·ªçi listener cho ${event}:`, err);
        }
      });
    }
  }
}

// Export singleton instance
module.exports = new AppState();

/***/ }),

/***/ "./lib/logger.js":
/*!***********************!*\
  !*** ./lib/logger.js ***!
  \***********************/
/***/ ((module) => {

"use strict";


/**
 * Logger module cho ·ª©ng d·ª•ng TTL TikTok Live Viewer
 * M·∫∑c ƒë·ªãnh t·∫Øt t·∫•t c·∫£ console.log, ch·ªâ b·∫≠t khi c·∫ßn debug
 */

// M·∫∑c ƒë·ªãnh l√† false - kh√¥ng hi·ªÉn th·ªã log
let LOG_ENABLED = false;
if (true) {
  LOG_ENABLED = true;
}

/**
 * H√†m log thay th·∫ø cho console.log, ch·ªâ hi·ªÉn th·ªã khi LOG_ENABLED = true
 * @param  {...any} args C√°c tham s·ªë gi·ªëng nh∆∞ console.log
 */
function log(...args) {
  if (LOG_ENABLED) {
    console.log(...args);
  }
}

/**
 * H√†m error lu√¥n hi·ªÉn th·ªã (kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi LOG_ENABLED)
 * @param  {...any} args C√°c tham s·ªë gi·ªëng nh∆∞ console.error
 */
function error(...args) {
  console.error(...args);
}

/**
 * H√†m warn lu√¥n hi·ªÉn th·ªã (kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi LOG_ENABLED)
 * @param  {...any} args C√°c tham s·ªë gi·ªëng nh∆∞ console.warn
 */
function warn(...args) {
  console.warn(...args);
}

/**
 * B·∫≠t/t·∫Øt log
 * @param {boolean} enabled true ƒë·ªÉ b·∫≠t, false ƒë·ªÉ t·∫Øt
 */
function setLogEnabled(enabled) {
  global.LOG_ENABLED = enabled;
}
module.exports = {
  log,
  error,
  warn,
  setLogEnabled,
  LOG_ENABLED
};

/***/ }),

/***/ "./lib/notification-manager.js":
/*!*************************************!*\
  !*** ./lib/notification-manager.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const {
  Notification,
  app,
  dialog
} = __webpack_require__(/*! electron */ "electron");
const path = __webpack_require__(/*! path */ "path");
const {
  log,
  error
} = __webpack_require__(/*! ./logger */ "./lib/logger.js");
const fs = __webpack_require__(/*! fs */ "fs");
const appState = __webpack_require__(/*! ./app-state */ "./lib/app-state.js");

/**
 * Qu·∫£n l√Ω th√¥ng b√°o desktop v·ªõi h·ªó tr·ª£ ƒëa ng√¥n ng·ªØ
 */
class NotificationManager {
  constructor() {
    this.enabled = true;

    // Thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n icon ƒë·ªÉ s·ª≠ d·ª•ng icon c√≥ s·∫µn
    // const iconPath = path.join(app.getAppPath(), 'resources/icon.png');
    const iconPath = path.join(__dirname, '..', 'resources', 'icon.png');
    log(`üì¢ Icon path for notifications: ${iconPath}`);
    this.iconPath = iconPath;
    this.soundEnabled = true;
    this.historyLimit = 50;
    this.notificationHistory = [];

    // L∆∞u tham chi·∫øu ƒë·∫øn th√¥ng b√°o ƒë·ªÉ tr√°nh b·ªã garbage collected
    this.activeNotifications = [];

    // Kh·ªüi t·∫°o h·ªó tr·ª£ ƒëa ng√¥n ng·ªØ
    this.translations = this.loadTranslations(appState.language);

    // ƒêƒÉng k√Ω l·∫Øng nghe thay ƒë·ªïi ng√¥n ng·ªØ t·ª´ AppState
    appState.addListener('language', language => {
      log(`üåê Ng√¥n ng·ªØ th√¥ng b√°o thay ƒë·ªïi th√†nh: ${language}`);
      this.translations = this.loadTranslations(language);
    });

    // Ki·ªÉm tra h·ªó tr·ª£ th√¥ng b√°o
    if (!Notification.isSupported()) {
      log('‚ùå Th√¥ng b√°o kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ tr√™n h·ªá th·ªëng n√†y');
      this.enabled = false;
    } else {
      log('‚úÖ Th√¥ng b√°o ƒë∆∞·ª£c h·ªó tr·ª£ tr√™n h·ªá th·ªëng n√†y');
    }

    // Thi·∫øt l·∫≠p AppUserModelId cho Windows
    if (process.platform === 'win32') {
      try {
        app.setAppUserModelId(app.getName() || 'TTL TikTok Live');
        log('‚úÖ ƒê√£ thi·∫øt l·∫≠p AppUserModelId cho Windows');
      } catch (err) {
        error('‚ùå L·ªói khi thi·∫øt l·∫≠p AppUserModelId:', err);
      }
    }
  }

  /**
   * ƒê·ªçc file translations d·ª±a tr√™n ng√¥n ng·ªØ
   */
  loadTranslations(lang) {
    try {
      const isProd = "development" === 'production';
      let translationPath;
      if (isProd) {
        // Trong m√¥i tr∆∞·ªùng production, ƒë∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c locales ƒë√£ gi·∫£i n√©n
        const appPath = app.getAppPath();
        const appDir = path.dirname(appPath);

        // Th·ª≠ t√¨m trong th∆∞ m·ª•c locales gi·∫£i n√©n ·ªü c√πng c·∫•p v·ªõi app.asar
        translationPath = path.join(appDir, 'locales', lang, 'notification.json');

        // Tr√™n macOS c√≥ th·ªÉ c√≥ c·∫•u tr√∫c kh√°c
        if (process.platform === 'darwin' && !fs.existsSync(translationPath)) {
          // Th·ª≠ t√¨m trong Resources
          translationPath = path.join(process.resourcesPath, 'locales', lang, 'notification.json');
        }
      } else {
        // M√¥i tr∆∞·ªùng development
        translationPath = path.join(app.getAppPath(), 'renderer', 'locales', lang, 'notification.json');
      }
      log(`üåê ƒêang ƒë·ªçc b·∫£n d·ªãch t·ª´: ${translationPath}`);
      if (fs.existsSync(translationPath)) {
        const data = fs.readFileSync(translationPath, 'utf8');
        const translations = JSON.parse(data);
        log(`‚úÖ ƒê·ªçc b·∫£n d·ªãch ${lang} th√†nh c√¥ng`);
        return translations;
      } else {
        log(`‚ùå Kh√¥ng t√¨m th·∫•y file b·∫£n d·ªãch cho ${lang} t·∫°i ${translationPath}`);
        // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ ƒë·ªçc ti·∫øng Vi·ªát
        if (lang !== 'vi') {
          log(`üîÑ ƒêang fallback v·ªÅ ti·∫øng Vi·ªát`);
          return this.loadTranslations('vi');
        }
        // N·∫øu kh√¥ng c√≥ c·∫£ ti·∫øng Vi·ªát, tr·∫£ v·ªÅ object r·ªóng
        return {};
      }
    } catch (err) {
      error(`‚ùå L·ªói khi ƒë·ªçc b·∫£n d·ªãch ${lang}:`, err);
      return {};
    }
  }

  /**
   * ƒê·∫∑t ng√¥n ng·ªØ hi·ªán t·∫°i
   */
  setLanguage(lang) {
    // C·∫≠p nh·∫≠t ng√¥n ng·ªØ trong AppState, NotificationManager s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t qua listener
    appState.language = lang;
  }

  /**
   * Ph∆∞∆°ng th·ª©c t() ƒë·ªÉ l·∫•y b·∫£n d·ªãch
   */
  t(key, params = {}) {
    try {
      // Ph√¢n t√°ch key
      const keyParts = key.split('.');
      let result = this.translations;

      // Duy·ªát qua c√°c ph·∫ßn c·ªßa key
      for (const part of keyParts) {
        if (result && result[part] !== undefined) {
          result = result[part];
        } else {
          log(`‚ùì Kh√¥ng t√¨m th·∫•y key ${key} trong b·∫£n d·ªãch ${appState.language}`);
          return key;
        }
      }

      // Thay th·∫ø c√°c tham s·ªë
      if (typeof result === 'string') {
        for (const paramKey in params) {
          result = result.replace(`{${paramKey}}`, params[paramKey]);
        }
      }
      return result;
    } catch (err) {
      error(`‚ùå L·ªói khi d·ªãch key ${key}:`, err);
      return key;
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o
   */
  sendNotification(options) {
    if (!this.enabled) {
      log('‚ùå Th√¥ng b√°o ƒë√£ b·ªã t·∫Øt, kh√¥ng g·ª≠i th√¥ng b√°o');
      return null;
    }
    try {
      log(`üì¢ ƒêang g·ª≠i th√¥ng b√°o: ${options.title}`);
      const defaultOptions = {
        title: 'TTL TikTok Live',
        body: '',
        icon: options.icon || this.iconPath,
        silent: !this.soundEnabled,
        timeoutType: 'default'
      };
      const notificationOptions = {
        ...defaultOptions,
        ...options
      };
      log(`üì¢ Chi ti·∫øt th√¥ng b√°o: ${JSON.stringify(notificationOptions)}`);

      // T·∫°o th√¥ng b√°o v·ªõi t√πy ch·ªçn ƒë·∫ßy ƒë·ªß
      const notification = new Notification({
        title: notificationOptions.title,
        body: notificationOptions.body,
        icon: notificationOptions.icon,
        silent: notificationOptions.silent,
        urgency: notificationOptions.urgency || 'normal',
        timeoutType: notificationOptions.timeoutType || 'default',
        hasReply: false
      });

      // L∆∞u tham chi·∫øu ƒë·∫øn th√¥ng b√°o ƒë·ªÉ tr√°nh b·ªã garbage collected
      this.activeNotifications.push(notification);

      // ƒêƒÉng k√Ω c√°c s·ª± ki·ªán
      notification.on('show', () => {
        log(`üì¢ Th√¥ng b√°o hi·ªÉn th·ªã: ${notificationOptions.title}`);
      });
      notification.on('click', () => {
        log(`üì¢ Th√¥ng b√°o ƒë∆∞·ª£c nh·∫•p: ${notificationOptions.title}`);
        if (options.onClick) {
          options.onClick();
        }
        this.clearNotification(notification);
      });
      notification.on('close', () => {
        log(`üì¢ Th√¥ng b√°o ƒë√≥ng: ${notificationOptions.title}`);
        this.clearNotification(notification);
      });
      notification.on('failed', (event, err) => {
        log(`‚ùå L·ªói th√¥ng b√°o: ${err}`);
        this.clearNotification(notification);
      });

      // Hi·ªÉn th·ªã th√¥ng b√°o
      notification.show();
      log(`üì¢ ƒê√£ g·ªçi h√†m show() cho th√¥ng b√°o`);

      // L∆∞u v√†o l·ªãch s·ª≠
      this.addToHistory({
        title: notificationOptions.title,
        body: notificationOptions.body,
        timestamp: new Date().toISOString()
      });
      return notification;
    } catch (err) {
      error('‚ùå L·ªói khi g·ª≠i th√¥ng b√°o:', err);

      // Hi·ªÉn th·ªã dialog thay th·∫ø n·∫øu c√≥ l·ªói
      try {
        dialog.showMessageBox({
          type: 'info',
          title: options.title || 'TTL TikTok Live',
          message: options.body || '',
          buttons: ['OK']
        });
      } catch (dialogErr) {
        error('‚ùå L·ªói khi hi·ªÉn th·ªã dialog thay th·∫ø:', dialogErr);
      }
      return null;
    }
  }

  /**
   * X√≥a th√¥ng b√°o kh·ªèi danh s√°ch tham chi·∫øu
   */
  clearNotification(notificationToDelete) {
    this.activeNotifications = this.activeNotifications.filter(notification => notification !== notificationToDelete);
    log(`üì¢ ƒê√£ x√≥a th√¥ng b√°o kh·ªèi danh s√°ch tham chi·∫øu, c√≤n l·∫°i ${this.activeNotifications.length} th√¥ng b√°o`);
  }

  /**
   * G·ª≠i th√¥ng b√°o khi room d·ª´ng
   */
  notifyRoomStopped(roomData) {
    log(`üì¢ G·ªçi notifyRoomStopped v·ªõi roomData: ${JSON.stringify(roomData)}`);
    const roomIdentifier = roomData.roomUsername || roomData.roomName || roomData.roomId || 'Unknown';
    return this.sendNotification({
      title: this.t('notifications.roomStopped.title'),
      body: this.t('notifications.roomStopped.body', {
        roomIdentifier
      }),
      urgency: 'normal',
      timeoutType: 'default',
      onClick: () => {
        // Action khi click v√†o th√¥ng b√°o
        log(`üì± Ng∆∞·ªùi d√πng nh·∫•p v√†o th√¥ng b√°o room d·ª´ng: ${roomIdentifier}`);
        // C√≥ th·ªÉ tri·ªÉn khai m·ªü c·ª≠a s·ªï room history
      }
    });
  }

  /**
   * G·ª≠i th√¥ng b√°o khi ph√°t hi·ªán room m·ªõi
   */
  notifyNewRoom(roomData) {
    log(`üì¢ G·ªçi notifyNewRoom v·ªõi roomData: ${JSON.stringify(roomData)}`);
    const roomIdentifier = roomData.roomUsername || roomData.roomName || roomData.roomId || 'Unknown';
    return this.sendNotification({
      title: this.t('notifications.newRoom.title'),
      body: this.t('notifications.newRoom.body', {
        roomIdentifier
      }),
      urgency: 'normal',
      onClick: () => {
        log(`üì± Ng∆∞·ªùi d√πng nh·∫•p v√†o th√¥ng b√°o room m·ªõi: ${roomIdentifier}`);
      }
    });
  }
  notifyTest() {
    log(`üì¢ G·ªçi notifyTest`);
    return this.sendNotification({
      title: this.t('notifications.test.title'),
      body: this.t('notifications.test.body'),
      urgency: 'normal',
      onClick: () => {
        log(`üì± Ng∆∞·ªùi d√πng nh·∫•p v√†o th√¥ng b√°o test ch·ª©c nƒÉng th√¥ng b√°o`);
      }
    });
  }

  /**
   * G·ª≠i th√¥ng b√°o l·ªói
   */
  notifyError(title, message) {
    log(`üì¢ G·ªçi notifyError v·ªõi title: ${title}, message: ${message}`);
    return this.sendNotification({
      title: title || this.t('notifications.error.title'),
      body: message || this.t('notifications.error.defaultMessage'),
      urgency: 'critical',
      timeoutType: 'never'
    });
  }

  /**
   * L∆∞u th√¥ng b√°o v√†o l·ªãch s·ª≠
   */
  addToHistory(notification) {
    this.notificationHistory.unshift(notification);

    // Gi·ªõi h·∫°n l·ªãch s·ª≠
    if (this.notificationHistory.length > this.historyLimit) {
      this.notificationHistory = this.notificationHistory.slice(0, this.historyLimit);
    }
  }

  /**
   * L·∫•y l·ªãch s·ª≠ th√¥ng b√°o
   */
  getHistory() {
    return this.notificationHistory;
  }

  /**
   * B·∫≠t/t·∫Øt th√¥ng b√°o
   */
  setEnabled(enabled) {
    this.enabled = enabled;
    log(`üì¢ Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ${enabled ? 'b·∫≠t' : 't·∫Øt'}`);
  }

  /**
   * B·∫≠t/t·∫Øt √¢m thanh
   */
  setSoundEnabled(enabled) {
    this.soundEnabled = enabled;
    log(`üîä √Çm thanh th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ${enabled ? 'b·∫≠t' : 't·∫Øt'}`);
  }
}
module.exports = new NotificationManager();

/***/ }),

/***/ "./lib/storage-adapter.js":
/*!********************************!*\
  !*** ./lib/storage-adapter.js ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const path = __webpack_require__(/*! path */ "path");
const fs = __webpack_require__(/*! fs */ "fs");

// Import new modular storage system
const StorageManager = __webpack_require__(/*! ./storage/storage-manager */ "./lib/storage/storage-manager.js");

/**
 * Storage Adapter ƒë·ªÉ d·ªÖ d√†ng chuy·ªÉn ƒë·ªïi gi·ªØa JSON v√† SQLite
 * T·ª± ƒë·ªông detect v√† migrate n·∫øu c·∫ßn
 */
class StorageAdapter {
  constructor() {
    this.storageType = 'sqlite'; // Always use SQLite
    this.storage = null;
    this.isInitialized = false;
  }
  async init() {
    try {
      console.log('üöÄ Initializing Storage Adapter...');

      // Initialize SQLite storage v·ªõi modular system
      this.storage = new StorageManager();
      await this.storage.init();

      // Ch·∫°y migration ƒë·ªÉ ƒë·∫£m b·∫£o schema ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
      console.log('üîÑ Checking for database schema migrations...');
      if (typeof this.storage.migrateSchema === 'function') {
        await this.storage.migrateSchema();
      } else {
        console.log('‚ö†Ô∏è migrateSchema method not found in storage manager');
      }
      this.isInitialized = true;
      console.log('‚úÖ Storage adapter initialized successfully');
      return true;
    } catch (error) {
      console.error('‚ùå Failed to initialize storage adapter:', error);
      throw error;
    }
  }

  // Delegate t·∫•t c·∫£ methods to storage manager
  async getAllFolders(type) {
    this.ensureInitialized();
    return this.storage.getAllFolders(type);
  }
  async createFolder(type, folderData) {
    this.ensureInitialized();
    return this.storage.createFolder(type, folderData);
  }
  async updateFolder(type, folderId, updates) {
    this.ensureInitialized();
    return this.storage.updateFolder(type, folderId, updates);
  }
  async deleteFolder(type, folderId) {
    this.ensureInitialized();
    return this.storage.deleteFolder(type, folderId);
  }
  async getAllAccounts() {
    this.ensureInitialized();
    return this.storage.getAllAccounts();
  }
  async getAccountsByFolder(folderId) {
    this.ensureInitialized();
    return this.storage.getAccountsByFolder(folderId);
  }
  async addAccount(accountData) {
    this.ensureInitialized();
    return this.storage.addAccount(accountData);
  }
  async deleteAccount(accountId) {
    this.ensureInitialized();
    return this.storage.deleteAccount(accountId);
  }
  async updateAccount(id, updates) {
    this.ensureInitialized();
    return this.storage.updateAccount(id, updates);
  }
  async updateAccountStats(accountId, stats) {
    this.ensureInitialized();
    return this.storage.updateAccountStats(accountId, stats);
  }
  async addAccountToRoom(accountId, roomId) {
    this.ensureInitialized();
    return this.storage.addAccountToRoom(accountId, roomId);
  }
  async removeAccountFromRoom(accountId, roomId) {
    this.ensureInitialized();
    return this.storage.removeAccountFromRoom(accountId, roomId);
  }
  async releaseAccountsFromRoom(roomId) {
    this.ensureInitialized();
    // Ki·ªÉm tra xem storage.roomStorage c√≥ t·ªìn t·∫°i kh√¥ng
    if (this.storage && this.storage.roomStorage && typeof this.storage.roomStorage.releaseAccountsFromRoom === 'function') {
      return this.storage.roomStorage.releaseAccountsFromRoom(roomId);
    } else {
      console.error('‚ùå Cannot release accounts: storage.roomStorage not available');
      return {
        success: false,
        error: 'storage.roomStorage not available'
      };
    }
  }
  async clearAccountRooms(accountId) {
    this.ensureInitialized();
    return this.storage.clearAccountRooms(accountId);
  }
  async getAccountActiveRooms(accountId) {
    this.ensureInitialized();
    return this.storage.getAccountActiveRooms(accountId);
  }
  async getAccountsInRoom(roomId) {
    this.ensureInitialized();
    return this.storage.getAccountsInRoom(roomId);
  }
  async getAllProxies() {
    this.ensureInitialized();
    return this.storage.getAllProxies();
  }
  async getProxiesByFolder(folderId) {
    this.ensureInitialized();
    return this.storage.getProxiesByFolder(folderId);
  }
  async addProxy(proxyData) {
    this.ensureInitialized();
    return this.storage.addProxy(proxyData);
  }
  async deleteProxy(proxyId) {
    this.ensureInitialized();
    return this.storage.deleteProxy(proxyId);
  }
  async getProxyById(proxyId) {
    this.ensureInitialized();
    return this.storage.getProxyById(proxyId);
  }
  async updateProxy(proxyId, updates) {
    this.ensureInitialized();
    return this.storage.updateProxy(proxyId, updates);
  }
  async testProxy(proxyId) {
    this.ensureInitialized();
    return this.storage.testProxy(proxyId);
  }
  async importProxiesFromText(text, folderId = null) {
    this.ensureInitialized();
    return this.storage.importProxiesFromText(text, folderId);
  }
  async bulkMoveProxiesToFolder(proxyIds, folderId) {
    this.ensureInitialized();
    return this.storage.bulkMoveProxiesToFolder(proxyIds, folderId);
  }
  async bulkTestProxies(proxyIds) {
    this.ensureInitialized();
    return this.storage.bulkTestProxies(proxyIds);
  }
  async exportProxies(format = 'ip_port_username_password', proxyIds = null) {
    this.ensureInitialized();
    return this.storage.exportProxies(format, proxyIds);
  }
  async getAllRooms() {
    this.ensureInitialized();
    return this.storage.getAllRooms();
  }
  async addRoom(roomData) {
    this.ensureInitialized();
    return this.storage.addRoom(roomData);
  }
  async updateRoom(roomUid, updates) {
    this.ensureInitialized();
    return this.storage.updateRoom(roomUid, updates);
  }
  async deleteRoom(roomUid) {
    this.ensureInitialized();
    return this.storage.deleteRoom(roomUid);
  }
  async clearAllAccountRooms() {
    this.ensureInitialized();
    return this.storage.clearAllAccountRooms();
  }
  async addViewerHistoryEntry(roomUid, viewerData) {
    this.ensureInitialized();
    return this.storage.addViewerHistoryEntry(roomUid, viewerData);
  }
  async getRoomViewerHistory(roomUid, days = null) {
    this.ensureInitialized();
    return this.storage.getRoomViewerHistory(roomUid, days);
  }
  async cleanupViewerHistoryFiles() {
    this.ensureInitialized();
    return this.storage.cleanupViewerHistoryFiles();
  }
  async getSettings() {
    this.ensureInitialized();
    return this.storage.getSettings();
  }
  async saveSettings(settings) {
    this.ensureInitialized();
    return this.storage.saveSettings(settings);
  }
  async resetSettings() {
    this.ensureInitialized();
    return this.storage.resetSettings();
  }
  async getAllTasks() {
    this.ensureInitialized();
    return this.storage.getAllTasks();
  }
  async addTask(taskData) {
    this.ensureInitialized();
    return this.storage.addTask(taskData);
  }
  async updateTask(taskId, updates) {
    this.ensureInitialized();
    return this.storage.updateTask(taskId, updates);
  }
  async deleteTask(taskId) {
    this.ensureInitialized();
    return this.storage.deleteTask(taskId);
  }
  async getTaskById(taskId) {
    this.ensureInitialized();
    return this.storage.getTaskById(taskId);
  }
  async importAccountsFromText(text, folderId = null) {
    this.ensureInitialized();
    return this.storage.importAccountsFromText(text, folderId);
  }

  // Account bulk operations
  async bulkSetProxy(accountIds, proxyFolderId, accountsPerProxy = 1, selectedProxies = null) {
    this.ensureInitialized();
    return this.storage.bulkSetProxy(accountIds, proxyFolderId, accountsPerProxy, selectedProxies);
  }
  async bulkRemoveProxy(accountIds) {
    this.ensureInitialized();
    return this.storage.bulkRemoveProxy(accountIds);
  }
  async bulkSetStatus(accountIds, status) {
    this.ensureInitialized();
    return this.storage.bulkSetStatus(accountIds, status);
  }
  async bulkMoveToFolder(accountIds, folderId) {
    this.ensureInitialized();
    return this.storage.bulkMoveToFolder(accountIds, folderId);
  }
  async exportAccountsToText(format, accountIds, folderId) {
    this.ensureInitialized();
    return this.storage.exportAccountsToText(format, accountIds, folderId);
  }

  // Utility methods
  close() {
    if (this.storage && this.storage.close) {
      this.storage.close();
    }
    this.isInitialized = false;
  }
  ensureInitialized() {
    if (!this.isInitialized) {
      throw new Error('Storage adapter not initialized. Call init() first.');
    }
  }
  getStorageType() {
    this.ensureInitialized();
    return this.storage.getStorageType();
  }
  isUsingSQLite() {
    this.ensureInitialized();
    return this.storage.isUsingSQLite();
  }
  getDatabaseInfo() {
    this.ensureInitialized();
    if (this.storage.getDatabaseInfo) {
      return this.storage.getDatabaseInfo();
    }
    return null;
  }

  /**
   * Force migrate t·ª´ JSON sang SQLite
   */
  async forceMigrationToSQLite() {
    try {
      console.log('üîÑ Force migration t·ª´ JSON sang SQLite...');
      const migration = new DataMigration();
      const result = await migration.run();
      if (result.success) {
        // Chuy·ªÉn sang SQLite storage
        if (this.storage && typeof this.storage.close === 'function') {
          this.storage.close();
        }
        this.storage = new SQLiteStorageManager();
        this.storageType = 'sqlite';
        console.log('‚úÖ Force migration th√†nh c√¥ng');
        return {
          success: true,
          results: result.results
        };
      } else {
        console.error('‚ùå Force migration th·∫•t b·∫°i:', result.error);
        return {
          success: false,
          error: result.error
        };
      }
    } catch (error) {
      console.error('‚ùå L·ªói force migration:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Rollback v·ªÅ JSON storage
   */
  async rollbackToJSON() {
    try {
      console.log('üîÑ Rollback v·ªÅ JSON storage...');
      const migration = new DataMigration();
      const result = await migration.rollback();
      if (result.success) {
        // Chuy·ªÉn v·ªÅ JSON storage
        if (this.storage && typeof this.storage.close === 'function') {
          this.storage.close();
        }
        this.storage = new StorageManager();
        this.storageType = 'json';
        console.log('‚úÖ Rollback th√†nh c√¥ng');
        return {
          success: true
        };
      } else {
        console.error('‚ùå Rollback th·∫•t b·∫°i:', result.error);
        return {
          success: false,
          error: result.error
        };
      }
    } catch (error) {
      console.error('‚ùå L·ªói rollback:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // Helper methods (n·∫øu c√≥ trong c·∫£ 2 storage)
  extractUsername(accountInfo) {
    this.ensureInitialized();
    return this.storage.extractUsername(accountInfo);
  }
  extractProxyHost(proxyInfo) {
    this.ensureInitialized();
    return this.storage.extractProxyHost(proxyInfo);
  }
}

// Export class instead of singleton
module.exports = StorageAdapter;

/***/ }),

/***/ "./lib/storage/account-storage.js":
/*!****************************************!*\
  !*** ./lib/storage/account-storage.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const BaseStorage = __webpack_require__(/*! ./base-storage */ "./lib/storage/base-storage.js");
const {
  log,
  error
} = __webpack_require__(/*! ../logger */ "./lib/logger.js");
class AccountStorage extends BaseStorage {
  /**
   * L·∫•y t·∫•t c·∫£ accounts
   */
  async getAllAccounts() {
    try {
      log('üîÑ G·ªçi getAllAccounts');
      const stmt = this.db.prepare(`
                SELECT a.*, f.name as folderName, f.color as folderColor
                FROM accounts a
                LEFT JOIN folders f ON a.folderId = f.id
                ORDER BY a.username ASC
            `);
      const accounts = stmt.all();
      log(`üìä ƒê·ªçc ƒë∆∞·ª£c ${accounts.length} t√†i kho·∫£n t·ª´ database`);

      // X·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ
      const processedAccounts = accounts.map(account => {
        // Parse activeRooms t·ª´ JSON string
        let activeRooms = [];
        try {
          if (account.activeRooms) {
            activeRooms = JSON.parse(account.activeRooms);
          }
        } catch (e) {
          error('‚ùå L·ªói parse activeRooms:', e);
        }

        // X·ª≠ l√Ω metadata
        let metadata = {};
        try {
          if (account.metadata) {
            metadata = JSON.parse(account.metadata);
          }
        } catch (e) {
          error('‚ùå L·ªói parse metadata:', e);
        }
        return {
          ...account,
          // Convert Boolean values
          isLive: Boolean(account.isLive),
          // Parse JSON fields
          activeRooms: activeRooms,
          metadata: metadata,
          // Keep ISO date strings
          lastActive: account.lastActive,
          createdAt: account.createdAt,
          updatedAt: account.updatedAt
        };
      });
      log(`‚úÖ ƒê√£ x·ª≠ l√Ω ${processedAccounts.length} t√†i kho·∫£n, tr·∫£ v·ªÅ cho UI`);
      return this.serializeForIPC(processedAccounts);
    } catch (err) {
      error('‚ùå Error getting all accounts:', err);
      return [];
    }
  }

  /**
   * L·∫•y accounts theo folder
   */
  async getAccountsByFolder(folderId) {
    try {
      log(`üîÑ G·ªçi getAccountsByFolder v·ªõi folderId: ${folderId}`);
      const stmt = this.db.prepare(`
                SELECT a.*, f.name as folderName, f.color as folderColor
                FROM accounts a
                LEFT JOIN folders f ON a.folderId = f.id
                WHERE a.folderId = ?
                ORDER BY a.username ASC
            `);
      const accounts = stmt.all(folderId);
      log(`üìä ƒê·ªçc ƒë∆∞·ª£c ${accounts.length} t√†i kho·∫£n v·ªõi folderId: ${folderId}`);

      // X·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ
      const processedAccounts = accounts.map(account => {
        // Parse activeRooms t·ª´ JSON string
        let activeRooms = [];
        try {
          if (account.activeRooms) {
            activeRooms = JSON.parse(account.activeRooms);
          }
        } catch (e) {
          error('‚ùå L·ªói parse activeRooms:', e);
        }

        // X·ª≠ l√Ω metadata
        let metadata = {};
        try {
          if (account.metadata) {
            metadata = JSON.parse(account.metadata);
          }
        } catch (e) {
          error('‚ùå L·ªói parse metadata:', e);
        }
        return {
          ...account,
          // Convert Boolean values
          isLive: Boolean(account.isLive),
          // Parse JSON fields
          activeRooms: activeRooms,
          metadata: metadata,
          // Keep ISO date strings
          lastActive: account.lastActive,
          createdAt: account.createdAt,
          updatedAt: account.updatedAt
        };
      });
      log(`‚úÖ ƒê√£ x·ª≠ l√Ω ${processedAccounts.length} t√†i kho·∫£n, tr·∫£ v·ªÅ cho UI`);
      return this.serializeForIPC(processedAccounts);
    } catch (error) {
      error('‚ùå Error getting accounts by folder:', error);
      return [];
    }
  }

  /**
   * Th√™m account m·ªõi
   */
  async addAccount(accountData) {
    try {
      const accountId = this.generateId();
      const now = new Date().toISOString();
      const username = this.extractUsername(accountData);

      // Debug info
      log(`üìù Adding account: ${username}`);
      log(`- SessionId: ${accountData.sessionId ? 'Yes (length: ' + accountData.sessionId.length + ')' : 'No'}`);
      log(`- FolderId: ${accountData.folderId || 'null'}`);
      log(`- Status: ${accountData.status || 'active'}`);
      log(`- Notes: ${accountData.notes ? 'Yes (length: ' + accountData.notes.length + ')' : 'No'}`);
      log(`- Has metadata: ${accountData.metadata ? 'Yes' : 'No'}`);

      // Chuy·ªÉn ƒë·ªïi metadata th√†nh chu·ªói JSON
      let metadataJson = '{}';
      if (accountData.metadata) {
        try {
          if (typeof accountData.metadata === 'string') {
            // Ki·ªÉm tra xem ƒë√£ l√† JSON ch∆∞a
            JSON.parse(accountData.metadata);
            metadataJson = accountData.metadata;
          } else {
            metadataJson = JSON.stringify(accountData.metadata);
          }
          log(`- Metadata parsed successfully`);
        } catch (err) {
          error(`‚ùå Error parsing metadata:`, err);
          metadataJson = JSON.stringify({});
        }
      }
      const stmt = this.db.prepare(`
                INSERT INTO accounts (
                    id, username, sessionId, password, email, emailPassword, cookie,
                    folderId, status, lastActive, lastUsed, currentRooms, avatarThumb, roomUsername, activeRooms,
                    viewerCount, followCount, shareCount, totalViews, totalShares, totalFollows, isLive,
                    proxyId, metadata, notes, createdAt, updatedAt
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            `);
      stmt.run(accountId, username, accountData.sessionId || null, accountData.password || null, accountData.email || null, accountData.emailPassword || null, accountData.cookie || null, accountData.folderId || null, accountData.status || 'active', null, accountData.lastUsed || null, accountData.currentRooms || 0, accountData.avatarThumb || null, accountData.roomUsername || null, JSON.stringify(accountData.activeRooms || []), 0, 0, 0, 0, 0, 0, 0, accountData.proxyId || null, metadataJson, accountData.notes || '', now, now);
      const newAccount = {
        id: accountId,
        username: username,
        sessionId: accountData.sessionId || null,
        password: accountData.password || null,
        email: accountData.email || null,
        emailPassword: accountData.emailPassword || null,
        cookie: accountData.cookie || null,
        folderId: accountData.folderId || null,
        status: accountData.status || 'active',
        lastActive: null,
        lastUsed: accountData.lastUsed || null,
        currentRooms: accountData.currentRooms || 0,
        avatarThumb: accountData.avatarThumb || null,
        roomUsername: accountData.roomUsername || null,
        activeRooms: accountData.activeRooms || [],
        viewerCount: 0,
        followCount: 0,
        shareCount: 0,
        totalViews: 0,
        totalShares: 0,
        totalFollows: 0,
        isLive: 0,
        proxyId: accountData.proxyId || null,
        metadata: metadataJson,
        notes: accountData.notes || '',
        createdAt: now,
        updatedAt: now
      };
      log(`‚úÖ Added account: ${username}`);
      return {
        success: true,
        account: this.serializeForIPC(newAccount)
      };
    } catch (err) {
      error('‚ùå Error adding account:', err);
      return {
        success: false,
        error: err.message
      };
    }
  }

  /**
   * X√≥a account
   */
  async deleteAccount(accountId) {
    try {
      // X√≥a account kh·ªèi rooms tr∆∞·ªõc
      await this.clearAccountRooms(accountId);

      // X√≥a account
      const stmt = this.db.prepare(`DELETE FROM accounts WHERE id = ?`);
      const result = stmt.run(accountId);
      if (result.changes > 0) {
        log(`‚úÖ Deleted account ${accountId}`);
        return {
          success: true
        };
      } else {
        return {
          success: false,
          error: 'Account not found'
        };
      }
    } catch (error) {
      error('Error deleting account:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * C·∫≠p nh·∫≠t account
   */
  async updateAccount(id, updates) {
    try {
      const now = new Date().toISOString();
      const setFields = [];
      const values = [];
      for (const [key, value] of Object.entries(updates)) {
        // B·ªè qua c√°c gi√° tr·ªã undefined
        if (value === undefined) {
          log(`‚ö†Ô∏è B·ªè qua tr∆∞·ªùng ${key} v·ªõi gi√° tr·ªã undefined`);
          continue;
        }
        if (key === 'lastUpdated') {
          log('‚ö†Ô∏è C·ªôt lastUpdated ƒë∆∞·ª£c thay ƒë·ªïi th√†nh updatedAt');
          setFields.push(`updatedAt = ?`);
          values.push(String(value) || now);
          continue;
        }
        if (key === 'metadata') {
          setFields.push(`${key} = ?`);
          if (typeof value === 'string') {
            values.push(value);
          } else {
            try {
              values.push(JSON.stringify(value || {}));
            } catch (err) {
              error('‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi metadata th√†nh JSON:', err);
              values.push('{}');
            }
          }
        } else if (key === 'lastActive' || key === 'startedAt' || key === 'endedAt' || key === 'lastTimeCheckViewers' || key === 'stoppedAt') {
          setFields.push(`${key} = ?`);
          values.push(value ? String(value) : null);
        } else if (key === 'avatarThumb' || key === 'roomUsername') {
          // ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng string lu√¥n l√† string ho·∫∑c null
          setFields.push(`${key} = ?`);
          values.push(value !== null && value !== undefined ? String(value) : null);
        } else if (key === 'currentRooms' || key === 'viewerCount' || key === 'followCount' || key === 'shareCount' || key === 'totalViews' || key === 'totalShares' || key === 'totalFollows' || key === 'isLive') {
          // ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng s·ªë lu√¥n l√† s·ªë
          setFields.push(`${key} = ?`);
          values.push(Number(value) || 0);
        } else if (key === 'activeRooms') {
          // ƒê·∫£m b·∫£o activeRooms lu√¥n l√† JSON string
          setFields.push(`${key} = ?`);
          if (typeof value === 'string') {
            try {
              // Ki·ªÉm tra xem ƒë√£ l√† JSON h·ª£p l·ªá ch∆∞a
              JSON.parse(value);
              values.push(value);
            } catch (e) {
              error('‚ùå L·ªói khi parse activeRooms string:', e);
              values.push('[]');
            }
          } else if (Array.isArray(value)) {
            values.push(JSON.stringify(value));
          } else {
            values.push('[]');
          }
        } else {
          // C√°c tr∆∞·ªùng kh√°c
          setFields.push(`${key} = ?`);

          // ƒê·∫£m b·∫£o gi√° tr·ªã l√† ki·ªÉu SQLite h·ª£p l·ªá
          if (value === null) {
            values.push(null);
          } else if (typeof value === 'object') {
            try {
              values.push(JSON.stringify(value));
            } catch (e) {
              error(`‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi ${key} th√†nh JSON:`, e);
              values.push(String(value) || null);
            }
          } else {
            values.push(value);
          }
        }
      }
      if (setFields.length === 0) {
        return {
          success: true
        };
      }
      if (!updates.hasOwnProperty('updatedAt') && !updates.hasOwnProperty('lastUpdated')) {
        setFields.push('updatedAt = ?');
        values.push(now);
      }
      values.push(id);
      const sql = `UPDATE accounts SET ${setFields.join(', ')} WHERE id = ?`;
      const stmt = this.db.prepare(sql);
      log(`üîÑ Updating account ${id} with fields: ${setFields.join(', ')}`);
      const result = stmt.run(...values);
      if (result.changes > 0) {
        log(`‚úÖ Updated account ${id}`);
        return {
          success: true
        };
      } else {
        return {
          success: false,
          error: 'Account not found'
        };
      }
    } catch (err) {
      error('‚ùå Error updating account:', err);
      return {
        success: false,
        error: err.message
      };
    }
  }

  /**
   * C·∫≠p nh·∫≠t stats c·ªßa account
   */
  async updateAccountStats(accountId, stats) {
    try {
      const stmt = this.db.prepare(`
                UPDATE accounts SET 
                    viewerCount = ?,
                    followCount = ?,
                    shareCount = ?,
                    totalViews = ?,
                    totalShares = ?,
                    totalFollows = ?,
                    isLive = ?,
                    lastActive = ?,
                    activeRooms = ?,
                    updatedAt = ?
                WHERE id = ?
            `);
      const result = stmt.run(stats.viewerCount || 0, stats.followCount || 0, stats.shareCount || 0, stats.totalViews || 0, stats.totalShares || 0, stats.totalFollows || 0, stats.isLive ? 1 : 0, new Date().toISOString(), stats.activeRooms ? JSON.stringify(stats.activeRooms) : '[]', new Date().toISOString(), accountId);
      return result.changes > 0;
    } catch (error) {
      error('Error updating account stats:', error);
      return false;
    }
  }

  /**
   * X√≥a t·∫•t c·∫£ room relationships c·ªßa account
   */
  async clearAccountRooms(accountId) {
    try {
      const stmt = this.db.prepare(`
                DELETE FROM account_rooms WHERE accountId = ?
            `);
      const now = new Date().toISOString();

      // C·∫≠p nh·∫≠t tr∆∞·ªùng activeRooms v√† currentRooms trong b·∫£ng accounts
      const updateStmt = this.db.prepare(`
                UPDATE accounts 
                SET activeRooms = '[]',
                    currentRooms = 0,
                    updatedAt = ?
                WHERE id = ?
            `);
      updateStmt.run(now, accountId);
      const result = stmt.run(accountId);
      log(`‚úÖ Cleared ${result.changes} room relationships for account ${accountId}`);
      return result.changes;
    } catch (error) {
      error('Error clearing account rooms:', error);
      return 0;
    }
  }

  /**
   * L·∫•y active rooms c·ªßa account t·ª´ tr∆∞·ªùng activeRooms
   */
  async getAccountActiveRooms(accountId) {
    try {
      // Th·ª≠ ƒë·∫ßu ti√™n t·ª´ tr∆∞·ªùng activeRooms
      const accountStmt = this.db.prepare(`
                SELECT activeRooms FROM accounts WHERE id = ?
            `);
      const accountData = accountStmt.get(accountId);
      if (accountData && accountData.activeRooms) {
        try {
          const activeRooms = JSON.parse(accountData.activeRooms);
          if (Array.isArray(activeRooms) && activeRooms.length > 0) {
            // N·∫øu c√≥ d·ªØ li·ªáu t·ª´ activeRooms, tr·∫£ v·ªÅ
            return this.serializeForIPC(activeRooms);
          }
        } catch (e) {
          error('Error parsing activeRooms JSON:', e);
        }
      }

      // Fall back to relationship table
      const stmt = this.db.prepare(`
                SELECT r.* FROM rooms r
                INNER JOIN account_rooms ar ON r.uid = ar.roomId
                WHERE ar.accountId = ?
                ORDER BY r.createdAt DESC
            `);
      const rooms = stmt.all(accountId).map(room => ({
        ...room,
        createdAt: room.createdAt,
        updatedAt: room.updatedAt
      }));

      // C·∫≠p nh·∫≠t activeRooms trong account
      if (rooms.length > 0) {
        const updateStmt = this.db.prepare(`
                    UPDATE accounts SET activeRooms = ? WHERE id = ?
                `);
        updateStmt.run(JSON.stringify(rooms), accountId);
      }
      return this.serializeForIPC(rooms);
    } catch (error) {
      error('Error getting account active rooms:', error);
      return [];
    }
  }

  /**
   * Import accounts t·ª´ text (m·ªói d√≤ng m·ªôt account)
   */
  async importAccountsFromText(text, folderId = null) {
    try {
      log(`üì• Importing accounts from text. Length: ${text.length}, FolderId: ${folderId || 'null'}, Type: ${typeof folderId}`);

      // X·ª≠ l√Ω folderId n·∫øu l√† 'default' ho·∫∑c null
      if (!folderId || folderId === 'default') {
        // Ki·ªÉm tra xem folder 'default' c√≥ t·ªìn t·∫°i kh√¥ng
        const checkFolder = this.db.prepare(`
                    SELECT id FROM folders WHERE type = 'accounts' AND (id = 'default' OR name = 'Default')
                `).get();
        if (!checkFolder) {
          log('üìÅ Creating default accounts folder');
          // T·∫°o folder m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
          const defaultFolderId = 'default';
          const now = new Date().toISOString();
          const folderStmt = this.db.prepare(`
                        INSERT INTO folders (id, name, type, color, description, createdAt, updatedAt)
                        VALUES (?, ?, ?, ?, ?, ?, ?)
                    `);
          folderStmt.run(defaultFolderId, 'Default', 'accounts', '#3B82F6',
          // Blue color
          'Default folder for accounts', now, now);
          log('‚úÖ Created default accounts folder');
          folderId = defaultFolderId;
        } else {
          folderId = checkFolder.id;
          log(`üìÅ Using existing default folder: ${folderId}`);
        }
      } else {
        // Ki·ªÉm tra xem folder ƒë√£ ch·ªçn c√≥ t·ªìn t·∫°i kh√¥ng
        const checkFolder = this.db.prepare(`
                    SELECT id FROM folders WHERE id = ?
                `).get(folderId);
        if (!checkFolder) {
          error(`‚ùå Folder with ID ${folderId} does not exist`);
          return {
            success: false,
            error: `Folder with ID ${folderId} does not exist`,
            results: [],
            imported: 0,
            total: 0
          };
        }
      }
      const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
      const results = [];
      for (const line of lines) {
        // Parse account info t·ª´ line
        const accountData = this.parseAccountLine(line);
        accountData.folderId = folderId;
        try {
          const result = await this.addAccount(accountData);
          results.push({
            username: accountData.username,
            success: result.success,
            error: result.error
          });
        } catch (error) {
          error(`‚ùå Error adding account ${accountData.username}:`, error);
          results.push({
            username: accountData.username,
            success: false,
            error: error.message
          });
        }
      }
      const successCount = results.filter(r => r.success).length;
      log(`‚úÖ Imported ${successCount}/${results.length} accounts`);
      return {
        success: true,
        results: results,
        imported: successCount,
        total: results.length
      };
    } catch (error) {
      error('‚ùå Error importing accounts from text:', error);
      return {
        success: false,
        error: error.message,
        results: [],
        imported: 0,
        total: 0
      };
    }
  }

  /**
   * Parse account line t·ª´ text
   */
  parseAccountLine(line) {
    // Support multiple formats:
    // 1. Just username: "username123"
    // 2. Username:sessionId: "username123:session_token_here" 
    // 3. JSON format: {"username": "username123", "sessionId": "token", ...}
    // 4. Pipe-separated: "username|password|email|emailpass|cookie"

    try {
      // Try JSON format first
      const jsonData = JSON.parse(line);
      return {
        username: jsonData.username || jsonData.user || '',
        sessionId: jsonData.sessionId || jsonData.session || null,
        password: jsonData.password || null,
        email: jsonData.email || null,
        emailPassword: jsonData.emailPassword || null,
        cookie: jsonData.cookie || null,
        lastUsed: jsonData.lastUsed || null,
        currentRooms: jsonData.currentRooms || 0,
        avatarThumb: jsonData.avatarThumb || null,
        roomUsername: jsonData.roomUsername || null,
        activeRooms: jsonData.activeRooms || [],
        notes: jsonData.notes || '',
        status: jsonData.status || 'active',
        proxyId: jsonData.proxyId || null,
        metadata: jsonData.metadata || {}
      };
    } catch {
      // Th·ª≠ format pipe-separated
      if (line.includes('|')) {
        const parts = line.split('|');
        // username|password|email|emailpass|cookie
        const username = parts[0]?.trim() || '';
        const password = parts[1]?.trim() || '';
        const email = parts[2]?.trim() || '';
        const emailPassword = parts[3]?.trim() || '';
        const cookie = parts[4]?.trim() || '';
        log(`üìù Parsed pipe-separated account: ${username}`);
        return {
          username,
          sessionId: cookie || null,
          // C√≥ th·ªÉ d√πng cookie l√†m sessionId
          password,
          email,
          emailPassword,
          cookie,
          notes: `Email: ${email}`,
          status: 'active',
          proxyId: null,
          currentRooms: 0,
          metadata: {},
          activeRooms: []
        };
      }
      // Th·ª≠ format colon-separated
      else if (line.includes(':')) {
        const parts = line.split(':');
        // C√≥ th·ªÉ c√≥ nhi·ªÅu h∆°n 2 ph·∫ßn (username:sessionId:note:status...)
        if (parts.length >= 2) {
          return {
            username: parts[0].trim(),
            sessionId: parts[1].trim() || null,
            notes: parts[2] ? parts[2].trim() : '',
            status: parts[3] ? parts[3].trim() : 'active',
            proxyId: null,
            currentRooms: 0,
            metadata: {},
            activeRooms: []
          };
        }
      }

      // Just username
      return {
        username: line.trim(),
        sessionId: null,
        notes: '',
        status: 'active',
        proxyId: null,
        currentRooms: 0,
        metadata: {},
        activeRooms: []
      };
    }
  }
}
module.exports = AccountStorage;

/***/ }),

/***/ "./lib/storage/base-storage.js":
/*!*************************************!*\
  !*** ./lib/storage/base-storage.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const Database = __webpack_require__(/*! better-sqlite3 */ "better-sqlite3");
const path = __webpack_require__(/*! path */ "path");
const fs = __webpack_require__(/*! fs */ "fs");
const {
  log,
  error
} = __webpack_require__(/*! ../logger */ "./lib/logger.js");
class BaseStorage {
  constructor() {
    this.db = null;
    this.dbPath = null;
    this.defaultSettings = {
      autoStart: false,
      minimizeToTray: true,
      theme: 'dark',
      notifications: true,
      autoUpdate: true,
      maxConcurrentConnections: 5,
      connectionTimeout: 30000,
      retryDelay: 5000,
      maxRetries: 3
    };
  }

  /**
   * Kh·ªüi t·∫°o database connection
   */
  async init() {
    try {
      const {
        app
      } = __webpack_require__(/*! electron */ "electron");
      const userDataPath = app.getPath('userData');
      this.dbPath = path.join(userDataPath, 'tiktok-live.db');

      // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
      const dir = path.dirname(this.dbPath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, {
          recursive: true
        });
      }
      this.db = new Database(this.dbPath, {
        verbose:  true ? log : 0
      });

      // Enable WAL mode v√† foreign keys
      this.db.pragma('journal_mode = WAL');
      this.db.pragma('foreign_keys = ON');
      this.db.pragma('synchronous = NORMAL');
      log('‚úÖ SQLite database initialized:', this.dbPath);
      return true;
    } catch (err) {
      error('‚ùå Error initializing SQLite database:', err);
      throw err;
    }
  }

  /**
   * ƒê√≥ng database connection
   */
  close() {
    if (this.db) {
      this.db.close();
      this.db = null;
      log('‚úÖ SQLite database closed');
    }
  }

  /**
   * Generate unique ID
   */
  generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }

  /**
   * Extract username t·ª´ account info
   */
  extractUsername(accountInfo) {
    if (typeof accountInfo === 'string') {
      return accountInfo;
    }
    return accountInfo?.username || accountInfo?.uniqueId || accountInfo?.user?.username || 'Unknown';
  }

  /**
   * Extract proxy host t·ª´ proxy info
   */
  extractProxyHost(proxyInfo) {
    if (typeof proxyInfo === 'string') {
      return proxyInfo.split(':')[0] || proxyInfo;
    }
    return proxyInfo?.host || proxyInfo?.ip || 'Unknown';
  }

  /**
   * Serialize object cho IPC compatibility
   */
  serializeForIPC(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
}
module.exports = BaseStorage;

/***/ }),

/***/ "./lib/storage/database-schema.js":
/*!****************************************!*\
  !*** ./lib/storage/database-schema.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const BaseStorage = __webpack_require__(/*! ./base-storage */ "./lib/storage/base-storage.js");
const {
  log,
  error
} = __webpack_require__(/*! ../logger */ "./lib/logger.js");
class DatabaseSchema extends BaseStorage {
  /**
   * T·∫°o t·∫•t c·∫£ tables
   */
  createTables() {
    log('üîß Creating database tables...');

    // Folders table
    this.db.exec(`
            CREATE TABLE IF NOT EXISTS folders (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                type TEXT NOT NULL CHECK (type IN ('accounts', 'proxies')),
                color TEXT DEFAULT '#007bff',
                description TEXT DEFAULT '',
                createdAt TEXT NOT NULL,
                updatedAt TEXT NOT NULL,
                UNIQUE(name, type)
            )
        `);

    // Accounts table
    this.db.exec(`
            CREATE TABLE IF NOT EXISTS accounts (
                id TEXT PRIMARY KEY,
                username TEXT NOT NULL UNIQUE,
                sessionId TEXT,
                password TEXT,
                email TEXT,
                emailPassword TEXT,
                cookie TEXT,
                folderId TEXT,
                status TEXT DEFAULT 'inactive' CHECK (status IN ('active', 'inactive', 'error', 'connecting')),
                lastActive TEXT,
                lastUsed TEXT,
                currentRooms INTEGER DEFAULT 0,
                avatarThumb TEXT,
                roomUsername TEXT,
                activeRooms TEXT DEFAULT '[]',
                viewerCount INTEGER DEFAULT 0,
                followCount INTEGER DEFAULT 0,
                shareCount INTEGER DEFAULT 0,
                totalViews INTEGER DEFAULT 0,
                totalShares INTEGER DEFAULT 0,
                totalFollows INTEGER DEFAULT 0,
                isLive INTEGER DEFAULT 0,
                proxyId TEXT,
                metadata TEXT DEFAULT '{}',
                notes TEXT DEFAULT '',
                createdAt TEXT NOT NULL,
                updatedAt TEXT NOT NULL,
                FOREIGN KEY (folderId) REFERENCES folders(id) ON DELETE SET NULL,
                FOREIGN KEY (proxyId) REFERENCES proxies(id) ON DELETE SET NULL
            )
        `);

    // Proxies table  
    this.db.exec(`
            CREATE TABLE IF NOT EXISTS proxies (
                id TEXT PRIMARY KEY,
                host TEXT NOT NULL,
                port INTEGER NOT NULL,
                username TEXT,
                password TEXT,
                type TEXT DEFAULT 'http' CHECK (type IN ('http', 'https', 'socks4', 'socks5')),
                folderId TEXT,
                status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'error', 'testing', 'unknown')),
                lastTested TEXT,
                responseTime INTEGER DEFAULT 0,
                notes TEXT DEFAULT '',
                createdAt TEXT NOT NULL,
                updatedAt TEXT NOT NULL,
                FOREIGN KEY (folderId) REFERENCES folders(id) ON DELETE SET NULL,
                UNIQUE(host, port)
            )
        `);

    // Rooms table
    this.db.exec(`
            CREATE TABLE IF NOT EXISTS rooms (
                uid TEXT PRIMARY KEY,
                id TEXT,
                roomId TEXT,
                roomUrl TEXT,
                roomUsername TEXT,
                nickname TEXT,
                avatar TEXT,
                avatarThumb TEXT,
                title TEXT DEFAULT '',
                viewerCount INTEGER DEFAULT 0,
                currentViewers INTEGER DEFAULT 0,
                startCount INTEGER DEFAULT 0,
                targetViewers INTEGER DEFAULT 0,
                duration INTEGER DEFAULT 30,
                isLive INTEGER DEFAULT 0,
                lastViewed TEXT,
                notes TEXT DEFAULT '',
                status TEXT DEFAULT 'stopped',
                startedAt TEXT,
                endedAt TEXT,
                realViewers INTEGER DEFAULT 0,
                lastTimeCheckViewers TEXT,
                stoppedAt TEXT,
                stopReason TEXT,
                finalDuration INTEGER DEFAULT 0,
                createdAt TEXT NOT NULL,
                updatedAt TEXT NOT NULL
            )
        `);

    // Account-Room relationship table
    this.db.exec(`
            CREATE TABLE IF NOT EXISTS account_rooms (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                accountId TEXT NOT NULL,
                roomId TEXT NOT NULL,
                createdAt TEXT NOT NULL,
                FOREIGN KEY (accountId) REFERENCES accounts(id) ON DELETE CASCADE,
                FOREIGN KEY (roomId) REFERENCES rooms(uid) ON DELETE CASCADE,
                UNIQUE(accountId, roomId)
            )
        `);

    // Viewer history table
    this.db.exec(`
            CREATE TABLE IF NOT EXISTS viewer_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                roomUid TEXT NOT NULL,
                viewerCount INTEGER NOT NULL,
                timestamp TEXT NOT NULL,
                FOREIGN KEY (roomUid) REFERENCES rooms(uid) ON DELETE CASCADE
            )
        `);

    // Settings table
    this.db.exec(`
            CREATE TABLE IF NOT EXISTS settings (
                key TEXT PRIMARY KEY,
                value TEXT NOT NULL,
                updatedAt TEXT NOT NULL
            )
        `);

    // Tasks table
    this.db.exec(`
            CREATE TABLE IF NOT EXISTS tasks (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                handler TEXT NOT NULL,
                interval INTEGER NOT NULL,
                enabled INTEGER DEFAULT 1,
                status TEXT DEFAULT 'idle' CHECK (status IN ('idle', 'running', 'completed', 'failed')),
                lastRun TEXT,
                nextRun TEXT,
                runCount INTEGER DEFAULT 0,
                errorCount INTEGER DEFAULT 0,
                lastError TEXT,
                createdAt TEXT NOT NULL,
                updatedAt TEXT NOT NULL
            )
        `);

    // Create indexes for better performance
    this.createIndexes();
    log('‚úÖ Database tables created successfully');
  }

  /**
   * T·∫°o indexes
   */
  createIndexes() {
    try {
      // Folders indexes
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_folders_type ON folders(type)`);

      // Accounts indexes
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_accounts_username ON accounts(username)`);
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_accounts_folder ON accounts(folderId)`);
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_accounts_status ON accounts(status)`);
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_accounts_proxy ON accounts(proxyId)`);

      // Proxies indexes
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_proxies_folder ON proxies(folderId)`);
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_proxies_status ON proxies(status)`);
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_proxies_host_port ON proxies(host, port)`);

      // Rooms indexes
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_rooms_roomUsername ON rooms(roomUsername)`);
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_rooms_live ON rooms(isLive)`);

      // Account-rooms indexes
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_account_rooms_account ON account_rooms(accountId)`);
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_account_rooms_room ON account_rooms(roomId)`);

      // Viewer history indexes
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_viewer_history_room ON viewer_history(roomUid)`);
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_viewer_history_timestamp ON viewer_history(timestamp)`);

      // Tasks indexes
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_tasks_status ON tasks(status)`);
      this.db.exec(`CREATE INDEX IF NOT EXISTS idx_tasks_enabled ON tasks(enabled)`);
      log('‚úÖ Database indexes created successfully');
    } catch (error) {
      error('‚ùå Error creating indexes:', error);
    }
  }

  /**
   * Insert default data
   */
  async insertDefaultData() {
    try {
      log('üîß Inserting default data...');

      // Insert default settings
      const settingsStmt = this.db.prepare(`
                INSERT OR IGNORE INTO settings (key, value, updatedAt)
                VALUES (?, ?, ?)
            `);
      const now = new Date().toISOString();
      for (const [key, value] of Object.entries(this.defaultSettings)) {
        settingsStmt.run(key, JSON.stringify(value), now);
      }
      log('‚úÖ Default data inserted successfully');
    } catch (error) {
      error('‚ùå Error inserting default data:', error);
      throw error;
    }
  }

  /**
   * Ki·ªÉm tra database integrity
   */
  checkIntegrity() {
    try {
      const result = this.db.pragma('integrity_check');
      if (result[0].integrity_check === 'ok') {
        log('‚úÖ Database integrity check passed');
        return true;
      } else {
        error('‚ùå Database integrity check failed:', result);
        return false;
      }
    } catch (error) {
      error('‚ùå Error checking database integrity:', error);
      return false;
    }
  }

  /**
   * Ki·ªÉm tra v√† c·∫≠p nh·∫≠t schema database
   */
  async migrateSchema() {
    try {
      log('üîß Checking and migrating database schema...');

      // Ki·ªÉm tra v√† s·ª≠a b·∫£ng rooms n·∫øu c√≥ v·∫•n ƒë·ªÅ
      await this.fixRoomsTable();

      // Ki·ªÉm tra c·ªôt activeRooms trong b·∫£ng accounts
      if (!this.columnExists('accounts', 'activeRooms')) {
        log('‚ûï Adding column activeRooms to accounts table');
        this.db.exec(`ALTER TABLE accounts ADD COLUMN activeRooms TEXT DEFAULT '[]'`);
      }

      // Ki·ªÉm tra c·ªôt password trong b·∫£ng accounts
      if (!this.columnExists('accounts', 'password')) {
        log('‚ûï Adding column password to accounts table');
        this.db.exec(`ALTER TABLE accounts ADD COLUMN password TEXT`);
      }

      // Ki·ªÉm tra c·ªôt email trong b·∫£ng accounts
      if (!this.columnExists('accounts', 'email')) {
        log('‚ûï Adding column email to accounts table');
        this.db.exec(`ALTER TABLE accounts ADD COLUMN email TEXT`);
      }

      // Ki·ªÉm tra c·ªôt emailPassword trong b·∫£ng accounts
      if (!this.columnExists('accounts', 'emailPassword')) {
        log('‚ûï Adding column emailPassword to accounts table');
        this.db.exec(`ALTER TABLE accounts ADD COLUMN emailPassword TEXT`);
      }

      // Ki·ªÉm tra c·ªôt lastUsed trong b·∫£ng accounts
      if (!this.columnExists('accounts', 'lastUsed')) {
        log('‚ûï Adding column lastUsed to accounts table');
        this.db.exec(`ALTER TABLE accounts ADD COLUMN lastUsed TEXT`);
      }

      // Ki·ªÉm tra c·ªôt currentRooms trong b·∫£ng accounts
      if (!this.columnExists('accounts', 'currentRooms')) {
        log('‚ûï Adding column currentRooms to accounts table');
        this.db.exec(`ALTER TABLE accounts ADD COLUMN currentRooms INTEGER DEFAULT 0`);
      }

      // Ki·ªÉm tra c·ªôt avatarThumb trong b·∫£ng accounts
      if (!this.columnExists('accounts', 'avatarThumb')) {
        log('‚ûï Adding column avatarThumb to accounts table');
        this.db.exec(`ALTER TABLE accounts ADD COLUMN avatarThumb TEXT`);
      }

      // Ki·ªÉm tra c·ªôt roomUsername trong b·∫£ng accounts
      if (!this.columnExists('accounts', 'roomUsername')) {
        log('‚ûï Adding column roomUsername to accounts table');
        this.db.exec(`ALTER TABLE accounts ADD COLUMN roomUsername TEXT`);
      }
      // Ki·ªÉm tra c·ªôt cookie trong b·∫£ng accounts
      if (!this.columnExists('accounts', 'cookie')) {
        log('‚ûï Adding column cookie to accounts table');
        this.db.exec(`ALTER TABLE accounts ADD COLUMN cookie TEXT`);
      }

      // Ki·ªÉm tra xem c√≥ c·ªôt username trong b·∫£ng rooms kh√¥ng (l·ªói schema c≈©)
      if (this.columnExists('rooms', 'username') && !this.columnExists('rooms', 'roomUsername')) {
        log('üîÑ Migrating from username to roomUsername in rooms table');
        // Th√™m c·ªôt roomUsername m·ªõi
        this.db.exec(`ALTER TABLE rooms ADD COLUMN roomUsername TEXT`);

        // Sao ch√©p d·ªØ li·ªáu t·ª´ username sang roomUsername
        this.db.exec(`UPDATE rooms SET roomUsername = username WHERE roomUsername IS NULL AND username IS NOT NULL`);

        // Thay ƒë·ªïi index
        this.db.exec(`DROP INDEX IF EXISTS idx_rooms_username`);
        this.db.exec(`CREATE INDEX IF NOT EXISTS idx_rooms_roomUsername ON rooms(roomUsername)`);
      }

      // Ki·ªÉm tra c√°c tr∆∞·ªùng b·ªï sung trong b·∫£ng rooms
      const additionalRoomColumns = [{
        name: 'id',
        type: 'TEXT'
      }, {
        name: 'roomId',
        type: 'TEXT'
      }, {
        name: 'roomUrl',
        type: 'TEXT'
      }, {
        name: 'roomUsername',
        type: 'TEXT'
      }, {
        name: 'avatarThumb',
        type: 'TEXT'
      }, {
        name: 'startCount',
        type: 'INTEGER DEFAULT 0'
      }, {
        name: 'targetViewers',
        type: 'INTEGER DEFAULT 0'
      }, {
        name: 'currentViewers',
        type: 'INTEGER DEFAULT 0'
      }, {
        name: 'duration',
        type: 'INTEGER DEFAULT 30'
      }, {
        name: 'status',
        type: 'TEXT DEFAULT "stopped"'
      }, {
        name: 'startedAt',
        type: 'TEXT'
      }, {
        name: 'endedAt',
        type: 'TEXT'
      }, {
        name: 'realViewers',
        type: 'INTEGER DEFAULT 0'
      }, {
        name: 'lastTimeCheckViewers',
        type: 'TEXT'
      }, {
        name: 'stoppedAt',
        type: 'TEXT'
      }, {
        name: 'stopReason',
        type: 'TEXT'
      }, {
        name: 'finalDuration',
        type: 'INTEGER DEFAULT 0'
      }];
      for (const column of additionalRoomColumns) {
        if (!this.columnExists('rooms', column.name)) {
          log(`‚ûï Adding column ${column.name} to rooms table`);
          this.db.exec(`ALTER TABLE rooms ADD COLUMN ${column.name} ${column.type}`);
        }
      }

      // C·∫≠p nh·∫≠t c√°c constraint cho tr·∫°ng th√°i
      try {
        // Ki·ªÉm tra ƒë·ªãnh nghƒ©a constraint status trong b·∫£ng proxies
        const proxyStatusInfo = this.db.prepare(`
                    SELECT sql FROM sqlite_master 
                    WHERE type='table' AND name='proxies'
                `).get();

        // N·∫øu kh√¥ng c√≥ constraint 'active' th√¨ th√™m v√†o
        if (proxyStatusInfo && proxyStatusInfo.sql && !proxyStatusInfo.sql.includes("'active'") && proxyStatusInfo.sql.includes("status TEXT")) {
          log('üîÑ Recreating proxies table with updated status constraint');
          // L∆∞u d·ªØ li·ªáu hi·ªán t·∫°i
          this.db.exec(`CREATE TABLE IF NOT EXISTS proxies_temp AS SELECT * FROM proxies`);
          // X√≥a b·∫£ng c≈©
          this.db.exec(`DROP TABLE proxies`);
          // T·∫°o l·∫°i b·∫£ng v·ªõi constraint m·ªõi
          this.db.exec(`
                        CREATE TABLE IF NOT EXISTS proxies (
                            id TEXT PRIMARY KEY,
                            host TEXT NOT NULL,
                            port INTEGER NOT NULL,
                            username TEXT,
                            password TEXT,
                            type TEXT DEFAULT 'http' CHECK (type IN ('http', 'https', 'socks4', 'socks5')),
                            folderId TEXT,
                            status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'error', 'testing', 'unknown')),
                            lastTested TEXT,
                            responseTime INTEGER DEFAULT 0,
                            notes TEXT DEFAULT '',
                            createdAt TEXT NOT NULL,
                            updatedAt TEXT NOT NULL,
                            FOREIGN KEY (folderId) REFERENCES folders(id) ON DELETE SET NULL,
                            UNIQUE(host, port)
                        )
                    `);
          // Kh√¥i ph·ª•c d·ªØ li·ªáu
          this.db.exec(`INSERT INTO proxies SELECT * FROM proxies_temp`);
          // X√≥a b·∫£ng t·∫°m
          this.db.exec(`DROP TABLE proxies_temp`);
        }

        // Ki·ªÉm tra ƒë·ªãnh nghƒ©a constraint status trong b·∫£ng accounts
        const accountStatusInfo = this.db.prepare(`
                    SELECT sql FROM sqlite_master 
                    WHERE type='table' AND name='accounts'
                `).get();
        if (accountStatusInfo && accountStatusInfo.sql && !accountStatusInfo.sql.includes("'active'") && accountStatusInfo.sql.includes("status TEXT")) {
          log('üîÑ Recreating accounts table with updated status constraint');
          // L∆∞u d·ªØ li·ªáu hi·ªán t·∫°i
          this.db.exec(`CREATE TABLE IF NOT EXISTS accounts_temp AS SELECT * FROM accounts`);
          // X√≥a b·∫£ng c≈©
          this.db.exec(`DROP TABLE accounts`);
          // T·∫°o l·∫°i b·∫£ng v·ªõi constraint m·ªõi
          this.createTables(); // T·∫°o l·∫°i t·∫•t c·∫£ tables
          // Kh√¥i ph·ª•c d·ªØ li·ªáu
          this.db.exec(`
                        INSERT OR IGNORE INTO accounts 
                        SELECT * FROM accounts_temp
                    `);
          // X√≥a b·∫£ng t·∫°m
          this.db.exec(`DROP TABLE accounts_temp`);
        }
      } catch (error) {
        error('‚ùå Error updating constraints:', error);
      }
      log('‚úÖ Database schema migration completed successfully');
      return true;
    } catch (error) {
      error('‚ùå Error migrating database schema:', error);
      throw error;
    }
  }

  /**
   * Ki·ªÉm tra xem c·ªôt c√≥ t·ªìn t·∫°i trong b·∫£ng kh√¥ng
   */
  columnExists(table, column) {
    try {
      const result = this.db.prepare(`PRAGMA table_info(${table})`).all();
      return result.some(col => col.name === column);
    } catch (error) {
      error(`‚ùå Error checking if column ${column} exists in ${table}:`, error);
      return false;
    }
  }

  /**
   * Get database info
   */
  getDatabaseInfo() {
    try {
      const info = {
        path: this.dbPath,
        size: (__webpack_require__(/*! fs */ "fs").statSync)(this.dbPath).size,
        tables: [],
        version: this.db.pragma('user_version')[0].user_version
      };

      // Get table names v√† row counts
      const tables = this.db.prepare(`
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name NOT LIKE 'sqlite_%'
            `).all();
      for (const table of tables) {
        const count = this.db.prepare(`SELECT COUNT(*) as count FROM ${table.name}`).get();
        info.tables.push({
          name: table.name,
          rows: count.count
        });
      }
      return info;
    } catch (error) {
      error('Error getting database info:', error);
      return null;
    }
  }

  /**
   * Ki·ªÉm tra v√† s·ª≠a ch·ªØa b·∫£ng rooms n·∫øu c√≥ l·ªói schema
   */
  async fixRoomsTable() {
    try {
      log('üîß Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng rooms...');

      // L·∫•y th√¥ng tin v·ªÅ b·∫£ng rooms
      const tableInfo = this.db.prepare(`SELECT sql FROM sqlite_master WHERE type = 'table' AND name = 'rooms'`).get();

      // Ki·ªÉm tra xem b·∫£ng c√≥ c·ªôt username b·∫Øt bu·ªôc kh√¥ng t·ªìn t·∫°i trong schema
      if (tableInfo && tableInfo.sql && tableInfo.sql.includes('username TEXT NOT NULL')) {
        log('‚ùå Ph√°t hi·ªán schema l·ªói: c·ªôt username NOT NULL trong b·∫£ng rooms');

        // L∆∞u d·ªØ li·ªáu hi·ªán t·∫°i
        log('‚è≥ Sao l∆∞u d·ªØ li·ªáu hi·ªán t·∫°i...');
        this.db.exec(`CREATE TABLE IF NOT EXISTS rooms_backup AS SELECT * FROM rooms`);

        // X√≥a index c≈©
        log('‚è≥ X√≥a index c≈©...');
        this.db.exec(`DROP INDEX IF EXISTS idx_rooms_username`);
        this.db.exec(`DROP INDEX IF EXISTS idx_rooms_live`);

        // X√≥a b·∫£ng c≈©
        log('‚è≥ X√≥a b·∫£ng c≈© ƒë·ªÉ t·∫°o l·∫°i...');
        this.db.exec(`DROP TABLE rooms`);

        // T·∫°o l·∫°i b·∫£ng v·ªõi schema ƒë√∫ng
        log('‚è≥ T·∫°o l·∫°i b·∫£ng v·ªõi schema ch√≠nh x√°c...');
        this.db.exec(`
                    CREATE TABLE IF NOT EXISTS rooms (
                        uid TEXT PRIMARY KEY,
                        id TEXT,
                        roomId TEXT,
                        roomUrl TEXT,
                        roomUsername TEXT,
                        nickname TEXT,
                        avatar TEXT,
                        avatarThumb TEXT,
                        title TEXT DEFAULT '',
                        viewerCount INTEGER DEFAULT 0,
                        currentViewers INTEGER DEFAULT 0,
                        startCount INTEGER DEFAULT 0,
                        targetViewers INTEGER DEFAULT 0,
                        duration INTEGER DEFAULT 30,
                        isLive INTEGER DEFAULT 0,
                        lastViewed TEXT,
                        notes TEXT DEFAULT '',
                        status TEXT DEFAULT 'stopped',
                        startedAt TEXT,
                        endedAt TEXT,
                        realViewers INTEGER DEFAULT 0,
                        lastTimeCheckViewers TEXT,
                        stoppedAt TEXT,
                        stopReason TEXT,
                        finalDuration INTEGER DEFAULT 0,
                        createdAt TEXT NOT NULL,
                        updatedAt TEXT NOT NULL
                    )
                `);

        // T·∫°o l·∫°i index
        log('‚è≥ T·∫°o l·∫°i index...');
        this.db.exec(`CREATE INDEX IF NOT EXISTS idx_rooms_roomUsername ON rooms(roomUsername)`);
        this.db.exec(`CREATE INDEX IF NOT EXISTS idx_rooms_live ON rooms(isLive)`);

        // Kh√¥i ph·ª•c d·ªØ li·ªáu - sao ch√©p t·ª´ username sang roomUsername
        log('‚è≥ Kh√¥i ph·ª•c d·ªØ li·ªáu t·ª´ b·∫£ng backup...');
        this.db.exec(`
                    INSERT INTO rooms 
                    SELECT 
                        uid, id, roomId, roomUrl, 
                        COALESCE(roomUsername, username) as roomUsername,
                        nickname, avatar, avatarThumb, title,
                        viewerCount, currentViewers, startCount, targetViewers, 
                        duration, isLive, lastViewed, notes, 
                        status, startedAt, endedAt, realViewers, 
                        lastTimeCheckViewers, stoppedAt, stopReason, finalDuration,
                        createdAt, updatedAt 
                    FROM rooms_backup
                `);

        // X√≥a b·∫£ng backup
        log('‚è≥ X√≥a b·∫£ng backup...');
        this.db.exec(`DROP TABLE rooms_backup`);
        log('‚úÖ ƒê√£ s·ª≠a ch·ªØa b·∫£ng rooms th√†nh c√¥ng!');
      } else {
        log('‚úÖ C·∫•u tr√∫c b·∫£ng rooms OK');
      }
      return true;
    } catch (error) {
      error('‚ùå Error fixing rooms table:', error);
      return false;
    }
  }
}
module.exports = DatabaseSchema;

/***/ }),

/***/ "./lib/storage/folder-storage.js":
/*!***************************************!*\
  !*** ./lib/storage/folder-storage.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const BaseStorage = __webpack_require__(/*! ./base-storage */ "./lib/storage/base-storage.js");
const {
  randomUUID
} = __webpack_require__(/*! crypto */ "crypto");
const {
  log,
  error
} = __webpack_require__(/*! ../logger */ "./lib/logger.js");
class FolderStorage extends BaseStorage {
  /**
   * L·∫•y t·∫•t c·∫£ folders theo type
   */
  async getAllFolders(type = 'accounts') {
    try {
      log(`üîç Getting all folders for type: ${type}`);
      const stmt = this.db.prepare(`
                SELECT * FROM folders 
                WHERE type = ? 
                ORDER BY name ASC
            `);
      const folders = stmt.all(type).map(folder => ({
        ...folder,
        // Keep as ISO strings for IPC compatibility
        createdAt: folder.createdAt,
        updatedAt: folder.updatedAt
      }));
      log(`‚úÖ Found ${folders.length} folders for type ${type}`);
      return this.serializeForIPC(folders);
    } catch (err) {
      error('‚ùå Error getting all folders:', err);
      return [];
    }
  }

  /**
   * T·∫°o folder m·ªõi
   */
  async createFolder(type, folderData) {
    try {
      log(`üîß Creating new folder: ${folderData.name} (type: ${type})`);

      // Ki·ªÉm tra folder ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingFolder = await this.getFolderByName(type, folderData.name);
      if (existingFolder) {
        log(`‚ö†Ô∏è Folder already exists: ${folderData.name}`);
        return {
          success: false,
          error: `Folder '${folderData.name}' ƒë√£ t·ªìn t·∫°i trong ${type}`
        };
      }
      const id = randomUUID();
      const now = new Date().toISOString();
      const stmt = this.db.prepare(`
                INSERT INTO folders (
                    id, name, type, color, description,
                    createdAt, updatedAt
                ) VALUES (?, ?, ?, ?, ?, ?, ?)
            `);
      stmt.run(id, folderData.name, type, folderData.color || '#007bff', folderData.description || '', now, now);
      const newFolder = {
        id,
        name: folderData.name,
        type,
        color: folderData.color || '#007bff',
        description: folderData.description || '',
        createdAt: now,
        updatedAt: now
      };
      log(`‚úÖ Created new folder: ${folderData.name} (id: ${id})`);
      return {
        success: true,
        data: newFolder
      };
    } catch (err) {
      error('‚ùå Error creating folder:', err);
      return {
        success: false,
        error: err.message
      };
    }
  }

  /**
   * C·∫≠p nh·∫≠t folder
   */
  async updateFolder(type, folderId, updates) {
    try {
      const now = new Date().toISOString();
      const setFields = [];
      const values = [];
      for (const [key, value] of Object.entries(updates)) {
        setFields.push(`${key} = ?`);
        values.push(value);
      }
      if (setFields.length === 0) {
        return {
          success: true
        };
      }
      setFields.push('updatedAt = ?');
      values.push(now);
      values.push(folderId);
      const sql = `UPDATE folders SET ${setFields.join(', ')} WHERE id = ? AND type = ?`;
      values.push(type);
      const stmt = this.db.prepare(sql);
      const result = stmt.run(...values);
      if (result.changes > 0) {
        log(`‚úÖ Updated ${type} folder ${folderId}`);
        return {
          success: true
        };
      } else {
        return {
          success: false,
          error: 'Folder not found'
        };
      }
    } catch (error) {
      error('Error updating folder:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * X√≥a folder
   */
  async deleteFolder(type, folderId) {
    try {
      // Ki·ªÉm tra xem folder c√≥ items kh√¥ng
      const checkTable = type === 'accounts' ? 'accounts' : 'proxies';
      const checkStmt = this.db.prepare(`
                SELECT COUNT(*) as count FROM ${checkTable} WHERE folderId = ?
            `);
      const result = checkStmt.get(folderId);
      if (result.count > 0) {
        return {
          success: false,
          error: `Cannot delete folder. It contains ${result.count} items.`
        };
      }

      // X√≥a folder
      const deleteStmt = this.db.prepare(`
                DELETE FROM folders WHERE id = ? AND type = ?
            `);
      const deleteResult = deleteStmt.run(folderId, type);
      if (deleteResult.changes > 0) {
        log(`‚úÖ Deleted ${type} folder ${folderId}`);
        return {
          success: true
        };
      } else {
        return {
          success: false,
          error: 'Folder not found'
        };
      }
    } catch (err) {
      error('Error deleting folder:', err);
      return {
        success: false,
        error: err.message
      };
    }
  }

  /**
   * Get folder by ID
   */
  async getFolderById(type, folderId) {
    try {
      const stmt = this.db.prepare(`
                SELECT * FROM folders WHERE id = ? AND type = ?
            `);
      const folder = stmt.get(folderId, type);
      return folder ? this.serializeForIPC(folder) : null;
    } catch (error) {
      error('Error getting folder by ID:', error);
      return null;
    }
  }

  /**
   * L·∫•y folder theo t√™n
   */
  async getFolderByName(type, name) {
    try {
      log(`üîé Looking for folder with name: "${name}" and type: "${type}"`);
      const stmt = this.db.prepare(`
                SELECT * FROM folders 
                WHERE type = ? AND name = ?
            `);
      const result = stmt.get(type, name);
      log(`üîç Folder lookup result: ${result ? `Found folder with ID ${result.id}` : 'No folder found'}`);
      return result;
    } catch (err) {
      error('‚ùå Error getting folder by name:', err);
      return null;
    }
  }
}
module.exports = FolderStorage;

/***/ }),

/***/ "./lib/storage/proxy-storage.js":
/*!**************************************!*\
  !*** ./lib/storage/proxy-storage.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const BaseStorage = __webpack_require__(/*! ./base-storage */ "./lib/storage/base-storage.js");
const {
  log,
  error
} = __webpack_require__(/*! ../../lib/logger */ "./lib/logger.js");
class ProxyStorage extends BaseStorage {
  /**
   * L·∫•y t·∫•t c·∫£ proxies
   */
  async getAllProxies() {
    try {
      const stmt = this.db.prepare(`
                SELECT p.*, f.name as folderName, f.color as folderColor
                FROM proxies p
                LEFT JOIN folders f ON p.folderId = f.id
                ORDER BY p.host ASC
            `);
      const proxies = stmt.all().map(proxy => ({
        ...proxy,
        port: parseInt(proxy.port),
        // Ensure port is integer for IPC
        lastTested: proxy.lastTested,
        createdAt: proxy.createdAt,
        updatedAt: proxy.updatedAt
      }));
      return this.serializeForIPC(proxies);
    } catch (error) {
      error('Error getting all proxies:', error);
      return [];
    }
  }

  /**
   * L·∫•y proxies theo folder
   */
  async getProxiesByFolder(folderId) {
    try {
      const stmt = this.db.prepare(`
                SELECT p.*, f.name as folderName, f.color as folderColor
                FROM proxies p
                LEFT JOIN folders f ON p.folderId = f.id
                WHERE p.folderId = ?
                ORDER BY p.host ASC
            `);
      const proxies = stmt.all(folderId).map(proxy => ({
        ...proxy,
        port: parseInt(proxy.port),
        lastTested: proxy.lastTested,
        createdAt: proxy.createdAt,
        updatedAt: proxy.updatedAt
      }));
      return this.serializeForIPC(proxies);
    } catch (error) {
      error('Error getting proxies by folder:', error);
      return [];
    }
  }

  /**
   * Th√™m proxy m·ªõi
   */
  async addProxy(proxyData) {
    try {
      // T·∫°o ID m·ªõi n·∫øu ch∆∞a c√≥
      const proxyId = proxyData.id || this.generateId();
      const now = new Date().toISOString();

      // Host l√† b·∫Øt bu·ªôc
      if (!proxyData.host) {
        return {
          success: false,
          error: 'Host is required for proxy'
        };
      }

      // Validate port
      const port = parseInt(proxyData.port) || 8080;

      // Ki·ªÉm tra xem proxy ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingProxy = this.db.prepare(`
                SELECT id FROM proxies WHERE host = ? AND port = ?
            `).get(proxyData.host, port);
      if (existingProxy) {
        log(`‚ö†Ô∏è Proxy ${proxyData.host}:${port} ƒë√£ t·ªìn t·∫°i, s·∫Ω c·∫≠p nh·∫≠t`);
        return this.updateProxy(existingProxy.id, {
          ...proxyData,
          updatedAt: now
        });
      }
      log(`üìù Adding proxy: ${proxyData.host}:${port}`);

      // Th√™m proxy m·ªõi
      const stmt = this.db.prepare(`
                INSERT INTO proxies (
                    id, host, port, username, password, 
                    type, folderId, status, lastTested, 
                    responseTime, notes, createdAt, updatedAt
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            `);
      stmt.run(proxyId, proxyData.host, port, proxyData.username || null, proxyData.password || null, proxyData.type || 'http', proxyData.folderId || null, proxyData.status || 'active',
      // M·∫∑c ƒë·ªãnh l√† active
      null, 0, proxyData.notes || '', now, now);
      const newProxy = {
        id: proxyId,
        host: proxyData.host,
        port: port,
        username: proxyData.username || null,
        password: proxyData.password || null,
        type: proxyData.type || 'http',
        folderId: proxyData.folderId || null,
        status: proxyData.status || 'active',
        // M·∫∑c ƒë·ªãnh l√† active
        lastTested: null,
        responseTime: 0,
        notes: proxyData.notes || '',
        createdAt: now,
        updatedAt: now
      };
      log(`‚úÖ Added proxy: ${proxyData.host}:${port}`);
      return {
        success: true,
        proxy: this.serializeForIPC(newProxy)
      };
    } catch (error) {
      error('Error adding proxy:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * X√≥a proxy
   */
  async deleteProxy(proxyId) {
    try {
      // Update accounts using this proxy
      const updateAccountsStmt = this.db.prepare(`
                UPDATE accounts SET proxyId = NULL WHERE proxyId = ?
            `);
      updateAccountsStmt.run(proxyId);

      // Delete proxy
      const stmt = this.db.prepare(`DELETE FROM proxies WHERE id = ?`);
      const result = stmt.run(proxyId);
      if (result.changes > 0) {
        log(`‚úÖ Deleted proxy ${proxyId}`);
        return {
          success: true
        };
      } else {
        return {
          success: false,
          error: 'Proxy not found'
        };
      }
    } catch (error) {
      error('Error deleting proxy:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * C·∫≠p nh·∫≠t proxy
   */
  async updateProxy(id, updates) {
    try {
      const now = new Date().toISOString();
      const setFields = [];
      const values = [];
      for (const [key, value] of Object.entries(updates)) {
        // S·ª≠a l·ªói lastUpdated -> updatedAt
        if (key === 'lastUpdated') {
          log('‚ö†Ô∏è C·ªôt lastUpdated ƒë∆∞·ª£c thay ƒë·ªïi th√†nh updatedAt');
          setFields.push(`updatedAt = ?`);
          values.push(value);
          continue;
        }
        if (key === 'metadata') {
          setFields.push(`${key} = ?`);
          values.push(JSON.stringify(value));
        } else if (key === 'lastCheck') {
          setFields.push(`${key} = ?`);
          values.push(value ? value : null);
        } else {
          setFields.push(`${key} = ?`);
          values.push(value);
        }
      }
      if (setFields.length === 0) {
        return {
          success: true
        };
      }

      // Ch·ªâ th√™m updatedAt n·∫øu kh√¥ng ƒë√£ c√≥ trong updates
      if (!updates.hasOwnProperty('updatedAt') && !updates.hasOwnProperty('lastUpdated')) {
        setFields.push('updatedAt = ?');
        values.push(now);
      }
      values.push(id);
      const sql = `UPDATE proxies SET ${setFields.join(', ')} WHERE id = ?`;
      const stmt = this.db.prepare(sql);
      log(`üîÑ Updating proxy ${id} with fields: ${setFields.join(', ')}`);
      const result = stmt.run(...values);
      if (result.changes > 0) {
        log(`‚úÖ Updated proxy ${id}`);
        return {
          success: true
        };
      } else {
        return {
          success: false,
          error: 'Proxy not found'
        };
      }
    } catch (error) {
      error('Error updating proxy:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Test proxy connection
   */
  async testProxy(proxyId) {
    try {
      const stmt = this.db.prepare(`SELECT * FROM proxies WHERE id = ?`);
      const proxy = stmt.get(proxyId);
      if (!proxy) {
        return {
          success: false,
          error: 'Proxy not found'
        };
      }

      // Update status to testing
      await this.updateProxy(proxyId, {
        status: 'testing'
      });
      const startTime = Date.now();
      let status = 'error';
      let responseTime = 0;
      try {
        // Test proxy b·∫±ng axios v·ªõi timeout
        const axios = __webpack_require__(/*! axios */ "axios");
        const HttpsProxyAgent = __webpack_require__(/*! https-proxy-agent */ "https-proxy-agent");
        const proxyUrl = proxy.username && proxy.password ? `${proxy.type}://${proxy.username}:${proxy.password}@${proxy.host}:${proxy.port}` : `${proxy.type}://${proxy.host}:${proxy.port}`;
        const agent = new HttpsProxyAgent(proxyUrl);
        await axios.get('https://httpbin.org/ip', {
          httpsAgent: agent,
          timeout: 10000
        });
        responseTime = Date.now() - startTime;
        status = 'active';
      } catch (error) {
        log(`Proxy test failed for ${proxy.host}:${proxy.port}:`, error.message);
        responseTime = Date.now() - startTime;
        status = 'error';
      }

      // Update proxy with test results
      await this.updateProxy(proxyId, {
        status: status,
        responseTime: responseTime,
        lastTested: new Date().toISOString()
      });
      log(`‚úÖ Tested proxy ${proxy.host}:${proxy.port} - ${status} (${responseTime}ms)`);
      return {
        success: true,
        status: status,
        responseTime: responseTime
      };
    } catch (error) {
      error('Error testing proxy:', error);

      // Update status to failed on error
      await this.updateProxy(proxyId, {
        status: 'failed',
        lastTested: new Date().toISOString()
      });
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Get proxy by ID
   */
  async getProxyById(proxyId) {
    try {
      const stmt = this.db.prepare(`SELECT * FROM proxies WHERE id = ?`);
      const proxy = stmt.get(proxyId);
      if (!proxy) {
        log(`‚ö†Ô∏è Proxy not found with ID: ${proxyId}`);
        return null;
      }

      // Format proxyInfo ƒë·ªÉ d·ªÖ s·ª≠ d·ª•ng
      let proxyInfo;
      if (proxy.username && proxy.password) {
        proxyInfo = `${proxy.username}:${proxy.password}@${proxy.host}:${proxy.port}`;
      } else {
        proxyInfo = `${proxy.host}:${proxy.port}`;
      }
      return {
        id: proxy.id,
        host: proxy.host,
        port: proxy.port,
        username: proxy.username,
        password: proxy.password,
        type: proxy.type,
        status: proxy.status,
        folderId: proxy.folderId,
        lastTested: proxy.lastTested,
        responseTime: proxy.responseTime,
        notes: proxy.notes,
        createdAt: proxy.createdAt,
        updatedAt: proxy.updatedAt,
        proxyInfo: proxyInfo
      };
    } catch (error) {
      error('Error getting proxy by ID:', error);
      return null;
    }
  }

  /**
   * Import proxies t·ª´ text (m·ªói d√≤ng m·ªôt proxy)
   */
  async importProxiesFromText(text, folderId = null) {
    try {
      log(`üì• Importing proxies from text. Length: ${text.length}, FolderId: ${folderId || 'null'}`);

      // X·ª≠ l√Ω folderId n·∫øu l√† 'default' ho·∫∑c null
      if (!folderId || folderId === 'default') {
        // Ki·ªÉm tra xem folder 'default' c√≥ t·ªìn t·∫°i kh√¥ng
        const checkFolder = this.db.prepare(`
                    SELECT id FROM folders WHERE type = 'proxies' AND (id = 'default' OR name = 'Default')
                `).get();
        if (!checkFolder) {
          log('üìÅ Creating default proxies folder');
          // T·∫°o folder m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
          const defaultFolderId = 'default';
          const now = new Date().toISOString();
          const folderStmt = this.db.prepare(`
                        INSERT INTO folders (id, name, type, color, description, createdAt, updatedAt)
                        VALUES (?, ?, ?, ?, ?, ?, ?)
                    `);
          folderStmt.run(defaultFolderId, 'Default', 'proxies', '#3B82F6',
          // Blue color
          'Default folder for proxies', now, now);
          log('‚úÖ Created default proxies folder');
          folderId = defaultFolderId;
        } else {
          folderId = checkFolder.id;
          log(`üìÅ Using existing default folder: ${folderId}`);
        }
      } else {
        // Ki·ªÉm tra xem folder ƒë√£ ch·ªçn c√≥ t·ªìn t·∫°i kh√¥ng
        const checkFolder = this.db.prepare(`
                    SELECT id FROM folders WHERE id = ?
                `).get(folderId);
        if (!checkFolder) {
          error(`‚ùå Folder with ID ${folderId} does not exist`);
          return {
            success: false,
            error: `Folder with ID ${folderId} does not exist`,
            results: [],
            imported: 0,
            total: 0
          };
        }
      }

      // T√°ch c√°c d√≤ng v√† l·ªçc b·ªè c√°c d√≤ng tr·ªëng
      const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0);
      const results = [];
      for (const line of lines) {
        try {
          // Parse th√¥ng tin proxy t·ª´ d√≤ng text
          const proxyData = this.parseProxyLine(line);

          // T·∫°o proxy ID v√† th√™m folderId
          const proxyId = this.generateId();
          proxyData.id = proxyId;
          proxyData.folderId = folderId;

          // Th√™m proxy v√†o database
          const result = await this.addProxy(proxyData);
          results.push({
            proxy: line,
            success: result.success,
            id: result.success ? proxyId : null,
            error: result.error
          });
        } catch (error) {
          error('‚ùå Error parsing proxy line:', error);
          results.push({
            proxy: line,
            success: false,
            error: error.message
          });
        }
      }
      const successCount = results.filter(r => r.success).length;
      return {
        success: true,
        imported: successCount,
        total: lines.length,
        results: results
      };
    } catch (error) {
      error('‚ùå Error importing proxies from text:', error);
      return {
        success: false,
        error: error.message,
        imported: 0,
        total: 0,
        results: []
      };
    }
  }

  /**
   * Parse proxy info t·ª´ line text
   */
  parseProxyLine(line) {
    log('üîç Parsing proxy line:', line);
    let host = '',
      port = 0,
      username = null,
      password = null,
      type = 'http';
    try {
      // Ki·ªÉm tra ƒë·ªãnh d·∫°ng proxy
      if (line.includes('@')) {
        // ƒê·ªãnh d·∫°ng username:password@host:port
        const [auth, hostPort] = line.split('@');
        if (auth && auth.includes(':')) {
          [username, password] = auth.split(':');
        }
        if (hostPort && hostPort.includes(':')) {
          [host, port] = hostPort.split(':');
          port = parseInt(port, 10) || 8080;
        } else {
          host = hostPort || '';
          port = 8080;
        }
      } else if (line.includes(':')) {
        // ƒê·ªãnh d·∫°ng host:port ho·∫∑c host:port:username:password
        const parts = line.split(':');
        if (parts.length >= 2) {
          host = parts[0] || '';
          port = parseInt(parts[1], 10) || 8080;
          if (parts.length >= 4) {
            username = parts[2] || null;
            password = parts[3] || null;
          }
        }
      } else {
        // Ch·ªâ c√≥ host
        host = line.trim();
        port = 8080; // Default port
      }

      // Ki·ªÉm tra xem c√≥ proxy type kh√¥ng (socks5://...)
      if (host.includes('://')) {
        const parts = host.split('://');
        type = parts[0] || 'http';
        host = parts[1] || '';
      }

      // ƒê·∫£m b·∫£o gi√° tr·ªã h·ª£p l·ªá
      host = host.trim();
      port = parseInt(port, 10) || 8080;
      username = username ? username.trim() : null;
      password = password ? password.trim() : null;
      type = type.toLowerCase();
      if (!host) {
        throw new Error('Invalid proxy format: missing host');
      }
      const result = {
        host,
        port,
        username,
        password,
        type,
        status: 'active'
      };
      log('‚úÖ Parsed proxy data:', result);
      return result;
    } catch (error) {
      error('‚ùå Error parsing proxy line:', error);
      // Fallback to basic proxy
      return {
        host: line.trim() || 'localhost',
        port: 8080,
        username: null,
        password: null,
        type: 'http',
        status: 'active'
      };
    }
  }

  /**
   * Di chuy·ªÉn nhi·ªÅu proxy v√†o m·ªôt folder
   */
  async bulkMoveProxiesToFolder(proxyIds, folderId) {
    try {
      if (!Array.isArray(proxyIds) || proxyIds.length === 0) {
        return {
          success: false,
          error: 'Danh s√°ch proxy kh√¥ng h·ª£p l·ªá'
        };
      }
      log(`üîÑ Di chuy·ªÉn ${proxyIds.length} proxy v√†o folder ${folderId}`);
      const now = new Date().toISOString();
      const stmt = this.db.prepare(`
                UPDATE proxies 
                SET folderId = ?, updatedAt = ? 
                WHERE id IN (${proxyIds.map(() => '?').join(',')})
            `);
      const params = [folderId, now, ...proxyIds];
      const result = stmt.run(...params);
      if (result.changes > 0) {
        log(`‚úÖ ƒê√£ di chuy·ªÉn ${result.changes} proxy v√†o folder ${folderId}`);
        return {
          success: true,
          moved: result.changes,
          total: proxyIds.length
        };
      } else {
        return {
          success: true,
          moved: 0,
          total: proxyIds.length,
          message: 'Kh√¥ng c√≥ proxy n√†o ƒë∆∞·ª£c di chuy·ªÉn'
        };
      }
    } catch (error) {
      error('Error moving proxies to folder:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Test nhi·ªÅu proxy c√πng l√∫c
   */
  async bulkTestProxies(proxyIds) {
    try {
      if (!Array.isArray(proxyIds) || proxyIds.length === 0) {
        return {
          success: false,
          error: 'Danh s√°ch proxy kh√¥ng h·ª£p l·ªá'
        };
      }
      log(`üîÑ Ki·ªÉm tra ${proxyIds.length} proxy`);
      const results = [];
      for (const proxyId of proxyIds) {
        try {
          const result = await this.testProxy(proxyId);
          results.push({
            id: proxyId,
            success: result.success,
            status: result.status,
            responseTime: result.responseTime
          });
        } catch (error) {
          results.push({
            id: proxyId,
            success: false,
            error: error.message
          });
        }
      }
      const successCount = results.filter(r => r.success && r.status === 'active').length;
      log(`‚úÖ ƒê√£ ki·ªÉm tra ${results.length} proxy, ${successCount} ho·∫°t ƒë·ªông t·ªët`);
      return {
        success: true,
        results: results,
        working: successCount,
        total: results.length
      };
    } catch (error) {
      error('Error bulk testing proxies:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Xu·∫•t danh s√°ch proxy theo ƒë·ªãnh d·∫°ng
   */
  async exportProxies(format = 'ip_port_username_password', proxyIds = null) {
    try {
      let stmt;
      if (Array.isArray(proxyIds) && proxyIds.length > 0) {
        // Xu·∫•t proxy theo danh s√°ch ID
        stmt = this.db.prepare(`
                    SELECT * FROM proxies 
                    WHERE id IN (${proxyIds.map(() => '?').join(',')})
                    ORDER BY host ASC
                `);
        stmt = stmt.all(...proxyIds);
      } else {
        // Xu·∫•t t·∫•t c·∫£ proxy
        stmt = this.db.prepare(`SELECT * FROM proxies ORDER BY host ASC`);
        stmt = stmt.all();
      }
      const proxies = stmt.map(proxy => ({
        ...proxy,
        port: parseInt(proxy.port) || 8080
      }));
      let exportData = '';
      for (const proxy of proxies) {
        let line = '';
        switch (format) {
          case 'ip_port':
            line = `${proxy.host}:${proxy.port}`;
            break;
          case 'ip_port_username':
            line = `${proxy.host}:${proxy.port}:${proxy.username || ''}`;
            break;
          case 'username_password_ip_port':
            if (proxy.username && proxy.password) {
              line = `${proxy.username}:${proxy.password}@${proxy.host}:${proxy.port}`;
            } else {
              line = `${proxy.host}:${proxy.port}`;
            }
            break;
          case 'http_format':
            if (proxy.username && proxy.password) {
              line = `http://${proxy.username}:${proxy.password}@${proxy.host}:${proxy.port}`;
            } else {
              line = `http://${proxy.host}:${proxy.port}`;
            }
            break;
          default:
            // ip_port_username_password
            line = `${proxy.host}:${proxy.port}:${proxy.username || ''}:${proxy.password || ''}`;
            break;
        }
        exportData += line + '\n';
      }
      log(`‚úÖ ƒê√£ xu·∫•t ${proxies.length} proxy v·ªõi ƒë·ªãnh d·∫°ng ${format}`);
      return {
        success: true,
        data: exportData,
        count: proxies.length,
        format: format
      };
    } catch (error) {
      error('Error exporting proxies:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }
}
module.exports = ProxyStorage;

/***/ }),

/***/ "./lib/storage/room-storage.js":
/*!*************************************!*\
  !*** ./lib/storage/room-storage.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const BaseStorage = __webpack_require__(/*! ./base-storage */ "./lib/storage/base-storage.js");
const {
  log,
  error
} = __webpack_require__(/*! ../logger */ "./lib/logger.js");
class RoomStorage extends BaseStorage {
  /**
   * L·∫•y t·∫•t c·∫£ rooms
   */
  async getAllRooms() {
    try {
      log('üîÑ G·ªçi getAllRooms');
      const stmt = this.db.prepare(`
                SELECT * FROM rooms 
                ORDER BY lastViewed DESC, createdAt DESC
            `);
      const rooms = stmt.all();
      log(`üìä ƒê·ªçc ƒë∆∞·ª£c ${rooms.length} ph√≤ng t·ª´ database`);

      // X·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ
      const processedRooms = rooms.map(room => {
        return {
          ...room,
          isLive: Boolean(room.isLive),
          // Chuy·ªÉn ƒë·ªïi c√°c tr∆∞·ªùng s·ªë
          viewerCount: Number(room.viewerCount || 0),
          currentViewers: Number(room.currentViewers || 0),
          startCount: Number(room.startCount || 0),
          targetViewers: Number(room.targetViewers || 0),
          realViewers: Number(room.realViewers || 0),
          duration: Number(room.duration || 30),
          finalDuration: Number(room.finalDuration || 0),
          // Gi·ªØ nguy√™n c√°c timestamp
          lastViewed: room.lastViewed,
          createdAt: room.createdAt,
          updatedAt: room.updatedAt,
          startedAt: room.startedAt,
          endedAt: room.endedAt,
          lastTimeCheckViewers: room.lastTimeCheckViewers,
          stoppedAt: room.stoppedAt
        };
      });
      log(`‚úÖ ƒê√£ x·ª≠ l√Ω ${processedRooms.length} ph√≤ng, tr·∫£ v·ªÅ cho UI`);
      return this.serializeForIPC(processedRooms);
    } catch (err) {
      error('‚ùå Error getting all rooms:', err);
      return [];
    }
  }

  /**
   * Th√™m room m·ªõi
   */
  async addRoom(roomData) {
    try {
      log(`üîÑ Th√™m/c·∫≠p nh·∫≠t ph√≤ng ${roomData.roomUsername || roomData.uid}`);
      const now = new Date().toISOString();

      // ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng s·ªë ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi ƒë√∫ng
      const viewerCount = Number(roomData.viewerCount || 0);
      const currentViewers = Number(roomData.currentViewers || 0);
      const startCount = Number(roomData.startCount || 0);
      const targetViewers = Number(roomData.targetViewers || 0);
      const realViewers = Number(roomData.realViewers || 0);
      const duration = Number(roomData.duration || 30);
      const finalDuration = Number(roomData.finalDuration || 0);
      const isLive = roomData.isLive ? 1 : 0;
      const stmt = this.db.prepare(`
                INSERT OR REPLACE INTO rooms (
                    uid, id, roomId, roomUrl, roomUsername, 
                    nickname, avatar, avatarThumb, title,
                    viewerCount, currentViewers, startCount, targetViewers, 
                    duration, isLive, status, 
                    startedAt, endedAt, realViewers, lastTimeCheckViewers,
                    stoppedAt, stopReason, finalDuration,
                    lastViewed, notes, createdAt, updatedAt
                ) VALUES (
                    ?, ?, ?, ?, ?, 
                    ?, ?, ?, ?, 
                    ?, ?, ?, ?,
                    ?, ?, ?, 
                    ?, ?, ?, ?,
                    ?, ?, ?,
                    ?, ?, ?, ?
                )
            `);
      stmt.run(roomData.uid, roomData.id || roomData.uid, roomData.roomId || null, roomData.roomUrl || null, roomData.roomUsername || null, roomData.nickname || null, roomData.avatar || null, roomData.avatarThumb || null, roomData.title || '', viewerCount, currentViewers, startCount, targetViewers, duration, isLive, roomData.status || 'stopped', roomData.startedAt || now, roomData.endedAt || null, realViewers, roomData.lastTimeCheckViewers || null, roomData.stoppedAt || null, roomData.stopReason || null, finalDuration, roomData.lastViewed || now, roomData.notes || roomData.note || '', roomData.createdAt || now, roomData.updatedAt || now);

      // X·ª≠ l√Ω ƒë√∫ng ki·ªÉu d·ªØ li·ªáu cho d·ªØ li·ªáu tr·∫£ v·ªÅ
      const newRoom = {
        uid: roomData.uid,
        id: roomData.id || roomData.uid,
        roomId: roomData.roomId || null,
        roomUrl: roomData.roomUrl || null,
        roomUsername: roomData.roomUsername || null,
        nickname: roomData.nickname || null,
        avatar: roomData.avatar || null,
        avatarThumb: roomData.avatarThumb || null,
        title: roomData.title || '',
        viewerCount: viewerCount,
        currentViewers: currentViewers,
        startCount: startCount,
        targetViewers: targetViewers,
        duration: duration,
        isLive: Boolean(isLive),
        status: roomData.status || 'stopped',
        startedAt: roomData.startedAt || null,
        endedAt: roomData.endedAt || null,
        realViewers: realViewers,
        lastTimeCheckViewers: roomData.lastTimeCheckViewers || null,
        stoppedAt: roomData.stoppedAt || null,
        stopReason: roomData.stopReason || null,
        finalDuration: finalDuration,
        lastViewed: roomData.lastViewed || now,
        notes: roomData.notes || roomData.note || '',
        createdAt: roomData.createdAt || now,
        updatedAt: roomData.updatedAt || now
      };
      log(`‚úÖ ƒê√£ th√™m/c·∫≠p nh·∫≠t ph√≤ng: ${roomData.roomUsername} (${roomData.uid})`);
      return {
        success: true,
        room: this.serializeForIPC(newRoom)
      };
    } catch (err) {
      error('‚ùå Error adding room:', err);
      return {
        success: false,
        error: err.message
      };
    }
  }

  /**
   * C·∫≠p nh·∫≠t room
   */
  async updateRoom(roomUid, updates) {
    try {
      // Ki·ªÉm tra roomUid kh√¥ng ƒë∆∞·ª£c null
      if (!roomUid) {
        error('‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t room: roomUid l√† null');
        return {
          success: false,
          error: 'ROOM_UID_NULL'
        };
      }
      log(`üîÑ C·∫≠p nh·∫≠t room ${roomUid}`);
      const now = new Date().toISOString();
      const setFields = [];
      const values = [];
      for (const [key, value] of Object.entries(updates)) {
        // B·ªè qua c√°c gi√° tr·ªã undefined
        if (value === undefined) {
          log(`‚ö†Ô∏è B·ªè qua tr∆∞·ªùng ${key} v·ªõi gi√° tr·ªã undefined`);
          continue;
        }
        if (key === 'isLive') {
          setFields.push(`${key} = ?`);
          values.push(value ? 1 : 0);
        } else if (key === 'lastViewed' || key === 'startedAt' || key === 'endedAt' || key === 'lastTimeCheckViewers' || key === 'stoppedAt') {
          setFields.push(`${key} = ?`);
          values.push(value ? String(value) : null);
        } else if (key === 'roomUsername' || key === 'nickname' || key === 'avatarThumb' || key === 'avatar' || key === 'roomUrl' || key === 'title' || key === 'stopReason' || key === 'status') {
          // ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng string lu√¥n l√† string ho·∫∑c null
          setFields.push(`${key} = ?`);
          values.push(value !== null && value !== undefined ? String(value) : null);
        } else if (key === 'viewerCount' || key === 'currentViewers' || key === 'startCount' || key === 'targetViewers' || key === 'duration' || key === 'realViewers' || key === 'finalDuration') {
          // ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng s·ªë lu√¥n l√† s·ªë
          setFields.push(`${key} = ?`);
          values.push(Number(value) || 0);
        } else {
          // C√°c tr∆∞·ªùng kh√°c
          setFields.push(`${key} = ?`);

          // ƒê·∫£m b·∫£o gi√° tr·ªã l√† ki·ªÉu SQLite h·ª£p l·ªá
          if (value === null) {
            values.push(null);
          } else if (typeof value === 'object') {
            try {
              values.push(JSON.stringify(value));
            } catch (err) {
              error(`‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi ${key} th√†nh JSON:`, err);
              values.push(String(value) || null);
            }
          } else {
            values.push(value);
          }
        }
      }
      if (setFields.length === 0) {
        return {
          success: true
        };
      }

      // Lu√¥n c·∫≠p nh·∫≠t updatedAt khi c√≥ thay ƒë·ªïi
      setFields.push('updatedAt = ?');
      values.push(now);
      values.push(roomUid);
      const sql = `UPDATE rooms SET ${setFields.join(', ')} WHERE uid = ?`;
      const stmt = this.db.prepare(sql);
      log(`üîÑ Updating room ${roomUid} with fields: ${setFields.join(', ')}`);
      const result = stmt.run(...values);
      if (result.changes > 0) {
        log(`‚úÖ Updated room ${roomUid}`);
        return {
          success: true
        };
      } else {
        log(`‚ö†Ô∏è Room not found: ${roomUid}`);
        return {
          success: false,
          error: 'Room not found'
        };
      }
    } catch (err) {
      error('‚ùå Error updating room:', err);
      return {
        success: false,
        error: err.message
      };
    }
  }

  /**
   * X√≥a room
   */
  async deleteRoom(roomUid) {
    try {
      // Gi·∫£i ph√≥ng t·∫•t c·∫£ accounts kh·ªèi room
      await this.releaseAccountsFromRoom(roomUid);

      // X√≥a viewer history
      const deleteHistoryStmt = this.db.prepare(`
                DELETE FROM viewer_history WHERE roomUid = ?
            `);
      deleteHistoryStmt.run(roomUid);

      // X√≥a room
      const stmt = this.db.prepare(`DELETE FROM rooms WHERE uid = ?`);
      const result = stmt.run(roomUid);
      if (result.changes > 0) {
        log(`‚úÖ Deleted room ${roomUid}`);
        return {
          success: true
        };
      } else {
        return {
          success: false,
          error: 'Room not found'
        };
      }
    } catch (error) {
      error('Error deleting room:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Clear all account-room relationships
   */
  async clearAllAccountRooms() {
    try {
      // Tr∆∞·ªõc ti√™n, l·∫•y danh s√°ch t·∫•t c·∫£ c√°c accounts ƒëang c√≥ trong account_rooms
      const accountsWithRooms = this.db.prepare(`
                SELECT DISTINCT accountId FROM account_rooms
            `).all();

      // X√≥a t·∫•t c·∫£ c√°c m·ªëi quan h·ªá
      const stmt = this.db.prepare(`DELETE FROM account_rooms`);
      const result = stmt.run();

      // ƒê·∫∑t l·∫°i currentRooms v√† activeRooms cho t·∫•t c·∫£ accounts c√≥ √≠t nh·∫•t m·ªôt ph√≤ng
      if (accountsWithRooms.length > 0) {
        const now = new Date().toISOString();
        const resetStmt = this.db.prepare(`
                    UPDATE accounts 
                    SET currentRooms = 0,
                        activeRooms = '[]',
                        updatedAt = ?
                    WHERE id = ?
                `);
        for (const account of accountsWithRooms) {
          resetStmt.run(now, account.accountId);
        }
        log(`‚úÖ Reset currentRooms and activeRooms for ${accountsWithRooms.length} accounts`);
      }
      log(`‚úÖ Cleared ${result.changes} account-room relationships`);
      return result.changes;
    } catch (error) {
      error('Error clearing account rooms:', error);
      return 0;
    }
  }

  /**
   * Add account to room
   */
  async addAccountToRoom(accountId, roomId) {
    try {
      const stmt = this.db.prepare(`
                INSERT OR IGNORE INTO account_rooms (accountId, roomId, createdAt)
                VALUES (?, ?, ?)
            `);
      const now = new Date().toISOString();
      const result = stmt.run(accountId, roomId, now);
      if (result.changes > 0) {
        log(`‚úÖ Added account ${accountId} to room ${roomId}`);

        // C·∫≠p nh·∫≠t currentRooms trong b·∫£ng accounts
        const updateStmt = this.db.prepare(`
                    UPDATE accounts 
                    SET currentRooms = currentRooms + 1,
                        updatedAt = ?,
                        lastUsed = ?
                    WHERE id = ?
                `);
        updateStmt.run(now, now, accountId);

        // L·∫•y th√¥ng tin v·ªÅ room
        const roomStmt = this.db.prepare(`SELECT * FROM rooms WHERE uid = ?`);
        const roomInfo = roomStmt.get(roomId);
        if (roomInfo) {
          // L·∫•y danh s√°ch activeRooms hi·ªán t·∫°i c·ªßa account
          const accountStmt = this.db.prepare(`SELECT activeRooms FROM accounts WHERE id = ?`);
          const accountData = accountStmt.get(accountId);

          // Parse activeRooms t·ª´ JSON string th√†nh array
          let activeRooms = [];
          try {
            if (accountData && accountData.activeRooms) {
              activeRooms = JSON.parse(accountData.activeRooms);
            }
          } catch (e) {
            error(`‚ùå L·ªói khi parse activeRooms c·ªßa account ${accountId}:`, e);
            activeRooms = [];
          }

          // Th√™m room m·ªõi v√†o danh s√°ch n·∫øu ch∆∞a c√≥
          const roomIdentifier = roomInfo.roomUsername || roomInfo.uid;
          if (!activeRooms.includes(roomIdentifier)) {
            activeRooms.push(roomIdentifier);

            // C·∫≠p nh·∫≠t activeRooms trong database
            const updateActiveRoomsStmt = this.db.prepare(`
                            UPDATE accounts 
                            SET activeRooms = ?,
                                updatedAt = ?
                            WHERE id = ?
                        `);
            updateActiveRoomsStmt.run(JSON.stringify(activeRooms), now, accountId);
            log(`‚úÖ Updated activeRooms for account ${accountId}: Added ${roomIdentifier}`);
          }
        }
        return {
          success: true
        };
      } else {
        return {
          success: false,
          error: 'Relationship already exists'
        };
      }
    } catch (error) {
      error('Error adding account to room:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Remove account from room
   */
  async removeAccountFromRoom(accountId, roomId) {
    try {
      const stmt = this.db.prepare(`
                DELETE FROM account_rooms WHERE accountId = ? AND roomId = ?
            `);
      const now = new Date().toISOString();
      const result = stmt.run(accountId, roomId);
      if (result.changes > 0) {
        log(`‚úÖ Removed account ${accountId} from room ${roomId}`);

        // Gi·∫£m currentRooms trong b·∫£ng accounts
        const updateStmt = this.db.prepare(`
                    UPDATE accounts 
                    SET currentRooms = MAX(0, currentRooms - 1),
                        updatedAt = ?
                    WHERE id = ?
                `);
        updateStmt.run(now, accountId);

        // L·∫•y th√¥ng tin v·ªÅ room
        const roomStmt = this.db.prepare(`SELECT * FROM rooms WHERE uid = ?`);
        const roomInfo = roomStmt.get(roomId);
        if (roomInfo) {
          // L·∫•y danh s√°ch activeRooms hi·ªán t·∫°i c·ªßa account
          const accountStmt = this.db.prepare(`SELECT activeRooms FROM accounts WHERE id = ?`);
          const accountData = accountStmt.get(accountId);

          // Parse activeRooms t·ª´ JSON string th√†nh array
          let activeRooms = [];
          try {
            if (accountData && accountData.activeRooms) {
              activeRooms = JSON.parse(accountData.activeRooms);
            }
          } catch (e) {
            error(`‚ùå L·ªói khi parse activeRooms c·ªßa account ${accountId}:`, e);
            activeRooms = [];
          }

          // X√≥a room kh·ªèi danh s√°ch activeRooms
          const roomIdentifier = roomInfo.roomUsername || roomInfo.uid;
          const updatedActiveRooms = activeRooms.filter(room => room !== roomIdentifier);

          // C·∫≠p nh·∫≠t activeRooms trong database
          const updateActiveRoomsStmt = this.db.prepare(`
                        UPDATE accounts 
                        SET activeRooms = ?,
                            updatedAt = ?
                        WHERE id = ?
                    `);
          updateActiveRoomsStmt.run(JSON.stringify(updatedActiveRooms), now, accountId);
          log(`‚úÖ Updated activeRooms for account ${accountId}: Removed ${roomIdentifier}`);
        }
        return {
          success: true
        };
      } else {
        return {
          success: false,
          error: 'Relationship not found'
        };
      }
    } catch (error) {
      error('Error removing account from room:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Get accounts in room
   */
  async getAccountsInRoom(roomId) {
    try {
      log(`üîç L·∫•y danh s√°ch accounts trong ph√≤ng ${roomId}`);
      const stmt = this.db.prepare(`
                SELECT a.*, ar.createdAt as joinedAt
                FROM accounts a
                INNER JOIN account_rooms ar ON a.id = ar.accountId
                WHERE ar.roomId = ?
                ORDER BY ar.createdAt DESC
            `);
      const accountsRaw = stmt.all(roomId);
      log(`üìä T√¨m th·∫•y ${accountsRaw.length} accounts trong ph√≤ng ${roomId}`);

      // X·ª≠ l√Ω d·ªØ li·ªáu accounts
      const accounts = accountsRaw.map(account => {
        // Parse activeRooms t·ª´ JSON string th√†nh array
        let activeRooms = [];
        try {
          if (account.activeRooms) {
            activeRooms = JSON.parse(account.activeRooms);
          }
        } catch (err) {
          error(`‚ùå L·ªói khi parse activeRooms c·ªßa account ${account.id}:`, err);
          activeRooms = [];
        }
        return {
          ...account,
          // Convert Boolean
          isLive: Boolean(account.isLive),
          // C·∫•u tr√∫c d·ªØ li·ªáu ph·ª©c t·∫°p
          activeRooms: activeRooms,
          // Convert s·ªë
          currentRooms: Number(account.currentRooms || 0),
          viewerCount: Number(account.viewerCount || 0),
          followCount: Number(account.followCount || 0),
          shareCount: Number(account.shareCount || 0),
          totalViews: Number(account.totalViews || 0),
          totalShares: Number(account.totalShares || 0),
          totalFollows: Number(account.totalFollows || 0),
          // Gi·ªØ nguy√™n timestamps
          lastActive: account.lastActive,
          lastUsed: account.lastUsed,
          createdAt: account.createdAt,
          updatedAt: account.updatedAt,
          joinedAt: account.joinedAt
        };
      });
      return this.serializeForIPC(accounts);
    } catch (err) {
      error('‚ùå Error getting accounts in room:', err);
      return [];
    }
  }

  /**
   * Get room by UID
   */
  async getRoomByUid(roomUid) {
    try {
      log(`üîç L·∫•y th√¥ng tin ph√≤ng ${roomUid}`);
      const stmt = this.db.prepare(`SELECT * FROM rooms WHERE uid = ?`);
      const room = stmt.get(roomUid);
      if (room) {
        // X·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ
        const processedRoom = {
          ...room,
          isLive: Boolean(room.isLive),
          // Chuy·ªÉn ƒë·ªïi c√°c tr∆∞·ªùng s·ªë
          viewerCount: Number(room.viewerCount || 0),
          currentViewers: Number(room.currentViewers || 0),
          startCount: Number(room.startCount || 0),
          targetViewers: Number(room.targetViewers || 0),
          realViewers: Number(room.realViewers || 0),
          duration: Number(room.duration || 30),
          finalDuration: Number(room.finalDuration || 0),
          // Gi·ªØ nguy√™n c√°c timestamp
          lastViewed: room.lastViewed,
          createdAt: room.createdAt,
          updatedAt: room.updatedAt,
          startedAt: room.startedAt,
          endedAt: room.endedAt,
          lastTimeCheckViewers: room.lastTimeCheckViewers,
          stoppedAt: room.stoppedAt
        };
        log(`‚úÖ ƒê√£ t√¨m th·∫•y ph√≤ng ${roomUid}`);
        return this.serializeForIPC(processedRoom);
      }
      log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ph√≤ng ${roomUid}`);
      return null;
    } catch (err) {
      error('‚ùå Error getting room by UID:', err);
      return null;
    }
  }

  // =================
  // VIEWER HISTORY
  // =================

  /**
   * Add viewer history entry
   */
  async addViewerHistoryEntry(roomUid, viewerData) {
    try {
      // Ki·ªÉm tra roomUid kh√¥ng ƒë∆∞·ª£c null
      if (!roomUid) {
        error('‚ùå Kh√¥ng th·ªÉ th√™m viewer history: roomUid l√† null');
        return {
          success: false,
          error: 'ROOM_UID_NULL'
        };
      }
      const stmt = this.db.prepare(`
                INSERT INTO viewer_history (roomUid, viewerCount, timestamp)
                VALUES (?, ?, ?)
            `);
      stmt.run(roomUid, viewerData.viewerCount || viewerData.viewers || 0, viewerData.timestamp || new Date().toISOString());
      return {
        success: true
      };
    } catch (error) {
      error('Error adding viewer history entry:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Get room viewer history
   */
  async getRoomViewerHistory(roomUid, days = null) {
    try {
      let sql = `
                SELECT * FROM viewer_history 
                WHERE roomUid = ?
            `;
      const params = [roomUid];
      if (days) {
        const cutoffDate = new Date();
        cutoffDate.setDate(cutoffDate.getDate() - days);
        sql += ` AND timestamp >= ?`;
        params.push(cutoffDate.toISOString());
      }
      sql += ` ORDER BY timestamp DESC`;
      const stmt = this.db.prepare(sql);
      const history = stmt.all(...params).map(entry => ({
        ...entry,
        timestamp: entry.timestamp
      }));
      return this.serializeForIPC(history);
    } catch (error) {
      error('Error getting room viewer history:', error);
      return [];
    }
  }

  /**
   * Cleanup old viewer history
   */
  async cleanupViewerHistoryFiles() {
    try {
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - 30);
      const stmt = this.db.prepare(`
                DELETE FROM viewer_history WHERE timestamp < ?
            `);
      const result = stmt.run(cutoffDate.toISOString());
      log(`‚úÖ Cleaned up ${result.changes} old viewer history entries`);
      return result.changes;
    } catch (error) {
      error('Error cleaning up viewer history:', error);
      return 0;
    }
  }

  /**
   * Gi·∫£i ph√≥ng t·∫•t c·∫£ accounts kh·ªèi room (d√πng khi stop ho·∫∑c delete room)
   * H√†m ti·ªán √≠ch ƒë·ªÉ tr√°nh l·∫∑p code
   */
  async releaseAccountsFromRoom(roomId) {
    try {
      // L·∫•y th√¥ng tin v·ªÅ room ƒë·ªÉ bi·∫øt roomUsername
      const roomStmt = this.db.prepare(`SELECT * FROM rooms WHERE uid = ?`);
      const roomInfo = roomStmt.get(roomId);
      if (!roomInfo) {
        log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y room ${roomId} ƒë·ªÉ gi·∫£i ph√≥ng accounts`);
        return {
          success: false,
          error: 'Room not found'
        };
      }

      // L·∫•y danh s√°ch c√°c accounts trong room
      const accountsInRoomStmt = this.db.prepare(`
                SELECT accountId FROM account_rooms WHERE roomId = ?
            `);
      const accountsInRoom = accountsInRoomStmt.all(roomId);
      if (accountsInRoom.length === 0) {
        log(`‚ÑπÔ∏è Kh√¥ng c√≥ accounts n√†o trong room ${roomId} c·∫ßn gi·∫£i ph√≥ng`);
        return {
          success: true,
          message: 'No accounts to release'
        };
      }
      log(`üîÑ Gi·∫£i ph√≥ng ${accountsInRoom.length} accounts kh·ªèi room ${roomId}`);

      // Th·ª±c hi·ªán x√≥a c√°c m·ªëi quan h·ªá account-room
      const deleteRelationsStmt = this.db.prepare(`
                DELETE FROM account_rooms WHERE roomId = ?
            `);
      deleteRelationsStmt.run(roomId);
      const now = new Date().toISOString();
      const roomIdentifier = roomInfo.roomUsername || roomInfo.uid;

      // C·∫≠p nh·∫≠t th√¥ng tin c√°c accounts
      for (const account of accountsInRoom) {
        const accountId = account.accountId;

        // ƒê·∫øm l·∫°i s·ªë room hi·ªán t·∫°i c·ªßa account
        const countRoomsStmt = this.db.prepare(`
                    SELECT COUNT(*) as roomCount FROM account_rooms WHERE accountId = ?
                `);
        const {
          roomCount
        } = countRoomsStmt.get(accountId);

        // C·∫≠p nh·∫≠t currentRooms v·ªõi s·ªë ph√≤ng ch√≠nh x√°c
        const updateCountStmt = this.db.prepare(`
                    UPDATE accounts 
                    SET currentRooms = ?,
                        updatedAt = ?
                    WHERE id = ?
                `);
        updateCountStmt.run(roomCount, now, accountId);

        // C·∫≠p nh·∫≠t activeRooms
        const accountStmt = this.db.prepare(`SELECT activeRooms FROM accounts WHERE id = ?`);
        const accountData = accountStmt.get(accountId);

        // Parse activeRooms t·ª´ JSON string th√†nh array
        let activeRooms = [];
        try {
          if (accountData && accountData.activeRooms) {
            activeRooms = JSON.parse(accountData.activeRooms);
          }
        } catch (e) {
          error(`‚ùå L·ªói khi parse activeRooms c·ªßa account ${accountId}:`, e);
          activeRooms = [];
        }

        // X√≥a room kh·ªèi danh s√°ch activeRooms
        const updatedActiveRooms = activeRooms.filter(room => room !== roomIdentifier);

        // C·∫≠p nh·∫≠t activeRooms trong database
        const updateActiveRoomsStmt = this.db.prepare(`
                    UPDATE accounts 
                    SET activeRooms = ?,
                        updatedAt = ?
                    WHERE id = ?
                `);
        updateActiveRoomsStmt.run(JSON.stringify(updatedActiveRooms), now, accountId);
      }
      log(`‚úÖ ƒê√£ gi·∫£i ph√≥ng ${accountsInRoom.length} accounts kh·ªèi room ${roomId}`);
      return {
        success: true,
        accountsReleased: accountsInRoom.length
      };
    } catch (err) {
      error(`‚ùå L·ªói khi gi·∫£i ph√≥ng accounts kh·ªèi room ${roomId}:`, err);
      return {
        success: false,
        error: err.message
      };
    }
  }
}
module.exports = RoomStorage;

/***/ }),

/***/ "./lib/storage/settings-storage.js":
/*!*****************************************!*\
  !*** ./lib/storage/settings-storage.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const {
  log,
  error
} = __webpack_require__(/*! ../logger */ "./lib/logger.js");
const BaseStorage = __webpack_require__(/*! ./base-storage */ "./lib/storage/base-storage.js");
class SettingsStorage extends BaseStorage {
  /**
   * Get all settings
   */
  async getSettings() {
    try {
      const stmt = this.db.prepare(`
                SELECT key, value FROM settings
            `);
      const settings = stmt.all();
      const result = {};
      for (const setting of settings) {
        try {
          result[setting.key] = JSON.parse(setting.value);
        } catch (error) {
          result[setting.key] = setting.value;
        }
      }

      // Merge v·ªõi default settings
      const finalSettings = {
        ...this.defaultSettings,
        ...result
      };
      return this.serializeForIPC(finalSettings);
    } catch (error) {
      error('Error getting settings:', error);
      return this.serializeForIPC(this.defaultSettings);
    }
  }

  /**
   * Save settings
   */
  async saveSettings(settings) {
    try {
      const stmt = this.db.prepare(`
                INSERT OR REPLACE INTO settings (key, value, updatedAt)
                VALUES (?, ?, ?)
            `);
      const now = new Date().toISOString();
      let savedCount = 0;
      for (const [key, value] of Object.entries(settings)) {
        stmt.run(key, JSON.stringify(value), now);
        savedCount++;
      }
      log(`‚úÖ Saved ${savedCount} settings`);
      return {
        success: true,
        count: savedCount
      };
    } catch (error) {
      error('Error saving settings:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Save single setting
   */
  async saveSetting(key, value) {
    try {
      const stmt = this.db.prepare(`
                INSERT OR REPLACE INTO settings (key, value, updatedAt)
                VALUES (?, ?, ?)
            `);
      stmt.run(key, JSON.stringify(value), new Date().toISOString());
      log(`‚úÖ Saved setting: ${key}`);
      return {
        success: true
      };
    } catch (error) {
      error('Error saving setting:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Get single setting
   */
  async getSetting(key) {
    try {
      const stmt = this.db.prepare(`
                SELECT value FROM settings WHERE key = ?
            `);
      const result = stmt.get(key);
      if (result) {
        try {
          return JSON.parse(result.value);
        } catch (error) {
          return result.value;
        }
      }

      // Return default value if exists
      return this.defaultSettings[key] || null;
    } catch (error) {
      error('Error getting setting:', error);
      return this.defaultSettings[key] || null;
    }
  }

  /**
   * Delete setting
   */
  async deleteSetting(key) {
    try {
      const stmt = this.db.prepare(`DELETE FROM settings WHERE key = ?`);
      const result = stmt.run(key);
      if (result.changes > 0) {
        log(`‚úÖ Deleted setting: ${key}`);
        return {
          success: true
        };
      } else {
        return {
          success: false,
          error: 'Setting not found'
        };
      }
    } catch (error) {
      error('Error deleting setting:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Reset all settings to default
   */
  async resetSettings() {
    try {
      // Delete all current settings
      const deleteStmt = this.db.prepare(`DELETE FROM settings`);
      deleteStmt.run();

      // Insert default settings
      const insertStmt = this.db.prepare(`
                INSERT INTO settings (key, value, updatedAt)
                VALUES (?, ?, ?)
            `);
      const now = new Date().toISOString();
      let insertedCount = 0;
      for (const [key, value] of Object.entries(this.defaultSettings)) {
        insertStmt.run(key, JSON.stringify(value), now);
        insertedCount++;
      }
      log(`‚úÖ Reset to ${insertedCount} default settings`);
      return {
        success: true,
        count: insertedCount
      };
    } catch (error) {
      error('Error resetting settings:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Get settings with metadata
   */
  async getSettingsWithMetadata() {
    try {
      const stmt = this.db.prepare(`
                SELECT key, value, updatedAt FROM settings ORDER BY key ASC
            `);
      const settings = stmt.all();
      const result = [];
      for (const setting of settings) {
        try {
          result.push({
            key: setting.key,
            value: JSON.parse(setting.value),
            updatedAt: setting.updatedAt,
            isDefault: this.defaultSettings.hasOwnProperty(setting.key)
          });
        } catch (error) {
          result.push({
            key: setting.key,
            value: setting.value,
            updatedAt: setting.updatedAt,
            isDefault: this.defaultSettings.hasOwnProperty(setting.key)
          });
        }
      }
      return this.serializeForIPC(result);
    } catch (error) {
      error('Error getting settings with metadata:', error);
      return [];
    }
  }

  /**
   * Export settings to JSON
   */
  async exportSettings() {
    try {
      const settings = await this.getSettings();
      return {
        success: true,
        settings: settings,
        exportedAt: new Date().toISOString(),
        version: '1.0'
      };
    } catch (error) {
      error('Error exporting settings:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Import settings from JSON
   */
  async importSettings(settingsData) {
    try {
      if (!settingsData || typeof settingsData !== 'object') {
        return {
          success: false,
          error: 'Invalid settings data'
        };
      }

      // Validate settings keys
      const validKeys = Object.keys(this.defaultSettings);
      const settingsToImport = {};
      for (const [key, value] of Object.entries(settingsData)) {
        if (validKeys.includes(key)) {
          settingsToImport[key] = value;
        }
      }
      if (Object.keys(settingsToImport).length === 0) {
        return {
          success: false,
          error: 'No valid settings to import'
        };
      }

      // Save imported settings
      const result = await this.saveSettings(settingsToImport);
      if (result.success) {
        log(`‚úÖ Imported ${Object.keys(settingsToImport).length} settings`);
        return {
          success: true,
          imported: Object.keys(settingsToImport).length,
          skipped: Object.keys(settingsData).length - Object.keys(settingsToImport).length
        };
      }
      return result;
    } catch (error) {
      error('Error importing settings:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }
}
module.exports = SettingsStorage;

/***/ }),

/***/ "./lib/storage/storage-manager.js":
/*!****************************************!*\
  !*** ./lib/storage/storage-manager.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const DatabaseSchema = __webpack_require__(/*! ./database-schema */ "./lib/storage/database-schema.js");
const FolderStorage = __webpack_require__(/*! ./folder-storage */ "./lib/storage/folder-storage.js");
const AccountStorage = __webpack_require__(/*! ./account-storage */ "./lib/storage/account-storage.js");
const ProxyStorage = __webpack_require__(/*! ./proxy-storage */ "./lib/storage/proxy-storage.js");
const RoomStorage = __webpack_require__(/*! ./room-storage */ "./lib/storage/room-storage.js");
const SettingsStorage = __webpack_require__(/*! ./settings-storage */ "./lib/storage/settings-storage.js");
const TaskStorage = __webpack_require__(/*! ./task-storage */ "./lib/storage/task-storage.js");
const {
  log,
  error
} = __webpack_require__(/*! ../logger */ "./lib/logger.js");
// Import th√™m c√°c modules kh√°c khi t·∫°o xong

class StorageManager extends DatabaseSchema {
  constructor() {
    super();

    // Kh·ªüi t·∫°o c√°c storage modules
    this.folderStorage = new FolderStorage();
    this.accountStorage = new AccountStorage();
    this.proxyStorage = new ProxyStorage();
    this.roomStorage = new RoomStorage();
    this.settingsStorage = new SettingsStorage();
    this.taskStorage = new TaskStorage();
    // Th√™m c√°c storage kh√°c
  }

  /**
   * Kh·ªüi t·∫°o to√†n b·ªô storage system
   */
  async init() {
    try {
      // Kh·ªüi t·∫°o base database connection
      await super.init();

      // Share database connection v·ªõi t·∫•t c·∫£ modules
      this.folderStorage.db = this.db;
      this.accountStorage.db = this.db;
      this.proxyStorage.db = this.db;
      this.roomStorage.db = this.db;
      this.settingsStorage.db = this.db;
      this.taskStorage.db = this.db;

      // T·∫°o tables n·∫øu ch∆∞a c√≥
      this.createTables();

      // C·∫≠p nh·∫≠t schema n·∫øu c√≥ thay ƒë·ªïi
      await this.migrateSchema();

      // Insert default data
      await this.insertDefaultData();

      // Check integrity
      this.checkIntegrity();
      log('‚úÖ Storage manager initialized successfully');
      return true;
    } catch (err) {
      error('‚ùå Error initializing storage manager:', err);
      throw err;
    }
  }

  // =================
  // FOLDER METHODS
  // =================

  async getAllFolders(type = null) {
    log(`üìÇ getAllFolders called with type: ${type}`);
    if (type) {
      // N·∫øu c√≥ type, tr·∫£ v·ªÅ danh s√°ch folder c·ªßa type ƒë√≥
      const folders = await this.folderStorage.getAllFolders(type);
      log(`üìÇ Retrieved ${folders.length} folders for type ${type}:`, folders);
      if (type === 'accounts') {
        log(`üìÇ Returning folders for accounts in format: { success: true, folders: { accounts: [...] } }`);
        return {
          success: true,
          folders: {
            accounts: folders
          }
        };
      } else if (type === 'proxies') {
        log(`üìÇ Returning folders for proxies in format: { success: true, folders: { proxies: [...] } }`);
        return {
          success: true,
          folders: {
            proxies: folders
          }
        };
      }
      log(`üìÇ Returning folders in simple format: { success: true, folders: [...] }`);
      return {
        success: true,
        folders
      };
    } else {
      // Kh√¥ng c√≥ type, l·∫•y t·∫•t c·∫£ folder v√† nh√≥m theo type
      const accountFolders = await this.folderStorage.getAllFolders('accounts');
      const proxyFolders = await this.folderStorage.getAllFolders('proxies');
      log(`üìÇ Returning all folders: { accounts: ${accountFolders.length}, proxies: ${proxyFolders.length} }`);
      return {
        success: true,
        folders: {
          accounts: accountFolders,
          proxies: proxyFolders
        }
      };
    }
  }
  async createFolder(type, folderData) {
    return this.folderStorage.createFolder(type, folderData);
  }
  async updateFolder(type, folderId, updates) {
    return this.folderStorage.updateFolder(type, folderId, updates);
  }
  async deleteFolder(type, folderId) {
    return this.folderStorage.deleteFolder(type, folderId);
  }
  async getFolderById(type, folderId) {
    return this.folderStorage.getFolderById(type, folderId);
  }

  // =================
  // ACCOUNT METHODS
  // =================

  async getAllAccounts() {
    return this.accountStorage.getAllAccounts();
  }
  async getAccountsByFolder(folderId) {
    return this.accountStorage.getAccountsByFolder(folderId);
  }
  async addAccount(accountData) {
    return this.accountStorage.addAccount(accountData);
  }
  async deleteAccount(accountId) {
    return this.accountStorage.deleteAccount(accountId);
  }
  async updateAccount(id, updates) {
    return this.accountStorage.updateAccount(id, updates);
  }
  async updateAccountStats(accountId, stats) {
    return this.accountStorage.updateAccountStats(accountId, stats);
  }
  async clearAccountRooms(accountId) {
    return this.accountStorage.clearAccountRooms(accountId);
  }
  async getAccountActiveRooms(accountId) {
    return this.accountStorage.getAccountActiveRooms(accountId);
  }
  async importAccountsFromText(text, folderId = null) {
    return this.accountStorage.importAccountsFromText(text, folderId);
  }

  // =================
  // PROXY METHODS
  // =================

  async getAllProxies() {
    return this.proxyStorage.getAllProxies();
  }
  async getProxiesByFolder(folderId) {
    return this.proxyStorage.getProxiesByFolder(folderId);
  }
  async addProxy(proxyData) {
    return this.proxyStorage.addProxy(proxyData);
  }
  async deleteProxy(proxyId) {
    return this.proxyStorage.deleteProxy(proxyId);
  }
  async updateProxy(proxyId, updates) {
    return this.proxyStorage.updateProxy(proxyId, updates);
  }
  async testProxy(proxyId) {
    return this.proxyStorage.testProxy(proxyId);
  }
  async getProxyById(proxyId) {
    return this.proxyStorage.getProxyById(proxyId);
  }
  async importProxiesFromText(text, folderId = null) {
    return this.proxyStorage.importProxiesFromText(text, folderId);
  }
  async bulkMoveProxiesToFolder(proxyIds, folderId) {
    return this.proxyStorage.bulkMoveProxiesToFolder(proxyIds, folderId);
  }
  async bulkTestProxies(proxyIds) {
    return this.proxyStorage.bulkTestProxies(proxyIds);
  }
  async exportProxies(format = 'ip_port_username_password', proxyIds = null) {
    return this.proxyStorage.exportProxies(format, proxyIds);
  }

  // =================
  // ROOM METHODS
  // =================

  async getAllRooms() {
    return this.roomStorage.getAllRooms();
  }
  async addRoom(roomData) {
    return this.roomStorage.addRoom(roomData);
  }
  async updateRoom(roomUid, updates) {
    return this.roomStorage.updateRoom(roomUid, updates);
  }
  async deleteRoom(roomUid) {
    return this.roomStorage.deleteRoom(roomUid);
  }
  async clearAllAccountRooms() {
    return this.roomStorage.clearAllAccountRooms();
  }

  // Room relationships
  async addAccountToRoom(accountId, roomId) {
    return this.roomStorage.addAccountToRoom(accountId, roomId);
  }
  async removeAccountFromRoom(accountId, roomId) {
    return this.roomStorage.removeAccountFromRoom(accountId, roomId);
  }
  async getAccountsInRoom(roomId) {
    return this.roomStorage.getAccountsInRoom(roomId);
  }

  // Viewer history
  async addViewerHistoryEntry(roomUid, viewerData) {
    return this.roomStorage.addViewerHistoryEntry(roomUid, viewerData);
  }
  async getRoomViewerHistory(roomUid, days = null) {
    return this.roomStorage.getRoomViewerHistory(roomUid, days);
  }
  async cleanupViewerHistoryFiles() {
    return this.roomStorage.cleanupViewerHistoryFiles();
  }

  // =================
  // SETTINGS METHODS
  // =================

  async getSettings() {
    return this.settingsStorage.getSettings();
  }
  async saveSettings(settings) {
    return this.settingsStorage.saveSettings(settings);
  }
  async resetSettings() {
    return this.settingsStorage.resetSettings();
  }
  async getSetting(key) {
    return this.settingsStorage.getSetting(key);
  }
  async saveSetting(key, value) {
    return this.settingsStorage.saveSetting(key, value);
  }

  // =================
  // TASK METHODS
  // =================

  async getAllTasks() {
    return this.taskStorage.getAllTasks();
  }
  async addTask(taskData) {
    return this.taskStorage.addTask(taskData);
  }
  async updateTask(taskId, updates) {
    return this.taskStorage.updateTask(taskId, updates);
  }
  async deleteTask(taskId) {
    return this.taskStorage.deleteTask(taskId);
  }
  async getTaskById(taskId) {
    return this.taskStorage.getTaskById(taskId);
  }
  async updateTaskStatus(taskId, status, lastError = null) {
    try {
      const now = new Date().toISOString();
      const updates = {
        status,
        lastError,
        updatedAt: now
      };
      if (status === 'running') {
        updates.lastRun = now;
      }
      const result = await this.taskStorage.updateTask(taskId, updates);
      return result;
    } catch (error) {
      console.error('Error updating task status:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }
  async toggleTask(taskId, enabled) {
    return this.taskStorage.toggleTask(taskId, enabled);
  }
  async getTaskStats() {
    return this.taskStorage.getTaskStats();
  }

  // =================
  // UTILITY METHODS
  // =================

  /**
   * L·∫•y lo·∫°i storage ƒëang s·ª≠ d·ª•ng
   * @returns {string} Lo·∫°i storage ('sqlite')
   */
  getStorageType() {
    log('üì¶ getStorageType called');
    return 'sqlite';
  }

  /**
   * Ki·ªÉm tra xem c√≥ ƒëang d√πng SQLite kh√¥ng
   */
  isUsingSQLite() {
    return true;
  }

  /**
   * Extract username t·ª´ account info
   */
  extractUsername(accountInfo) {
    if (typeof accountInfo === 'string') {
      // If it's a string, it's probably the username
      return accountInfo.trim();
    }
    if (accountInfo && typeof accountInfo === 'object') {
      return accountInfo.username || accountInfo.user || accountInfo.name || '';
    }
    return '';
  }

  /**
   * Extract proxy host t·ª´ proxy info  
   */
  extractProxyHost(proxyInfo) {
    if (typeof proxyInfo === 'string') {
      // Format: host:port ho·∫∑c username:password@host:port
      const parts = proxyInfo.split('@');
      const hostPort = parts.length > 1 ? parts[1] : parts[0];
      return hostPort.split(':')[0];
    }
    if (proxyInfo && typeof proxyInfo === 'object') {
      return proxyInfo.host || proxyInfo.hostname || '';
    }
    return '';
  }

  /**
   * Close database connection
   */
  close() {
    if (this.db) {
      this.db.close();
      log('üîí SQLite connection closed');
    }
  }

  /**
   * Get database info
   */
  getDatabaseInfo() {
    return {
      type: 'sqlite',
      path: this.dbPath,
      size: this.getDatabaseSize(),
      tables: this.getTables()
    };
  }

  // =================
  // ACCOUNT BULK OPERATIONS
  // =================

  async bulkSetProxy(accountIds, proxyFolderId, accountsPerProxy = 1, selectedProxies = null) {
    try {
      log('=== BULK SET PROXY (STORAGE MANAGER) ===');
      log('Account IDs:', accountIds?.length);
      log('Proxy Folder ID:', proxyFolderId);
      log('Accounts per proxy:', accountsPerProxy);
      log('Selected proxies:', selectedProxies?.length || 0);

      // L·∫•y danh s√°ch accounts v√† proxies
      const accounts = await this.accountStorage.getAllAccounts();

      // L·∫•y danh s√°ch proxy
      let availableProxies = [];
      if (Array.isArray(selectedProxies) && selectedProxies.length > 0) {
        // S·ª≠ d·ª•ng danh s√°ch proxy ƒë∆∞·ª£c ch·ªçn
        const allProxies = await this.proxyStorage.getAllProxies();
        availableProxies = allProxies.filter(proxy => selectedProxies.includes(proxy.id));
        log('Using selected proxies:', availableProxies.length);
      } else {
        // S·ª≠ d·ª•ng proxy t·ª´ folder
        availableProxies = await this.proxyStorage.getProxiesByFolder(proxyFolderId);
        log('Using proxies from folder:', availableProxies.length);
      }
      if (!availableProxies || availableProxies.length === 0) {
        return {
          success: false,
          error: 'Kh√¥ng c√≥ proxy kh·∫£ d·ª•ng'
        };
      }

      // L·∫•y c√†i ƒë·∫∑t
      const settings = await this.settingsStorage.getSettings();
      const maxAccountsPerProxy = settings.proxy?.maxAccountsPerProxy || 5;
      log('Max accounts per proxy from settings:', maxAccountsPerProxy);

      // ƒê·∫øm s·ªë account hi·ªán t·∫°i ƒë√£ g√°n cho m·ªói proxy
      const proxyUsageCount = {};
      accounts.forEach(account => {
        if (account.proxyId) {
          proxyUsageCount[account.proxyId] = (proxyUsageCount[account.proxyId] || 0) + 1;
        }
      });

      // L·ªçc v√† s·∫Øp x·∫øp proxy c√≥ th·ªÉ s·ª≠ d·ª•ng
      const usableProxies = availableProxies.map(proxy => {
        const currentUsage = proxyUsageCount[proxy.id] || 0;
        const availableSlots = Math.max(0, maxAccountsPerProxy - currentUsage);
        return {
          ...proxy,
          availableSlots
        };
      }).filter(proxy => proxy.availableSlots > 0).sort((a, b) => b.availableSlots - a.availableSlots);
      log('Usable proxies after filtering:', usableProxies.length);
      if (usableProxies.length === 0) {
        return {
          success: false,
          error: 'T·∫•t c·∫£ proxy ƒë√£ ƒë·∫°t gi·ªõi h·∫°n s·ªë l∆∞·ª£ng t√†i kho·∫£n'
        };
      }

      // G√°n proxy cho accounts
      let updated = 0;
      const results = [];
      let proxyIndex = 0;
      for (const accountId of accountIds) {
        if (proxyIndex >= usableProxies.length) {
          // H·∫øt proxy kh·∫£ d·ª•ng
          break;
        }

        // L·∫•y proxy hi·ªán t·∫°i
        const currentProxy = usableProxies[proxyIndex];

        // G√°n proxy cho account
        const result = await this.accountStorage.updateAccount(accountId, {
          proxyId: currentProxy.id,
          lastUpdated: new Date().toISOString()
        });
        if (result.success) {
          updated++;
          results.push({
            accountId,
            proxyId: currentProxy.id,
            host: currentProxy.host || currentProxy.proxyInfo
          });

          // Gi·∫£m s·ªë l∆∞·ª£ng slot c√≤n l·∫°i c·ªßa proxy hi·ªán t·∫°i
          currentProxy.availableSlots--;

          // N·∫øu proxy ƒë√£ h·∫øt slot, chuy·ªÉn sang proxy ti·∫øp theo
          if (currentProxy.availableSlots <= 0) {
            proxyIndex++;
          }
        }
      }
      return {
        success: updated > 0,
        message: `ƒê√£ g√°n proxy cho ${updated}/${accountIds.length} t√†i kho·∫£n`,
        updated,
        totalRequested: accountIds.length,
        results
      };
    } catch (error) {
      error('Error in bulkSetProxy (StorageManager):', error);
      return {
        success: false,
        error: error.message
      };
    }
  }
  async bulkRemoveProxy(accountIds) {
    try {
      log(`Removing proxy from ${accountIds.length} accounts`);
      let updated = 0;
      const results = [];
      for (const accountId of accountIds) {
        const result = await this.accountStorage.updateAccount(accountId, {
          proxyId: null,
          lastUpdated: new Date().toISOString()
        });
        if (result.success) {
          updated++;
          results.push({
            accountId
          });
        }
      }
      return {
        success: updated > 0,
        message: `ƒê√£ x√≥a proxy kh·ªèi ${updated}/${accountIds.length} t√†i kho·∫£n`,
        updated,
        totalRequested: accountIds.length,
        results
      };
    } catch (error) {
      error('Error removing proxy from accounts:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }
  async bulkSetStatus(accountIds, status) {
    try {
      log(`Setting status "${status}" for ${accountIds.length} accounts`);
      let updated = 0;
      const results = [];
      for (const accountId of accountIds) {
        const result = await this.accountStorage.updateAccount(accountId, {
          status: status,
          lastUpdated: new Date().toISOString()
        });
        if (result.success) {
          updated++;
          results.push({
            accountId
          });
        }
      }
      return {
        success: updated > 0,
        message: `ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i cho ${updated}/${accountIds.length} t√†i kho·∫£n`,
        updated,
        totalRequested: accountIds.length,
        results
      };
    } catch (err) {
      error('Error setting status for accounts:', err);
      return {
        success: false,
        error: err.message
      };
    }
  }
  async bulkMoveToFolder(accountIds, folderId) {
    try {
      log(`Moving ${accountIds.length} accounts to folder ${folderId}`);
      let updated = 0;
      const results = [];
      for (const accountId of accountIds) {
        const result = await this.accountStorage.updateAccount(accountId, {
          folderId: folderId,
          lastUpdated: new Date().toISOString()
        });
        if (result.success) {
          updated++;
          results.push({
            accountId
          });
        }
      }
      return {
        success: updated > 0,
        message: `ƒê√£ di chuy·ªÉn ${updated}/${accountIds.length} t√†i kho·∫£n v√†o th∆∞ m·ª•c`,
        updated,
        totalRequested: accountIds.length,
        results
      };
    } catch (err) {
      error('Error moving accounts to folder:', err);
      return {
        success: false,
        error: err.message
      };
    }
  }
  async exportAccountsToText(format = 'username_password', accountIds = null, folderId = null) {
    try {
      log(`Exporting accounts with format ${format}`);

      // L·∫•y danh s√°ch accounts
      let accounts = await this.accountStorage.getAllAccounts();

      // L·ªçc theo accountIds n·∫øu c√≥
      if (Array.isArray(accountIds) && accountIds.length > 0) {
        accounts = accounts.filter(account => accountIds.includes(account.id));
      }

      // L·ªçc theo folderId n·∫øu c√≥
      if (folderId) {
        accounts = accounts.filter(account => account.folderId === folderId);
      }
      if (accounts.length === 0) {
        return {
          success: false,
          error: 'Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë·ªÉ xu·∫•t'
        };
      }

      // Format accounts
      let exportData = '';
      for (const account of accounts) {
        let line = '';
        switch (format) {
          case 'username':
            line = account.username || '';
            break;
          case 'username_password':
            line = `${account.username || ''}:${account.password || ''}`;
            break;
          case 'full':
            // username:password:proxy:cookieid
            let proxyInfo = '';
            if (account.proxyId) {
              const proxy = await this.proxyStorage.getProxyById(account.proxyId);
              if (proxy) {
                if (proxy.username && proxy.password) {
                  proxyInfo = `${proxy.host}:${proxy.port}:${proxy.username}:${proxy.password}`;
                } else {
                  proxyInfo = `${proxy.host}:${proxy.port}`;
                }
              }
            }
            line = `${account.username || ''}:${account.password || ''}:${proxyInfo}:${account.cookieId || ''}`;
            break;
          case 'json':
            // Ch·ªâ th√™m v√†o cu·ªëi file n·∫øu kh√¥ng ph·∫£i account ƒë·∫ßu ti√™n
            if (exportData.length > 0) {
              exportData += ',\n';
            }
            line = JSON.stringify(account, null, 2);
            break;
          default:
            line = `${account.username || ''}:${account.password || ''}`;
            break;
        }
        if (format !== 'json') {
          exportData += line + '\n';
        }
      }

      // N·∫øu xu·∫•t d·∫°ng JSON, b·ªçc trong array
      if (format === 'json') {
        exportData = `[\n${exportData}\n]`;
      }
      return {
        success: true,
        data: exportData,
        count: accounts.length,
        format: format
      };
    } catch (error) {
      error('Error exporting accounts:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }
}
module.exports = StorageManager;

/***/ }),

/***/ "./lib/storage/task-storage.js":
/*!*************************************!*\
  !*** ./lib/storage/task-storage.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const BaseStorage = __webpack_require__(/*! ./base-storage */ "./lib/storage/base-storage.js");
const {
  log,
  error
} = __webpack_require__(/*! ../logger */ "./lib/logger.js");
class TaskStorage extends BaseStorage {
  /**
   * Get all tasks
   */
  async getAllTasks() {
    try {
      log(`
                SELECT * FROM tasks 
                ORDER BY createdAt DESC
            `);
      const stmt = this.db.prepare(`
                SELECT * FROM tasks 
                ORDER BY createdAt DESC
            `);
      const tasks = stmt.all().map(task => ({
        ...task,
        enabled: Boolean(task.enabled),
        // Keep as ISO strings for IPC compatibility
        lastRun: task.lastRun,
        nextRun: task.nextRun,
        createdAt: task.createdAt,
        updatedAt: task.updatedAt
      }));
      log(`‚úÖ Successfully read ${tasks.length} tasks from SQLite`);
      return {
        success: true,
        data: this.serializeForIPC(tasks)
      };
    } catch (err) {
      error('‚ùå Error reading tasks from SQLite:', err);
      return {
        success: false,
        error: err.message,
        data: []
      };
    }
  }

  /**
   * Add new task
   */
  async addTask(taskData) {
    try {
      const taskId = this.generateId();
      const now = new Date().toISOString();
      const stmt = this.db.prepare(`
                INSERT INTO tasks (
                    id, name, handler, interval, enabled, status,
                    lastRun, nextRun, runCount, errorCount, lastError,
                    createdAt, updatedAt
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            `);
      stmt.run(taskId, taskData.name, taskData.handler, taskData.interval, taskData.enabled ? 1 : 0, 'idle', null, null, 0, 0, null, now, now);
      log(`‚úÖ Added task: ${taskData.name}`);
      return {
        success: true,
        id: taskId
      };
    } catch (err) {
      error('Error adding task:', err);
      return {
        success: false,
        error: err.message
      };
    }
  }

  /**
   * Update task
   */
  async updateTask(taskId, updates) {
    try {
      const now = new Date().toISOString();
      const setFields = [];
      const values = [];
      for (const [key, value] of Object.entries(updates)) {
        if (key === 'enabled') {
          setFields.push(`${key} = ?`);
          values.push(value ? 1 : 0);
        } else if (key === 'lastRun' || key === 'nextRun') {
          setFields.push(`${key} = ?`);
          values.push(value ? value : null);
        } else {
          setFields.push(`${key} = ?`);
          values.push(value);
        }
      }
      if (setFields.length === 0) {
        return {
          success: true
        };
      }
      setFields.push('updatedAt = ?');
      values.push(now);
      values.push(taskId);
      const sql = `UPDATE tasks SET ${setFields.join(', ')} WHERE id = ?`;
      const stmt = this.db.prepare(sql);
      const result = stmt.run(...values);
      if (result.changes > 0) {
        log(`‚úÖ Updated task ${taskId}`);
        return {
          success: true
        };
      } else {
        return {
          success: false,
          error: 'Task not found'
        };
      }
    } catch (error) {
      error('Error updating task:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Delete task
   */
  async deleteTask(taskId) {
    try {
      const stmt = this.db.prepare(`DELETE FROM tasks WHERE id = ?`);
      const result = stmt.run(taskId);
      if (result.changes > 0) {
        log(`‚úÖ Deleted task ${taskId}`);
        return {
          success: true
        };
      } else {
        return {
          success: false,
          error: 'Task not found'
        };
      }
    } catch (err) {
      error('Error deleting task:', err);
      return {
        success: false,
        error: err.message
      };
    }
  }

  /**
   * Get task by ID
   */
  async getTaskById(taskId) {
    try {
      const stmt = this.db.prepare(`SELECT * FROM tasks WHERE id = ?`);
      const task = stmt.get(taskId);
      if (task) {
        return {
          ...task,
          enabled: Boolean(task.enabled),
          lastRun: task.lastRun,
          nextRun: task.nextRun,
          createdAt: task.createdAt,
          updatedAt: task.updatedAt
        };
      }
      return null;
    } catch (err) {
      error('Error getting task by ID:', err);
      return null;
    }
  }

  /**
   * Get tasks by status
   */
  async getTasksByStatus(status) {
    try {
      const stmt = this.db.prepare(`
                SELECT * FROM tasks 
                WHERE status = ? 
                ORDER BY createdAt DESC
            `);
      const tasks = stmt.all(status).map(task => ({
        ...task,
        enabled: Boolean(task.enabled),
        lastRun: task.lastRun,
        nextRun: task.nextRun,
        createdAt: task.createdAt,
        updatedAt: task.updatedAt
      }));
      return this.serializeForIPC(tasks);
    } catch (err) {
      error('Error getting tasks by status:', err);
      return [];
    }
  }

  /**
   * Get enabled tasks
   */
  async getEnabledTasks() {
    try {
      const stmt = this.db.prepare(`
                SELECT * FROM tasks 
                WHERE enabled = 1 
                ORDER BY createdAt DESC
            `);
      const tasks = stmt.all().map(task => ({
        ...task,
        enabled: Boolean(task.enabled),
        lastRun: task.lastRun,
        nextRun: task.nextRun,
        createdAt: task.createdAt,
        updatedAt: task.updatedAt
      }));
      return this.serializeForIPC(tasks);
    } catch (error) {
      error('Error getting enabled tasks:', error);
      return [];
    }
  }

  /**
   * Update task status
   */
  async updateTaskStatus(taskId, status, lastError = null) {
    try {
      const updates = {
        status: status,
        lastRun: new Date().toISOString()
      };
      if (status === 'failed' && lastError) {
        updates.lastError = lastError;
        // Increment error count
        const task = await this.getTaskById(taskId);
        if (task) {
          updates.errorCount = (task.errorCount || 0) + 1;
        }
      } else if (status === 'completed') {
        // Increment run count
        const task = await this.getTaskById(taskId);
        if (task) {
          updates.runCount = (task.runCount || 0) + 1;
        }
      }
      return await this.updateTask(taskId, updates);
    } catch (err) {
      error('Error updating task status:', err);
      return {
        success: false,
        error: err.message
      };
    }
  }

  /**
   * Set task next run time
   */
  async setTaskNextRun(taskId, nextRunTime) {
    try {
      return await this.updateTask(taskId, {
        nextRun: nextRunTime ? nextRunTime : null
      });
    } catch (err) {
      error('Error setting task next run:', err);
      return {
        success: false,
        error: err.message
      };
    }
  }

  /**
   * Enable/disable task
   */
  async toggleTask(taskId, enabled) {
    try {
      const updates = {
        enabled: Boolean(enabled)
      };

      // If disabling, clear next run time
      if (!enabled) {
        updates.nextRun = null;
        updates.status = 'idle';
      }
      return await this.updateTask(taskId, updates);
    } catch (error) {
      error('Error toggling task:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Get task statistics
   */
  async getTaskStats() {
    try {
      const stmt = this.db.prepare(`
                SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN enabled = 1 THEN 1 ELSE 0 END) as enabled,
                    SUM(CASE WHEN status = 'running' THEN 1 ELSE 0 END) as running,
                    SUM(CASE WHEN status = 'failed' THEN 1 ELSE 0 END) as failed,
                    SUM(runCount) as totalRuns,
                    SUM(errorCount) as totalErrors
                FROM tasks
            `);
      const stats = stmt.get();
      return this.serializeForIPC({
        total: stats.total || 0,
        enabled: stats.enabled || 0,
        disabled: (stats.total || 0) - (stats.enabled || 0),
        running: stats.running || 0,
        failed: stats.failed || 0,
        idle: (stats.total || 0) - (stats.running || 0) - (stats.failed || 0),
        totalRuns: stats.totalRuns || 0,
        totalErrors: stats.totalErrors || 0
      });
    } catch (error) {
      error('Error getting task stats:', error);
      return this.serializeForIPC({
        total: 0,
        enabled: 0,
        disabled: 0,
        running: 0,
        failed: 0,
        idle: 0,
        totalRuns: 0,
        totalErrors: 0
      });
    }
  }

  /**
   * Clear task errors
   */
  async clearTaskErrors(taskId) {
    try {
      return await this.updateTask(taskId, {
        errorCount: 0,
        lastError: null,
        status: 'idle'
      });
    } catch (err) {
      error('Error clearing task errors:', err);
      return {
        success: false,
        error: err.message
      };
    }
  }

  /**
   * Reset task counters
   */
  async resetTaskCounters(taskId) {
    try {
      return await this.updateTask(taskId, {
        runCount: 0,
        errorCount: 0,
        lastError: null,
        lastRun: null,
        nextRun: null,
        status: 'idle'
      });
    } catch (err) {
      error('Error resetting task counters:', err);
      return {
        success: false,
        error: err.message
      };
    }
  }
}
module.exports = TaskStorage;

/***/ }),

/***/ "./lib/task-handlers.js":
/*!******************************!*\
  !*** ./lib/task-handlers.js ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const StorageAdapter = __webpack_require__(/*! ./storage-adapter */ "./lib/storage-adapter.js");
const helper = __webpack_require__(/*! ../main/businesses/helper */ "./main/businesses/helper.js");
const GroupView = __webpack_require__(/*! ../main/businesses/Viewer */ "./main/businesses/Viewer.js");
const {
  log,
  error
} = __webpack_require__(/*! ./logger */ "./lib/logger.js");
const notificationManager = __webpack_require__(/*! ./notification-manager */ "./lib/notification-manager.js");
/**
 * C√°c h√†m x·ª≠ l√Ω tasks
 */
class TaskHandlers {
  constructor(storageManager) {
    this.storageManager = storageManager || new StorageAdapter();
  }

  /**
   * Ki·ªÉm tra s·ª©c kh·ªèe accounts
   */
  async checkAccountHealth() {
    log('ƒêang ki·ªÉm tra s·ª©c kh·ªèe accounts...');
    try {
      const accounts = await this.storageManager.getAllAccounts();
      let healthyCount = 0;
      let unhealthyCount = 0;
      for (const account of accounts) {
        // Logic ki·ªÉm tra account health
        // V√≠ d·ª•: ki·ªÉm tra xem account c√≥ b·ªã ban kh√¥ng
        if (account.status === 'active') {
          healthyCount++;
        } else {
          unhealthyCount++;
        }
      }
      log(`K·∫øt qu·∫£ ki·ªÉm tra: ${healthyCount} kh·ªèe m·∫°nh, ${unhealthyCount} c√≥ v·∫•n ƒë·ªÅ`);
    } catch (error) {
      error('L·ªói khi ki·ªÉm tra s·ª©c kh·ªèe accounts:', error);
      throw error;
    }
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i proxy
   */
  async updateProxyStatus() {
    log('ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i proxies...');
    try {
      const proxies = await this.storageManager.getAllProxies();
      let activeCount = 0;
      let inactiveCount = 0;
      for (const proxy of proxies) {
        // Logic test proxy
        try {
          const result = await this.storageManager.testProxy(proxy.id);
          if (result.success) {
            activeCount++;
          } else {
            inactiveCount++;
          }
        } catch (error) {
          inactiveCount++;
        }
      }
      log(`C·∫≠p nh·∫≠t proxy: ${activeCount} ho·∫°t ƒë·ªông, ${inactiveCount} kh√¥ng ho·∫°t ƒë·ªông`);
    } catch (error) {
      error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i proxies:', error);
      throw error;
    }
  }

  /**
   * D·ªçn d·∫πp d·ªØ li·ªáu c≈©
   */
  async cleanupOldData() {
    log('ƒêang d·ªçn d·∫πp d·ªØ li·ªáu c≈©...');
    try {
      // Logic d·ªçn d·∫πp d·ªØ li·ªáu c≈©
      // V√≠ d·ª•: x√≥a logs c≈©, d·ªØ li·ªáu t·∫°m th·ªùi
      log('Ho√†n th√†nh d·ªçn d·∫πp d·ªØ li·ªáu');
    } catch (error) {
      error('L·ªói khi d·ªçn d·∫πp d·ªØ li·ªáu:', error);
      throw error;
    }
  }

  /**
   * Sao l∆∞u d·ªØ li·ªáu
   */
  async backupData() {
    log('ƒêang sao l∆∞u d·ªØ li·ªáu...');
    try {
      // Logic sao l∆∞u
      const accounts = await this.storageManager.getAllAccounts();
      const proxies = await this.storageManager.getAllProxies();
      const folders = await this.storageManager.getAllFolders();

      // T·∫°o backup file v·ªõi timestamp
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const backupData = {
        timestamp,
        accounts,
        proxies,
        folders
      };
      log(`T·∫°o backup th√†nh c√¥ng t·∫°i ${timestamp}`);
    } catch (error) {
      error('L·ªói khi sao l∆∞u d·ªØ li·ªáu:', error);
      throw error;
    }
  }

  /**
   * Gi√°m s√°t ph√≤ng live v√† c·∫≠p nh·∫≠t currentViewers
   * T·ª± ƒë·ªông d·ª´ng ph√≤ng khi kh√¥ng c√≤n live
   */
  async monitorRooms() {
    log('üîç Checking realViewers for live rooms...');
    try {
      const rooms = await this.storageManager.getAllRooms();

      // L·∫•y t·ªëi ƒëa 20 rooms ƒëang ch·∫°y, sort theo lastTimeCheckViewers l√¢u nh·∫•t ∆∞u ti√™n tr∆∞·ªõc
      const watchingRooms = rooms.filter(room => room.status === 'watching' && room.id) // ƒê·∫£m b·∫£o room c√≥ id
      .sort((a, b) => {
        const aTime = a.lastTimeCheckViewers || '1970-01-01T00:00:00.000Z';
        const bTime = b.lastTimeCheckViewers || '1970-01-01T00:00:00.000Z';
        return new Date(aTime) - new Date(bTime);
      }).slice(0, 20);
      if (watchingRooms.length === 0) {
        log('üì≠ No watching rooms to check');
        return {
          success: true,
          code: 'noActiveRooms'
        };
      }
      log(`üéØ Checking ${watchingRooms.length} rooms...`);
      let successCount = 0;
      let errorCount = 0;
      let stoppedCount = 0; // ƒê·∫øm s·ªë ph√≤ng b·ªã d·ª´ng t·ª± ƒë·ªông
      let proxies = await helper.getProxySite();
      for (const room of watchingRooms) {
        try {
          // Ki·ªÉm tra room.id kh√¥ng ƒë∆∞·ª£c null
          if (!room.id) {
            error('‚ùå B·ªè qua room kh√¥ng c√≥ id');
            errorCount++;
            continue;
          }
          log(`üîç Checking room: ${room.roomUsername || room.roomId}`);
          let proxy = proxies[Math.floor(Math.random() * proxies.length)];
          // S·ª≠ d·ª•ng helper.getRoomInfo4 nh∆∞ y√™u c·∫ßu
          const roomInfo = await helper.getRoomInfo4({
            room_id: room.roomId,
            proxy: proxy
          });
          if (roomInfo.err || roomInfo.view_count === undefined) {
            log(`‚ùå Cannot get view_count for room ${room.roomId}:`, roomInfo);
            errorCount++;
            continue;
          }
          const now = new Date().toISOString();

          // ‚≠ê T√çNH NƒÇNG M·ªöI: T·ª± ƒë·ªông d·ª´ng ph√≤ng khi kh√¥ng c√≤n live
          if (!roomInfo.is_alive) {
            log(`üõë Room ${room.roomUsername || room.roomId} is no longer live - Auto stopping...`);
            try {
              // Th·ª±c hi·ªán ƒë·∫ßy ƒë·ªß workflow d·ª´ng ph√≤ng
              await this.storageManager.updateRoom(room.id, {
                status: 'stopped',
                stoppedAt: now,
                stopReason: 'auto_stopped_not_live' // L√Ω do d·ª´ng
              });
              notificationManager.notifyRoomStopped(room);
              // ‚úÖ S·ª≠ d·ª•ng GroupView ƒë√£ import s·∫µn
              await GroupView.stopViewers({
                task_id: room.id
              });

              // Gi·∫£i ph√≥ng c√°c accounts
              try {
                await this.storageManager.releaseAccountsFromRoom(room.id);
                log(`‚úÖ Released accounts from auto-stopped room ${room.id}`);
              } catch (releaseError) {
                error(`‚ùå Error releasing accounts from room ${room.id}:`, releaseError);
              }
              log(`‚úÖ Auto-stopped room ${room.roomUsername}: Not live anymore`);
              stoppedCount++;
            } catch (stopError) {
              error(`‚ùå Error auto-stopping room ${room.roomId}:`, stopError);
              errorCount++;
            }
            continue; // Skip vi·ªác c·∫≠p nh·∫≠t viewers cho ph√≤ng ƒë√£ d·ª´ng
          }

          // Th√™m v√†o file history ri√™ng thay v√¨ rooms.json
          await this.storageManager.addViewerHistoryEntry(room.id, {
            timestamp: now,
            viewers: roomInfo.view_count,
            isAlive: roomInfo.is_alive
          });

          // Ch·ªâ update realViewers + lastTimeCheckViewers trong rooms.json
          // KH√îNG ghi ƒë√® currentViewers (ƒë√≥ l√† s·ªë account tool)
          await this.storageManager.updateRoom(room.id, {
            realViewers: roomInfo.view_count,
            // <-- Field m·ªõi cho viewer th·ª±c TikTok
            lastTimeCheckViewers: now
          });
          log(`‚úÖ Updated room ${room.roomUsername}: ${roomInfo.view_count} real viewers`);
          successCount++;

          // Delay ƒë·ªÉ tr√°nh rate limit
          await new Promise(resolve => setTimeout(resolve, 1000));
        } catch (error) {
          error(`‚ùå Error checking room ${room.roomId}:`, error);
          errorCount++;
        }
      }
      log(`‚úÖ Completed monitoring: ${successCount} updated, ${stoppedCount} auto-stopped, ${errorCount} errors`);
      return {
        success: true,
        code: 'roomMonitoringCompleted',
        params: {
          updated: successCount,
          autoStopped: stoppedCount,
          errors: errorCount
        }
      };
    } catch (error) {
      error('‚ùå Error monitoring rooms:', error);
      return {
        success: false,
        code: 'taskStartFailed'
      };
    }
  }

  /**
   * C·∫≠p nh·∫≠t info cho accounts ch∆∞a c√≥ th√¥ng tin
   */
  async updateAccountsInfo() {
    log('ƒêang c·∫≠p nh·∫≠t info cho accounts...');
    try {
      // L·∫•y 10 accounts ch∆∞a c√≥ info, sort theo createdAt c≈© nh·∫•t
      const accounts = await this.storageManager.getAllAccounts();

      // Filter accounts ch∆∞a c√≥ avatarThumb ho·∫∑c roomUsername
      const accountsNeedInfo = accounts.filter(account => !account.avatarThumb || !account.roomUsername).sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).slice(0, 10); // L·∫•y 10 accounts ƒë·∫ßu ti√™n

      if (accountsNeedInfo.length === 0) {
        log('‚úÖ T·∫•t c·∫£ accounts ƒë√£ c√≥ th√¥ng tin ƒë·∫ßy ƒë·ªß');
        return;
      }
      log(`üîÑ T√¨m th·∫•y ${accountsNeedInfo.length} accounts c·∫ßn c·∫≠p nh·∫≠t info`);
      let successCount = 0;
      let errorCount = 0;
      let proxies = await helper.getProxySite();
      for (const account of accountsNeedInfo) {
        try {
          log(`üîÑ ƒêang c·∫≠p nh·∫≠t info cho account: ${account.username}`);

          // G·ªçi getUserInfo
          let proxy = proxies[Math.floor(Math.random() * proxies.length)];
          log("üîÑ Using proxy:", proxy);
          const result = await helper.getUserInfo({
            proxy: proxy,
            username: account.username
          });
          if (result.err || !result.avatarThumb) {
            log(`‚ùå L·ªói khi l·∫•y info cho ${account.username}:`, result);
            errorCount++;
            continue;
          }

          // C·∫≠p nh·∫≠t account v·ªõi th√¥ng tin m·ªõi
          await this.storageManager.updateAccount(account.id, {
            avatarThumb: result.avatarThumb,
            roomUsername: result.roomUsername || account.username,
            updatedAt: new Date()
          });
          log(`‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng cho ${account.username}: ${result.roomUsername}`);
          successCount++;

          // Delay gi·ªØa c√°c request ƒë·ªÉ tr√°nh rate limit
          await new Promise(resolve => setTimeout(resolve, 1000));
        } catch (error) {
          error(`‚ùå L·ªói khi x·ª≠ l√Ω account ${account.username}:`, error);
          errorCount++;
        }
      }
      log(`‚úÖ Ho√†n th√†nh c·∫≠p nh·∫≠t info: ${successCount} th√†nh c√¥ng, ${errorCount} l·ªói`);
    } catch (error) {
      error('‚ùå L·ªói khi c·∫≠p nh·∫≠t account info:', error);
      throw error;
    }
  }

  /**
   * T·ª± ƒë·ªông d·ª´ng rooms ƒë√£ h·∫øt th·ªùi gian ch·∫°y
   * Task ch·∫°y ng·∫ßm nh∆∞ crontask
   */
  async autoStopExpiredRooms() {
    log('‚è∞ Checking for expired rooms to auto-stop...');
    try {
      const rooms = await this.storageManager.getAllRooms();

      // L·∫•y t·∫•t c·∫£ rooms ƒëang watching
      const watchingRooms = rooms.filter(room => room.status === 'watching' && room.id);
      if (watchingRooms.length === 0) {
        log('üì≠ No watching rooms to check for expiration');
        return {
          success: true,
          code: 'noActiveRooms'
        };
      }

      // Shuffle v√† l·∫•y t·ªëi ƒëa 100 rooms ng·∫´u nhi√™n
      const shuffledRooms = watchingRooms.sort(() => Math.random() - 0.5);
      const roomsToCheck = shuffledRooms.slice(0, 100);
      log(`üé≤ Checking ${roomsToCheck.length} random rooms for expiration...`);
      let expiredCount = 0;
      let errorCount = 0;
      let checkedCount = 0;
      const now = new Date();
      for (const room of roomsToCheck) {
        try {
          checkedCount++;

          // Ki·ªÉm tra room.id kh√¥ng ƒë∆∞·ª£c null
          if (!room.id) {
            error('‚ùå B·ªè qua room kh√¥ng c√≥ id');
            errorCount++;
            continue;
          }

          // Ki·ªÉm tra xem room c√≥ startedAt v√† duration kh√¥ng
          if (!room.startedAt || !room.duration) {
            log(`‚ö†Ô∏è Room ${room.roomUsername || room.roomId} missing startedAt or duration - skipping`);
            continue;
          }
          const startedAt = new Date(room.startedAt);
          const durationMs = room.duration * 60 * 1000; // Convert duration (ph√∫t) to milliseconds
          const runningTime = now - startedAt;

          // Ki·ªÉm tra n·∫øu ƒë√£ h·∫øt th·ªùi gian ch·∫°y
          if (runningTime >= durationMs) {
            const runningMinutes = Math.floor(runningTime / (60 * 1000));
            log(`‚è∞ Room ${room.roomUsername || room.roomId} expired (${runningMinutes}min >= ${room.duration}min) - Auto stopping...`);
            try {
              // Th·ª±c hi·ªán ƒë·∫ßy ƒë·ªß workflow d·ª´ng ph√≤ng
              await this.storageManager.updateRoom(room.id, {
                status: 'stopped',
                stoppedAt: now.toISOString(),
                stopReason: 'auto_stopped_duration_expired',
                finalDuration: runningMinutes // L∆∞u th·ªùi gian ch·∫°y th·ª±c t·∫ø
              });
              notificationManager.notifyRoomStopped(room);
              // D·ª´ng viewers
              await GroupView.stopViewers({
                task_id: room.id
              });

              // Gi·∫£i ph√≥ng c√°c accounts
              try {
                await this.storageManager.releaseAccountsFromRoom(room.id);
                log(`‚úÖ Released accounts from auto-stopped expired room ${room.id}`);
              } catch (releaseError) {
                error(`‚ùå Error releasing accounts from room ${room.id}:`, releaseError);
              }
              log(`‚úÖ Auto-stopped expired room ${room.roomUsername}: Ran for ${runningMinutes} minutes`);
              expiredCount++;
            } catch (stopError) {
              error(`‚ùå Error auto-stopping expired room ${room.roomId}:`, stopError);
              errorCount++;
            }
          } else {
            const remainingMinutes = Math.floor((durationMs - runningTime) / (60 * 1000));
            log(`‚è≥ Room ${room.roomUsername || room.roomId} still running (${remainingMinutes}min remaining)`);
          }

          // Delay nh·ªè ƒë·ªÉ kh√¥ng qu√° t·∫£i
          await new Promise(resolve => setTimeout(resolve, 200));
        } catch (error) {
          error(`‚ùå Error checking room ${room.roomId}:`, error);
          errorCount++;
        }
      }
      log(`‚úÖ Completed duration check: ${checkedCount} checked, ${expiredCount} auto-stopped, ${errorCount} errors`);
      return {
        success: true,
        code: 'expiredRoomsChecked',
        params: {
          checked: checkedCount,
          expired: expiredCount,
          errors: errorCount
        }
      };
    } catch (error) {
      error('‚ùå Error checking expired rooms:', error);
      return {
        success: false,
        code: 'taskStartFailed'
      };
    }
  }
}

// ‚≠ê Export class TaskHandlers ƒë·ªÉ c√≥ th·ªÉ kh·ªüi t·∫°o v·ªõi storageManager
module.exports = TaskHandlers;

/***/ }),

/***/ "./lib/task-manager.js":
/*!*****************************!*\
  !*** ./lib/task-manager.js ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const fs = (__webpack_require__(/*! fs */ "fs").promises);
const path = __webpack_require__(/*! path */ "path");
const {
  app
} = __webpack_require__(/*! electron */ "electron");
const {
  randomUUID
} = __webpack_require__(/*! crypto */ "crypto");
const {
  log,
  error
} = __webpack_require__(/*! ./logger */ "./lib/logger.js");

/**
 * Qu·∫£n l√Ω tasks t·ª± ƒë·ªông
 */
class TaskManager {
  constructor(storageManager = null) {
    this.dataDir = path.join(app.getPath('userData'), 'amac-data');

    // ‚≠ê L∆∞u reference t·ªõi storageManager  
    this.storageManager = storageManager;

    // L∆∞u tr·ªØ c√°c timer ƒëang ch·∫°y
    this.activeTimers = new Map();

    // Registry c·ªßa c√°c h√†m x·ª≠ l√Ω
    this.taskHandlers = new Map();
    this.writeQueue = Promise.resolve(); // ‚úÖ Write queue ƒë·ªÉ serialize writes

    this.init();
  }

  /**
   * Kh·ªüi t·∫°o task manager
   */
  async init() {
    try {
      await fs.mkdir(this.dataDir, {
        recursive: true
      });

      // ‚≠ê Kh√¥ng c·∫ßn initFile n·ªØa v√¨ d√πng SQLite

      // ƒêƒÉng k√Ω c√°c h√†m x·ª≠ l√Ω m·∫∑c ƒë·ªãnh
      this.registerDefaultHandlers();

      // ‚úÖ T·∫°o task ng·∫ßm t·ª± ƒë·ªông
      await this.ensureSystemTasks();

      // Kh·ªüi t·∫°o l·∫°i c√°c task ƒëang k√≠ch ho·∫°t
      await this.restoreActiveTasks();
      log('Task manager initialized');
    } catch (err) {
      error('Error initializing task manager:', err);
    }
  }

  /**
   * ƒê·ªçc d·ªØ li·ªáu tasks t·ª´ SQLite
   */
  async readTasks() {
    try {
      if (!this.storageManager) {
        log('‚ö†Ô∏è No storage manager, falling back to empty tasks');
        return [];
      }
      const result = await this.storageManager.getAllTasks();
      if (result.success) {
        log(`üìñ Successfully read ${result.data.length} tasks from SQLite`);
        return result.data;
      } else {
        log('‚ùå Error reading tasks from SQLite:', result.error);
        return [];
      }
    } catch (error) {
      log('‚ùå Error reading tasks:', error);
      return [];
    }
  }

  /**
   * Ghi d·ªØ li·ªáu tasks - KH√îNG C·∫¶N THI·∫æT v·ªõi SQLite v√¨ auto-save
   */
  async writeTasks(tasks) {
    // ‚≠ê V·ªõi SQLite, kh√¥ng c·∫ßn writeTasks v√¨ m·ªói operation t·ª± ƒë·ªông save
    // Ch·ªâ log ƒë·ªÉ theo d√µi
    log(`üìù Tasks stored in SQLite: ${tasks.length} tasks`);
    return true;
  }

  /**
   * ƒêƒÉng k√Ω h√†m x·ª≠ l√Ω cho task
   */
  registerHandler(handlerName, handlerFunction) {
    this.taskHandlers.set(handlerName, handlerFunction);
  }

  /**
   * ƒêƒÉng k√Ω c√°c h√†m x·ª≠ l√Ω m·∫∑c ƒë·ªãnh
   */
  registerDefaultHandlers() {
    // ‚≠ê Import v√† kh·ªüi t·∫°o task handlers v·ªõi storageManager
    const TaskHandlers = __webpack_require__(/*! ./task-handlers */ "./lib/task-handlers.js");
    const taskHandlersInstance = new TaskHandlers(this.storageManager);
    this.registerHandler('checkAccountHealth', taskHandlersInstance.checkAccountHealth.bind(taskHandlersInstance));
    this.registerHandler('updateProxyStatus', taskHandlersInstance.updateProxyStatus.bind(taskHandlersInstance));
    this.registerHandler('cleanupOldData', taskHandlersInstance.cleanupOldData.bind(taskHandlersInstance));
    this.registerHandler('backupData', taskHandlersInstance.backupData.bind(taskHandlersInstance));
    this.registerHandler('monitorRooms', taskHandlersInstance.monitorRooms.bind(taskHandlersInstance));
    this.registerHandler('updateAccountsInfo', taskHandlersInstance.updateAccountsInfo.bind(taskHandlersInstance));
    this.registerHandler('autoStopExpiredRooms', taskHandlersInstance.autoStopExpiredRooms.bind(taskHandlersInstance));
  }

  /**
   * L·∫•y t·∫•t c·∫£ tasks
   */
  async getAllTasks() {
    return await this.readTasks();
  }

  /**
   * ƒê·∫£m b·∫£o c√°c system tasks ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông
   */
  async ensureSystemTasks() {
    try {
      const tasks = await this.getAllTasks();

      // Ki·ªÉm tra xem ƒë√£ c√≥ task autoStopExpiredRooms ch∆∞a
      const expiredRoomTask = tasks.find(t => t.handler === 'autoStopExpiredRooms');
      const updateAccountsInfoTask = tasks.find(t => t.handler === 'updateAccountsInfo');
      const monitorRoomsTask = tasks.find(t => t.handler === 'monitorRooms');

      // T·∫°o th·ªùi gian hi·ªán t·∫°i v√† th·ªùi gian ch·∫°y ti·∫øp theo
      const now = new Date().toISOString();
      const nextRunTime = new Date(Date.now() + 60000).toISOString(); // M·ªôt ph√∫t t·ª´ hi·ªán t·∫°i

      if (!expiredRoomTask) {
        await this.addTask({
          name: 'Auto Stop Expired Rooms',
          handler: 'autoStopExpiredRooms',
          interval: 60000,
          // 1 ph√∫t
          enabled: true,
          status: 'idle',
          lastRun: null,
          nextRun: nextRunTime
        });
      }
      if (!updateAccountsInfoTask) {
        await this.addTask({
          name: 'Update Accounts Info',
          handler: 'updateAccountsInfo',
          interval: 60000,
          // 1 ph√∫t
          enabled: true,
          status: 'idle',
          lastRun: null,
          nextRun: nextRunTime
        });
      }
      if (!monitorRoomsTask) {
        await this.addTask({
          name: 'Monitor Rooms',
          handler: 'monitorRooms',
          interval: 60000,
          // 1 ph√∫t
          enabled: true,
          status: 'idle',
          lastRun: null,
          nextRun: nextRunTime
        });
      }
    } catch (error) {
      error('Error ensuring system tasks:', error);
    }
  }

  /**
   * Th√™m task m·ªõi
   */
  async addTask(taskData) {
    if (!this.storageManager) {
      throw new Error('Storage manager not initialized');
    }

    // Validate handler exists
    if (!this.taskHandlers.has(taskData.handler)) {
      throw new Error(`Handler '${taskData.handler}' kh√¥ng t·ªìn t·∫°i`);
    }

    // Th√™m c√°c tr∆∞·ªùng m·∫∑c ƒë·ªãnh
    const task = {
      ...taskData,
      id: randomUUID(),
      status: taskData.status || 'idle',
      runCount: 0,
      errorCount: 0,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    const result = await this.storageManager.addTask(task);
    if (!result.success) {
      throw new Error(result.error);
    }

    // B·∫Øt ƒë·∫ßu task n·∫øu ƒë∆∞·ª£c k√≠ch ho·∫°t
    if (task.enabled) {
      await this.startTask(task.id);
    }
    return task.id;
  }

  /**
   * C·∫≠p nh·∫≠t task
   */
  async updateTask(taskId, updates) {
    if (!this.storageManager) {
      throw new Error('Storage manager not initialized');
    }
    const result = await this.storageManager.updateTask(taskId, updates);
    if (!result.success) {
      throw new Error(result.error);
    }

    // Restart task n·∫øu enabled thay ƒë·ªïi
    if ('enabled' in updates) {
      if (updates.enabled) {
        await this.startTask(taskId);
      } else {
        this.stopTask(taskId);
      }
    }
    return true;
  }

  /**
   * X√≥a task
   */
  async deleteTask(taskId) {
    if (!this.storageManager) {
      throw new Error('Storage manager not initialized');
    }

    // Stop task tr∆∞·ªõc khi x√≥a
    this.stopTask(taskId);
    const result = await this.storageManager.deleteTask(taskId);
    if (!result.success) {
      throw new Error(result.error);
    }
    return true;
  }

  /**
   * B·∫Øt ƒë·∫ßu task tr·ª±c ti·∫øp (kh√¥ng check enabled)
   */
  async startTaskDirectly(taskId) {
    log(`üöÄ B·∫Øt ƒë·∫ßu task tr·ª±c ti·∫øp ${taskId}`);
    const tasks = await this.getAllTasks();
    const task = tasks.find(t => t.id === taskId);
    if (!task) {
      throw new Error('Task kh√¥ng t·ªìn t·∫°i');
    }

    // D·ª´ng timer c≈© n·∫øu c√≥
    this.stopTask(taskId);

    // T·∫°o timer m·ªõi
    const timer = setInterval(async () => {
      await this.executeTask(taskId);
    }, task.interval);
    this.activeTimers.set(taskId, timer);

    // T√≠nh to√°n th·ªùi gian ch·∫°y ti·∫øp theo m·ªôt c√°ch ch√≠nh x√°c
    const nextRunTime = new Date(Date.now() + task.interval).toISOString();

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i task
    await this.storageManager.updateTask(taskId, {
      status: 'running',
      nextRun: nextRunTime
    });
    log(`Task '${task.name}' ƒë√£ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu, ch·∫°y ti·∫øp theo v√†o: ${nextRunTime}`);
  }

  /**
   * B·∫Øt ƒë·∫ßu task (v·ªõi validation)
   */
  async startTask(taskId) {
    const tasks = await this.getAllTasks();
    const task = tasks.find(t => t.id === taskId);
    if (!task) {
      throw new Error('Task kh√¥ng t·ªìn t·∫°i');
    }
    if (!task.enabled) {
      throw new Error('Task ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t');
    }
    return await this.startTaskDirectly(taskId);
  }

  /**
   * D·ª´ng task
   */
  stopTask(taskId) {
    log(`üõë Attempting to stop task ${taskId}`);
    const timer = this.activeTimers.get(taskId);
    if (timer) {
      clearInterval(timer);
      this.activeTimers.delete(taskId);
      log(`‚úÖ Task ${taskId} timer cleared successfully`);
    } else {
      log(`‚ö†Ô∏è No active timer found for task ${taskId}`);
    }

    // Debug: Show remaining active timers
    log(`üîç Active timers after stop:`, Array.from(this.activeTimers.keys()));
  }

  /**
   * Th·ª±c thi task v·ªõi improved checking
   */
  async executeTask(taskId) {
    log(`üöÄ Executing task ${taskId}`);
    const tasks = await this.getAllTasks();
    const task = tasks.find(t => t.id === taskId);
    if (!task) {
      log(`‚ùå Task ${taskId} not found`);
      // ‚úÖ CH·ªà STOP TASK ƒê√ì, KH√îNG STOP T·∫§T C·∫¢
      this.stopTask(taskId);
      return;
    }
    if (!task.enabled) {
      log(`‚ùå Task ${taskId} is disabled, stopping`);
      this.stopTask(taskId);
      return;
    }

    // TRIPLE CHECK: Timer c√≥ c√≤n trong activeTimers kh√¥ng
    if (!this.activeTimers.has(taskId)) {
      log(`‚ùå Task ${taskId} timer not in activeTimers, stopping`);
      return;
    }
    try {
      log(`‚è≥ Task ${task.name} (${taskId}) starting execution`);

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i running v√† lastRun
      const currentTime = new Date().toISOString();
      await this.storageManager.updateTask(taskId, {
        status: 'running',
        lastRun: currentTime
      });
      const handler = this.taskHandlers.get(task.handler);
      if (!handler) {
        throw new Error(`Handler '${task.handler}' kh√¥ng t·ªìn t·∫°i`);
      }

      // ‚úÖ WRAPPER v·ªõi timeout ƒë·ªÉ tr√°nh hang
      await Promise.race([handler(), new Promise((_, reject) => setTimeout(() => reject(new Error('Task timeout after 5 minutes')), 5 * 60 * 1000))]);
      log(`‚úÖ Task ${taskId} completed successfully`);

      // T√≠nh to√°n nextRun m·ªõi
      const nextRunTime = new Date(Date.now() + task.interval).toISOString();

      // C·∫≠p nh·∫≠t status, runCount, v√† nextRun
      await this.storageManager.updateTask(taskId, {
        status: 'completed',
        runCount: (task.runCount || 0) + 1,
        nextRun: nextRunTime
      });
    } catch (err) {
      error(`‚ùå Error executing task ${task.name}:`, err);

      // ‚úÖ Kh√¥ng crash n·∫øu updateTaskStatus fail
      try {
        // T√≠nh to√°n nextRun m·ªõi ngay c·∫£ khi c√≥ l·ªói
        const nextRunTime = new Date(Date.now() + task.interval).toISOString();
        await this.storageManager.updateTask(taskId, {
          status: 'error',
          lastError: err.message,
          errorCount: (task.errorCount || 0) + 1,
          nextRun: nextRunTime
        });
      } catch (updateErr) {
        error(`‚ùå Failed to update task status:`, updateErr);
      }
    }
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i task
   */
  async updateTaskStatus(taskId, status, lastError = null) {
    if (!this.storageManager) {
      log('‚ö†Ô∏è No storage manager, skipping status update');
      return;
    }
    try {
      // L·∫•y th√¥ng tin task hi·ªán t·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t ƒë√∫ng
      const task = await this.storageManager.getTaskById(taskId);
      if (!task) {
        log(`‚ö†Ô∏è Cannot update status for non-existent task ${taskId}`);
        return;
      }
      const updates = {
        status,
        updatedAt: new Date().toISOString()
      };

      // C·∫≠p nh·∫≠t lastRun n·∫øu l√† running ho·∫∑c completed
      if (status === 'running' || status === 'completed') {
        updates.lastRun = new Date().toISOString();
      }

      // C·∫≠p nh·∫≠t nextRun n·∫øu task v·∫´n active
      if (task.enabled && (status === 'completed' || status === 'running')) {
        updates.nextRun = new Date(Date.now() + task.interval).toISOString();
      }

      // C·∫≠p nh·∫≠t error n·∫øu c√≥
      if (lastError) {
        updates.lastError = lastError;
        updates.errorCount = (task.errorCount || 0) + 1;
      }

      // C·∫≠p nh·∫≠t runCount n·∫øu completed
      if (status === 'completed') {
        updates.runCount = (task.runCount || 0) + 1;
      }
      const result = await this.storageManager.updateTask(taskId, updates);
      if (!result.success) {
        error('‚ùå Error updating task status:', result.error);
      }
    } catch (err) {
      error('‚ùå Error updating task status:', err);
    }
  }

  /**
   * Kh√¥i ph·ª•c c√°c task ƒëang ho·∫°t ƒë·ªông sau khi restart
   */
  async restoreActiveTasks() {
    const tasks = await this.getAllTasks();
    const activeTasks = tasks.filter(t => t.enabled);
    for (const task of activeTasks) {
      try {
        await this.startTask(task.id);
      } catch (err) {
        error(`Error restoring task ${task.name}:`, err);
      }
    }
  }

  /**
   * Th·ª±c thi task ngay l·∫≠p t·ª©c (manual run)
   */
  async runTaskNow(taskId) {
    await this.executeTask(taskId);
  }

  /**
   * D·ªçn d·∫πp t·∫•t c·∫£ timers khi shutdown
   */
  cleanup() {
    for (const [taskId, timer] of this.activeTimers) {
      clearInterval(timer);
    }
    this.activeTimers.clear();
  }

  /**
   * L·∫•y danh s√°ch handlers c√≥ s·∫µn
   */
  getAvailableHandlers() {
    return Array.from(this.taskHandlers.keys());
  }

  /**
   * Debug method - Show active timers
   */
  debugActiveTimers() {
    log('üîç Active Timers:', Array.from(this.activeTimers.keys()));
    log('üîç Total active timers:', this.activeTimers.size);
  }
}
module.exports = TaskManager;

/***/ }),

/***/ "./main/background.js":
/*!****************************!*\
  !*** ./main/background.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const path = __webpack_require__(/*! path */ "path");
const {
  app,
  ipcMain,
  screen
} = __webpack_require__(/*! electron */ "electron");
const serve = __webpack_require__(/*! electron-serve */ "electron-serve");
const {
  createWindow
} = __webpack_require__(/*! ./helpers */ "./main/helpers/index.js");
const Viewer = __webpack_require__(/*! ./businesses/Viewer.js */ "./main/businesses/Viewer.js");
const {
  log,
  error
} = __webpack_require__(/*! ../lib/logger */ "./lib/logger.js");
const {
  createMenu,
  setupMenuLocalization
} = __webpack_require__(/*! ./menu */ "./main/menu.js");
const fs = __webpack_require__(/*! fs */ "fs");
const appState = __webpack_require__(/*! ../lib/app-state */ "./lib/app-state.js");
const isProd = "development" === 'production';

// Set app name
app.name = 'amac-tiktok-viewer';
if (process.platform === 'darwin') {
  const iconPath = isProd ? path.join(process.resourcesPath, 'icon.png') : path.join(__dirname, '../resources/icon.png');
  try {
    if ((__webpack_require__(/*! fs */ "fs").existsSync)(iconPath)) {
      app.dock.setIcon(iconPath);
    }
  } catch (e) {
    // Ignore icon errors
  }
}

// H√†m c·∫≠p nh·∫≠t t√™n ·ª©ng d·ª•ng theo ng√¥n ng·ªØ
function updateAppName() {
  // ƒê·ªçc file translation d·ª±a tr√™n ng√¥n ng·ªØ hi·ªán t·∫°i
  const currentLanguage = appState.language || 'vi';
  const isProd = "development" === 'production';

  // ƒê·ªçc file translation t·ª´ th∆∞ m·ª•c locales
  try {
    let translationPath;
    if (isProd) {
      // Trong m√¥i tr∆∞·ªùng production, ƒë∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c locales ƒë√£ gi·∫£i n√©n
      const appPath = app.getAppPath();
      const appDir = path.dirname(appPath);

      // Th·ª≠ t√¨m trong th∆∞ m·ª•c locales gi·∫£i n√©n ·ªü c√πng c·∫•p v·ªõi app.asar
      translationPath = path.join(appDir, 'locales', currentLanguage, 'common.json');

      // Tr√™n macOS c√≥ th·ªÉ c√≥ c·∫•u tr√∫c kh√°c
      if (process.platform === 'darwin' && !fs.existsSync(translationPath)) {
        // Th·ª≠ t√¨m trong Resources
        translationPath = path.join(process.resourcesPath, 'locales', currentLanguage, 'common.json');
      }
    } else {
      // M√¥i tr∆∞·ªùng development
      translationPath = path.join(app.getAppPath(), 'renderer', 'locales', currentLanguage, 'common.json');
    }
    log(`üîç App: Trying to load translations from: ${translationPath}`);
    if (fs.existsSync(translationPath)) {
      const data = fs.readFileSync(translationPath, 'utf8');
      const translations = JSON.parse(data);

      // C·∫≠p nh·∫≠t t√™n ·ª©ng d·ª•ng n·∫øu c√≥
      if (translations && translations.app && translations.app.title) {
        app.name = translations.app.title;
        log(`‚úÖ App: Updated app name to "${app.name}" (${currentLanguage})`);
      }
    } else {
      log(`‚ùå App: Translation file not found for ${currentLanguage} at ${translationPath}`);

      // Th·ª≠ d√πng ti·∫øng Vi·ªát l√†m fallback
      let fallbackPath;
      if (isProd) {
        // Trong m√¥i tr∆∞·ªùng production
        const appPath = app.getAppPath();
        const appDir = path.dirname(appPath);

        // Th·ª≠ t√¨m trong th∆∞ m·ª•c locales gi·∫£i n√©n
        fallbackPath = path.join(appDir, 'locales', 'vi', 'common.json');

        // Tr√™n macOS c√≥ th·ªÉ c√≥ c·∫•u tr√∫c kh√°c
        if (process.platform === 'darwin' && !fs.existsSync(fallbackPath)) {
          // Th·ª≠ t√¨m trong Resources
          fallbackPath = path.join(process.resourcesPath, 'locales', 'vi', 'common.json');
        }
      } else {
        // M√¥i tr∆∞·ªùng development
        fallbackPath = path.join(app.getAppPath(), 'renderer', 'locales', 'vi', 'common.json');
      }
      log(`üîç App: Trying fallback at: ${fallbackPath}`);
      if (fs.existsSync(fallbackPath)) {
        const data = fs.readFileSync(fallbackPath, 'utf8');
        const translations = JSON.parse(data);

        // C·∫≠p nh·∫≠t t√™n ·ª©ng d·ª•ng n·∫øu c√≥
        if (translations && translations.app && translations.app.title) {
          app.name = translations.app.title;
          log(`‚úÖ App: Updated app name to "${app.name}" (fallback to vi)`);
        }
      } else {
        log(`‚ùå App: Fallback translation file not found at ${fallbackPath}`);
      }
    }
  } catch (err) {
    log(`‚ùå App: Error updating app name: ${err.message}`);
  }
}

// ƒêƒÉng k√Ω l·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi ng√¥n ng·ªØ cho t√™n ·ª©ng d·ª•ng
function setupAppNameLocalization() {
  appState.addListener('language', language => {
    log(`üåê App: Language changed to ${language}, updating app name`);
    updateAppName();
  });
}

// H√†m c·∫≠p nh·∫≠t About Panel v·ªõi h·ªó tr·ª£ ƒëa ng√¥n ng·ªØ
function setupAboutPanel() {
  // ƒê·ªçc file translation d·ª±a tr√™n ng√¥n ng·ªØ hi·ªán t·∫°i
  const currentLanguage = appState.language || 'vi';
  const isProd = "development" === 'production';

  // ƒê·ªçc file translation t·ª´ th∆∞ m·ª•c locales
  let translations = {};
  try {
    let translationPath;
    if (isProd) {
      // Trong m√¥i tr∆∞·ªùng production, ƒë∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c locales ƒë√£ gi·∫£i n√©n
      const appPath = app.getAppPath();
      const appDir = path.dirname(appPath);

      // Th·ª≠ t√¨m trong th∆∞ m·ª•c locales gi·∫£i n√©n ·ªü c√πng c·∫•p v·ªõi app.asar
      translationPath = path.join(appDir, 'locales', currentLanguage, 'common.json');

      // Tr√™n macOS c√≥ th·ªÉ c√≥ c·∫•u tr√∫c kh√°c
      if (process.platform === 'darwin' && !fs.existsSync(translationPath)) {
        // Th·ª≠ t√¨m trong Resources
        translationPath = path.join(process.resourcesPath, 'locales', currentLanguage, 'common.json');
      }
    } else {
      // M√¥i tr∆∞·ªùng development
      translationPath = path.join(app.getAppPath(), 'renderer', 'locales', currentLanguage, 'common.json');
    }
    log(`üîç About Panel: Trying to load translations from: ${translationPath}`);
    if (fs.existsSync(translationPath)) {
      const data = fs.readFileSync(translationPath, 'utf8');
      translations = JSON.parse(data);
      log(`‚úÖ About Panel: Loaded ${currentLanguage} translations successfully`);
    } else {
      log(`‚ùå About Panel: Translation file not found for ${currentLanguage} at ${translationPath}`);
      // Fallback to Vietnamese
      let fallbackPath;
      if (isProd) {
        // Trong m√¥i tr∆∞·ªùng production
        const appPath = app.getAppPath();
        const appDir = path.dirname(appPath);

        // Th·ª≠ t√¨m trong th∆∞ m·ª•c locales gi·∫£i n√©n
        fallbackPath = path.join(appDir, 'locales', 'vi', 'common.json');

        // Tr√™n macOS c√≥ th·ªÉ c√≥ c·∫•u tr√∫c kh√°c
        if (process.platform === 'darwin' && !fs.existsSync(fallbackPath)) {
          // Th·ª≠ t√¨m trong Resources
          fallbackPath = path.join(process.resourcesPath, 'locales', 'vi', 'common.json');
        }
      } else {
        // M√¥i tr∆∞·ªùng development
        fallbackPath = path.join(app.getAppPath(), 'renderer', 'locales', 'vi', 'common.json');
      }
      log(`üîç About Panel: Trying fallback at: ${fallbackPath}`);
      if (fs.existsSync(fallbackPath)) {
        const fallbackData = fs.readFileSync(fallbackPath, 'utf8');
        translations = JSON.parse(fallbackData);
        log(`‚úÖ About Panel: Loaded fallback (vi) translations`);
      } else {
        log(`‚ùå About Panel: Fallback translation file not found at ${fallbackPath}`);
      }
    }
  } catch (err) {
    log(`‚ùå About Panel: Error loading translations: ${err.message}`);
    // Continue with empty translations object
  }

  // Helper function ƒë·ªÉ l·∫•y translation string
  const t = (key, params = {}) => {
    try {
      // Ph√¢n t√°ch key
      const keyParts = key.split('.');
      let result = translations;

      // Duy·ªát qua c√°c ph·∫ßn c·ªßa key
      for (const part of keyParts) {
        if (result && result[part] !== undefined) {
          result = result[part];
        } else {
          return key; // Tr·∫£ v·ªÅ key g·ªëc n·∫øu kh√¥ng t√¨m th·∫•y d·ªãch
        }
      }

      // Thay th·∫ø c√°c tham s·ªë
      if (typeof result === 'string') {
        Object.keys(params).forEach(paramKey => {
          result = result.replace(`{${paramKey}}`, params[paramKey]);
        });
      }
      return result;
    } catch (err) {
      log(`‚ùå About Panel: Translation error for key ${key}: ${err.message}`);
      return key;
    }
  };

  // C·∫•u h√¨nh About panel v·ªõi th√¥ng tin ƒëa ng√¥n ng·ªØ
  app.setAboutPanelOptions({
    applicationName: t('app.name'),
    applicationVersion: app.getVersion(),
    version: app.getVersion(),
    copyright: t('settings.about.licenseText'),
    credits: t('settings.about.teamMembers'),
    iconPath: isProd ? path.join(process.resourcesPath, 'icon.png') : path.join(__dirname, '../resources/icon.png')
  });
}

// ƒêƒÉng k√Ω l·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi ng√¥n ng·ªØ
function setupAboutPanelLocalization() {
  appState.addListener('language', language => {
    log(`üåê About Panel: Language changed to ${language}, updating about panel`);
    setupAboutPanel();
  });
}

// Import storage adapter for SQLite storage
const StorageAdapter = __webpack_require__(/*! ../lib/storage-adapter */ "./lib/storage-adapter.js");

// Import all handlers
const accountHandlers = __webpack_require__(/*! ./handlers/accountHandlers */ "./main/handlers/accountHandlers.js");
const proxyHandlers = __webpack_require__(/*! ./handlers/proxyHandlers */ "./main/handlers/proxyHandlers.js");
const roomHandlers = __webpack_require__(/*! ./handlers/roomHandlers */ "./main/handlers/roomHandlers.js");
const bulkOperationHandlers = __webpack_require__(/*! ./handlers/bulkOperationHandlers */ "./main/handlers/bulkOperationHandlers.js");
const settingsHandlers = __webpack_require__(/*! ./handlers/settingsHandlers */ "./main/handlers/settingsHandlers.js");
const folderHandlers = __webpack_require__(/*! ./handlers/folderHandlers */ "./main/handlers/folderHandlers.js");
const utilityHandlers = __webpack_require__(/*! ./handlers/utilityHandlers */ "./main/handlers/utilityHandlers.js");
const taskHandlers = __webpack_require__(/*! ./handlers/taskHandlers */ "./main/handlers/taskHandlers.js");
const notificationHandlers = __webpack_require__(/*! ./handlers/notificationHandlers */ "./main/handlers/notificationHandlers.js");

// Initialize data managers
let storageManager, accountManager, proxyManager, configManager;

// Initialize managers asynchronously
async function initializeManagers() {
  try {
    // Kh·ªüi t·∫°o SQLite storage 
    storageManager = new StorageAdapter();
    await storageManager.init();
    log(`üóÑÔ∏è Storage initialized: ${storageManager.getStorageType().toUpperCase()}`);
    log('‚úÖ Using SQLite for better performance');

    // T·∫°o wrapper managers ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi IPC handlers
    accountManager = {
      async getAllAccounts() {
        return await storageManager.getAllAccounts();
      },
      async addAccount(account) {
        return await storageManager.addAccount(account);
      },
      async deleteAccount(accountId) {
        return await storageManager.deleteAccount(accountId);
      },
      async updateAccount(accountId, updates) {
        return await storageManager.updateAccount(accountId, updates);
      },
      async getAccountsByFolder(folderId) {
        return await storageManager.getAccountsByFolder(folderId);
      },
      async importFromText(text, folderId) {
        return await storageManager.importAccountsFromText(text, folderId);
      }
    };
    proxyManager = {
      async getAllProxies() {
        return await storageManager.getAllProxies();
      },
      async addProxy(proxy) {
        return await storageManager.addProxy(proxy);
      },
      async deleteProxy(proxyId) {
        return await storageManager.deleteProxy(proxyId);
      },
      async updateProxy(proxyId, updates) {
        return await storageManager.updateProxy(proxyId, updates);
      },
      async getProxiesByFolder(folderId) {
        return await storageManager.getProxiesByFolder(folderId);
      },
      async testProxy(proxyId) {
        return await storageManager.testProxy(proxyId);
      },
      async importFromText(text, folderId) {
        // S·ª≠a l·∫°i ƒë·ªÉ g·ªçi qua storageManager
        try {
          log(`üì• G·ªçi importProxiesFromText v·ªõi text d√†i ${text.length} v√† folder ${folderId}`);
          const result = await storageManager.importProxiesFromText(text, folderId);
          return result;
        } catch (err) {
          error('‚ùå L·ªói khi import proxies t·ª´ text:', err);
          return {
            success: false,
            error: err.message
          };
        }
      },
      async bulkMoveProxiesToFolder(proxyIds, folderId) {
        // S·ª≠a l·∫°i ƒë·ªÉ g·ªçi qua storageManager
        try {
          log(`üì¶ ƒêang g·ªçi bulkMoveProxiesToFolder v·ªõi ${proxyIds.length} proxies v√† folder ${folderId}`);

          // Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
          if (!proxyIds || !Array.isArray(proxyIds) || proxyIds.length === 0) {
            error('‚ùå L·ªói: proxyIds kh√¥ng h·ª£p l·ªá:', proxyIds);
            return {
              success: false,
              error: 'Danh s√°ch proxy kh√¥ng h·ª£p l·ªá ho·∫∑c r·ªóng'
            };
          }
          if (!folderId || typeof folderId !== 'string') {
            error('‚ùå L·ªói: folderId kh√¥ng h·ª£p l·ªá:', folderId);
            return {
              success: false,
              error: 'ID th∆∞ m·ª•c kh√¥ng h·ª£p l·ªá'
            };
          }

          // Ki·ªÉm tra xem ph∆∞∆°ng th·ª©c t·ªìn t·∫°i kh√¥ng
          if (typeof storageManager.bulkMoveProxiesToFolder !== 'function') {
            error('‚ùå L·ªói: Ph∆∞∆°ng th·ª©c bulkMoveProxiesToFolder kh√¥ng t·ªìn t·∫°i trong storageManager');
            log('C√°c ph∆∞∆°ng th·ª©c c√≥ s·∫µn:', Object.keys(storageManager));
            return {
              success: false,
              error: 'Ph∆∞∆°ng th·ª©c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng c·∫≠p nh·∫≠t phi√™n b·∫£n app.'
            };
          }
          log('üì¶ G·ªçi ph∆∞∆°ng th·ª©c storageManager.bulkMoveProxiesToFolder');
          const result = await storageManager.bulkMoveProxiesToFolder(proxyIds, folderId);
          log('üì¶ K·∫øt qu·∫£:', result);
          return result;
        } catch (err) {
          error('‚ùå L·ªói khi di chuy·ªÉn proxies:', err);
          return {
            success: false,
            error: `L·ªói khi di chuy·ªÉn proxies: ${err.message}`,
            stack: err.stack
          };
        }
      },
      async bulkTestProxies(proxyIds) {
        // S·ª≠a l·∫°i ƒë·ªÉ g·ªçi qua storageManager
        try {
          log(`üîç G·ªçi bulkTestProxies v·ªõi ${proxyIds.length} proxies`);
          const result = await storageManager.bulkTestProxies(proxyIds);
          return result;
        } catch (error) {
          log('‚ùå L·ªói khi test proxies:', error);
          return {
            success: false,
            error: error.message
          };
        }
      },
      async exportProxies(format, proxyIds) {
        // S·ª≠a l·∫°i ƒë·ªÉ g·ªçi qua storageManager
        try {
          log(`üì§ G·ªçi exportProxies v·ªõi format ${format}`);
          const result = await storageManager.exportProxies(format, proxyIds);
          return result;
        } catch (error) {
          log('‚ùå L·ªói khi export proxies:', error);
          return {
            success: false,
            error: error.message
          };
        }
      }
    };
    configManager = {
      async getSettings() {
        return await storageManager.getSettings();
      },
      async saveSettings(settings) {
        return await storageManager.saveSettings(settings);
      },
      async resetSettings() {
        return await storageManager.resetSettings();
      }
    };
    log('Storage-based managers initialized successfully');
  } catch (err) {
    error('Error initializing managers:', err);

    // Ultimate fallback
    accountManager = {
      getAllAccounts: async () => [],
      addAccount: async () => ({
        success: true
      }),
      deleteAccount: async () => ({
        success: true
      })
    };
    proxyManager = {
      getAllProxies: async () => [],
      addProxy: async () => ({
        success: true
      }),
      deleteProxy: async () => ({
        success: true
      }),
      testProxy: async () => ({
        success: true,
        latency: '50ms'
      })
    };
    configManager = {
      getSettings: async () => ({
        theme: 'dark',
        language: 'vi'
      }),
      saveSettings: async () => ({
        success: true
      }),
      resetSettings: async () => ({
        success: true
      })
    };
  }
}
if (isProd) {
  serve({
    directory: 'app',
    scheme: 'app',
    hostname: 'localhost'
  });
} else {
  app.setPath('userData', `${app.getPath('userData')} (development)`);
}

// C·∫≠p nh·∫≠t viewerManager ƒë·ªÉ qu·∫£n l√Ω ƒë√∫ng s·ªë l∆∞·ª£ng viewers
let viewerManager = {
  isRunning: false,
  viewers: [],
  accounts: [],
  roomStats: new Map(),
  // L∆∞u stats cho t·ª´ng room

  async start(config) {
    try {
      this.isRunning = true;
      this.accounts = config.accounts || [];

      // T·∫°o viewers cho t·ª´ng account
      this.viewers = this.accounts.map((account, index) => ({
        id: `viewer_${index}`,
        account: account,
        status: 'connecting',
        roomId: config.roomId
      }));

      // Simulate viewer connections
      setTimeout(() => {
        this.viewers.forEach(viewer => {
          viewer.status = 'connected';
        });

        // C·∫≠p nh·∫≠t room stats
        if (config.roomId) {
          this.roomStats.set(config.roomId, {
            currentViewers: this.viewers.filter(v => v.status === 'connected').length,
            status: 'running',
            accounts: this.accounts
          });
        }
        log(`TikTok viewer started successfully with ${this.viewers.length} viewers`);
      }, 2000);
      return {
        success: true,
        message: 'Viewer started successfully'
      };
    } catch (error) {
      log('Error starting viewer:', error);
      return {
        success: false,
        message: error.message
      };
    }
  },
  async stop() {
    try {
      this.isRunning = false;
      this.viewers = [];
      this.accounts = [];
      this.roomStats.clear();
      log('TikTok viewer stopped');
      return {
        success: true,
        message: 'Viewer stopped successfully'
      };
    } catch (error) {
      log('Error stopping viewer:', error);
      return {
        success: false,
        message: error.message
      };
    }
  },
  getStats() {
    const connectedViewers = this.viewers.filter(v => v.status === 'connected');
    return {
      activeViewers: connectedViewers.length,
      isRunning: this.isRunning,
      totalAccounts: this.accounts.length,
      viewers: this.viewers
    };
  },
  getRoomStats(roomId) {
    if (this.roomStats.has(roomId)) {
      return this.roomStats.get(roomId);
    }
    return {
      currentViewers: 0,
      status: 'stopped',
      accounts: []
    };
  },
  updateRoomStats(roomId, stats) {
    this.roomStats.set(roomId, stats);
  }
};

// Function to register all IPC handlers
function registerIPCHandlers() {
  // Get handler objects
  const accountHandlerObj = accountHandlers(accountManager, storageManager);
  const proxyHandlerObj = proxyHandlers(proxyManager, storageManager);
  const roomHandlerObj = roomHandlers(storageManager, viewerManager);
  const bulkOpHandlerObj = bulkOperationHandlers(storageManager);
  const settingsHandlerObj = settingsHandlers(configManager);
  const folderHandlerObj = folderHandlers(storageManager);
  const utilityHandlerObj = utilityHandlers(storageManager, viewerManager);
  const taskHandlerObj = taskHandlers(storageManager);
  const notificationHandlerObj = notificationHandlers();

  // Register all handlers
  const allHandlers = {
    ...accountHandlerObj,
    ...proxyHandlerObj,
    ...roomHandlerObj,
    ...bulkOpHandlerObj,
    ...settingsHandlerObj,
    ...folderHandlerObj,
    ...utilityHandlerObj,
    ...taskHandlerObj,
    ...notificationHandlerObj
  };

  // Register each handler with ipcMain
  Object.entries(allHandlers).forEach(([channel, handler]) => {
    ipcMain.handle(channel, handler);
  });
  log(`Registered ${Object.keys(allHandlers).length} IPC handlers`);
}
;
(async () => {
  await app.whenReady();

  // Initialize managers
  await initializeManagers();

  // Register all IPC handlers
  registerIPCHandlers();

  // C·∫≠p nh·∫≠t t√™n ·ª©ng d·ª•ng theo ng√¥n ng·ªØ
  updateAppName();
  setupAppNameLocalization();

  // C√†i ƒë·∫∑t About panel
  setupAboutPanel();
  setupAboutPanelLocalization();

  // Create and set up menu with localization support
  createMenu();
  setupMenuLocalization();
  const {
    width: screenWidth,
    height: screenHeight
  } = screen.getPrimaryDisplay().workAreaSize;
  const mainWindow = createWindow('main', {
    width: Math.floor(screenWidth * 0.9),
    // 90% chi·ªÅu r·ªông m√†n h√¨nh
    height: Math.floor(screenHeight * 0.9),
    // 90% chi·ªÅu cao m√†n h√¨nh
    center: true,
    minWidth: 900,
    minHeight: 600,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      nodeIntegration: false,
      contextIsolation: true,
      webSecurity: false,
      allowRunningInsecureContent: true
    },
    icon: path.join(__dirname, '../public/icons/app-icon.png'),
    title: 'TTL - TikTok Live Viewer'
  });
  if (isProd) {
    await mainWindow.loadURL('app://./home');
  } else {
    const port = process.argv[2];
    await mainWindow.loadURL(`http://localhost:${port}/home`);
    mainWindow.webContents.openDevTools();
  }
})();
app.on('window-all-closed', () => {
  app.quit();
});

/***/ }),

/***/ "./main/businesses/Viewer.js":
/*!***********************************!*\
  !*** ./main/businesses/Viewer.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// const { exec } = require('child_process');
// const { promisify } = require('util');
// const fs = require('fs');
const path = __webpack_require__(/*! path */ "path");
const {
  delay,
  getString,
  getTime,
  getRandomInt,
  genheaderenter
} = __webpack_require__(/*! ./helper */ "./main/businesses/helper.js");
const axios = __webpack_require__(/*! axios */ "axios");
const https = __webpack_require__(/*! https */ "https");
const tunnel = __webpack_require__(/*! tunnel */ "tunnel"); // Th√™m module tunnel
const querystring = __webpack_require__(/*! querystring */ "querystring");
const os = __webpack_require__(/*! os */ "os");
const request = __webpack_require__(/*! request */ "request"); // Th√™m module request ƒë·ªÉ l·∫•y signature
const {
  log,
  error
} = __webpack_require__(/*! ../../lib/logger */ "./lib/logger.js");

// T·∫°o m·ªôt instance c·ªßa axios v·ªõi c√°c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh
const axiosInstance = axios.create({
  timeout: 30000,
  httpsAgent: new https.Agent({
    keepAlive: false,
    rejectUnauthorized: false
  })
});

// X√°c ƒë·ªãnh OS v√† browser platform
let os_type = os.type();
let browser_platform = "";
let os_ver = "";
os_type = "Linux";
switch (os_type) {
  case "Linux":
    {
      os_ver = "X11; Ubuntu; Linux x86_64";
      browser_platform = encodeURIComponent("Linux x86_64");
      break;
    }
  case "Windows_NT":
    {
      os_ver = "Windows NT 10.0; Win64; x64";
      browser_platform = "Win32";
      break;
    }
  case "Darwin":
    {
      os_ver = "Macintosh; Intel Mac OS X 10_15_7";
      browser_platform = "MacIntel";
      break;
    }
  default:
    {
      os_ver = "X11; Ubuntu; Linux x86_64";
      browser_platform = encodeURIComponent("Linux x86_64");
    }
}
let userAgentDefault = `Mozilla/5.0 (${os_ver}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36`;
// userAgentDefault = `Mozilla/5.0 (X11; Ubuntu; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36`

const appVersionDefault = userAgentDefault.replace("Mozilla/", "");
log("userAgentDefault", userAgentDefault);
log("browser_platform", browser_platform);

// D·ªØ li·ªáu chung
const data = {};
let data_local = {};
let list_403_total = [];
let list_die_total = [];
let is_running = true;
let intervalcheck;

// Class duy nh·∫•t cho c·∫£ viewer v√† logic clone
class GroupView {
  constructor({
    cookie_string,
    task_id,
    room_id,
    proxy,
    proxy_list,
    server_site
  } = {}) {
    if (cookie_string) {
      this.task_id = task_id;
      this.cookie_string = cookie_string;
      this.username = getString(cookie_string, 'username=', ';');
      this.session_id = getString(cookie_string, 'sessionid=', ';');
      this.room_id = room_id;
      this.proxy = proxy;
      this.proxy_list = proxy_list;
      this.failTime = 0;
      this.status = "running";
      this.browser_platform = browser_platform;
      let random_de = getRandomInt(187248723442, 934782374123);
      this.device_id = "7284943" + random_de;
      this.device_id = getString(cookie_string, ';wid=', ';');
      this.is_first = true;
      this.status_viewer = -1; // 3 - no login, 1 viewed, 2 - error, 4 - 403
      this.endpoint = "";
      this.imfetch_time = 0;
      this.delay_all_time = 5000;
      this.delay_10_time = 45000;
      this.delay = this.delay_all_time;
      this.url = "";
      this.is_10_time = true;
      this.server_site = server_site || "tt2";
    }
  }

  // =========== PH∆Ø∆†NG TH·ª®C QU·∫¢N L√ù TR·∫†NG TH√ÅI CLONE ===========
  async run() {
    this.status = "running";
    // console.log("run",this.username)
    // return true;
    let is_join = await this.runJoin();
    if (is_join) {
      this.status = "running";
      this.runFetchs();
      return true;
    } else {
      this.status = "end";
      return false;
    }
  }
  async cancel() {
    this.status = "end";
  }
  async pause() {
    this.status = "pause";
  }
  async resume() {
    this.status = "running";
  }
  sign(options) {
    let {
      url,
      bodyEncoded,
      msToken,
      bodyJson
    } = options;
    const SERVER_URL = 'http://sign.amazingcpanel.com';
    return new Promise((resolve, reject) => {
      // Chu·∫©n b·ªã d·ªØ li·ªáu request
      const requestData = {
        url: url,
        bodyEncoded: bodyEncoded,
        msToken: msToken,
        bodyJson
      };

      // G·ª≠i request ƒë·ªÉ l·∫•y signature
      request({
        method: 'POST',
        url: `${SERVER_URL}/api/xbogus`,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData)
      }, (error, response, body) => {
        if (error) {
          error("L·ªói khi l·∫•y signature:", error);
          reject(error);
          return;
        }
        try {
          const data = JSON.parse(body);
          resolve(data);
        } catch (err) {
          error("L·ªói khi parse response:", err);
          reject(err);
        }
      });
    });
  }
  async runJoin() {
    // B·ªè ƒëo·∫°n test proxy
    // while(true){
    //     let options = {
    //         url: "https://jsonip.com/",
    //         method: 'GET',
    //         headers: {
    //             "User-Agent": userAgentDefault,
    //             "Accept": "application/json, text/plain, */*",
    //             "Accept-Language": "en-US,en;q=0.9",
    //         },
    //         responseType: 'json',
    //         isRetry: true,
    //         retryTime: 2
    //     };

    //     let data_ip = await this.makeRequest(options);
    //     await delay(this.delay_all_time);
    // }
    // console.log("data ip:", data_ip.bodyJson || data_ip.body);

    // await delay(10000000);
    // return false;
    // process.exit(1)
    // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c n·ªôi b·ªô thay v√¨ g·ªçi t·ª´ helper
    let cookie_status = await this.checkCookieLive();

    // if(!cookie_status.status || !cookie_status.live) {
    if (cookie_status.status && !cookie_status.live) {
      log(getTime(), this.username, `Cookie die`);
      this.status_viewer = 3;
      return false;
    }

    // L∆∞u th√¥ng tin user n·∫øu c√≥
    if (cookie_status.userId) {
      this.userId = cookie_status.userId;
      this.secUid = cookie_status.secUid;
    }
    let res1 = await this.callApi({
      type: "enter"
    });
    let is_good = false;
    if (res1 && res1.body && res1.body.includes('user_side_title')) {
      is_good = true;
    }
    if ([-1, 1].includes(this.status_viewer) && is_good) {
      return true;
    } else {
      log(getTime(), this.username, "enter", this.status_viewer, is_good);
      return false;
    }
  }

  // Th√™m ph∆∞∆°ng th·ª©c checkCookieLive n·ªôi b·ªô
  async checkCookieLive({
    username,
    cookie_string,
    proxy,
    proxy_list
  } = {}) {
    // Use instance variables instead of parameters
    username = username || this.username;
    cookie_string = cookie_string || this.cookie_string;
    proxy = proxy || this.proxy;
    proxy_list = proxy_list || this.proxy_list;

    // L∆∞u protocol c·ªßa request hi·ªán t·∫°i
    this.lastRequestProtocol = 'https:';

    // S·ª≠ d·ª•ng makeRequest ƒë·ªÉ t·∫≠n d·ª•ng c√°c c·∫•u h√¨nh proxy ƒë√£ c√≥
    var options = {
      url: `https://www.tiktok.com/passport/web/account/info/?aid=1459&app_language=en&app_name=tiktok_web&browser_platform=MacIntel&device_platform=web_pc&region=VN&tz_name=Asia%2FSaigon&webcast_language=en`,
      method: 'GET',
      headers: {
        "User-Agent": userAgentDefault,
        "cookie": cookie_string,
        "Accept": "application/json, text/plain, */*",
        "Accept-Language": "en-US,en;q=0.9",
        "Connection": "keep-alive",
        "Referer": "https://www.tiktok.com/live",
        "sec-ch-ua": '"Google Chrome";v="131", "Chromium";v="131", "Not?A_Brand";v="24"',
        "sec-ch-ua-mobile": "?0",
        "sec-ch-ua-platform": '"macOS"'
      },
      responseType: 'json',
      timeout: 15000,
      isRetry: true,
      retryTime: 2
    };
    try {
      // S·ª≠ d·ª•ng makeRequest thay v√¨ axios tr·ª±c ti·∫øp
      const response = await this.makeRequest(options);

      // Ph√¢n t√≠ch k·∫øt qu·∫£
      if (response.bodyJson && response.bodyJson.data && response.bodyJson.data.user_id) {
        return {
          status: true,
          live: true,
          username: response.bodyJson.data.username,
          userId: response.bodyJson.data.user_id,
          secUid: response.bodyJson.data.sec_user_id
        };
      } else if (response.body.includes("session_expired")) {
        return {
          status: true,
          live: false
        };
      } else {
        // 
        return {
          status: false,
          live: true
        };
      }
    } catch (error) {
      log(`Check cookie error for ${username}:`, error.message);
      return {
        status: false,
        live: true,
        error: error.message
      };
    }
  }
  async runFetchs() {
    let is_run = true;
    this.setCursor = true;
    while (is_run) {
      if (this.status == "running") {
        let r_enter = await this.fetch();
        if (r_enter.is_403) {
          is_run = false;
          this.status_viewer = 4;
        }
        await delay(this.delay);
        this.imfetch_time++;
      } else if (this.status == "pause") {
        await delay(1000);
      } else if (this.status == "resume") {
        this.status = "running";
        await delay(1000);
      } else if (this.status == "end") {
        is_run = false;
      }
    }
  }

  // =========== PH∆Ø∆†NG TH·ª®C X·ª¨ L√ù API ===========
  async callApi({
    type
  }) {
    let {
      cookie_string,
      room_id,
      msToken: cmsToken,
      session_id: csession_id,
      timeout,
      device_id
    } = this;
    timeout = timeout || 30000;
    var msToken = cmsToken || getString(cookie_string + ';', 'msToken=', ';');
    let session_id = csession_id || getString(cookie_string.replace(/ /g, '') + ';', 'sessionid=', ';');
    this.tt_csrf_token = getString(cookie_string.replace(/ /g, '') + ';', 'tt_csrf_token=', ';');
    this.s_v_web_id = getString(cookie_string.replace(/ /g, '') + ';', 's_v_web_id=', ';');
    this.session_id = session_id;
    let device_type = "web_h265";
    // let screen_height = 982;
    // let screen_width = 1512;
    let screen_height = 1107;
    let screen_width = 1710;
    try {
      if (session_id == "") {
        throw new Error("Cookie no session id");
      }
      let url = "";
      let verifyFp = getString(cookie_string.replace(/ /g, '') + ';', 's_v_web_id=', ';');
      let _bodyJson = null;
      switch (type) {
        case "leave":
          url = `https://webcast.tiktok.com/webcast/room/leave/?aid=1988&app_language=en&app_name=tiktok_web&browser_language=en-US&browser_name=Mozilla&browser_online=true&browser_platform=MacIntel&browser_version=${this.encodeRFC3986URIComponent(appVersionDefault)}&channel=tiktok_web&cookie_enabled=true&device_id=${device_id}&device_platform=web_pc&device_type=web_h264&focus_state=true&from_page=user&history_len=4&is_fullscreen=false&is_page_visible=true&os=mac&priority_region=&referer=&region=VN&screen_height=900&screen_width=1440&tz_name=Asia%2FSaigon&webcast_language=en&msToken=${msToken}`;
          _bodyJson = {
            reason: 0,
            room_id: room_id
          };
          break;
        case "enter":
          url = `https://webcast.tiktok.com/webcast/room/enter/?aid=1988&app_language=vi-VN&app_name=tiktok_web&browser_language=vi&browser_name=Mozilla&browser_online=true&browser_platform=${browser_platform}&browser_version=${this.encodeRFC3986URIComponent(appVersionDefault)}&channel=tiktok_web&cookie_enabled=true&data_collection_enabled=true&device_id=${device_id}&device_platform=web_pc&device_type=${device_type}&focus_state=true&from_page=&history_len=0&is_fullscreen=false&is_page_visible=true&os=mac&priority_region=&referer=&region=VN&screen_height=${screen_height}&screen_width=${screen_width}&tz_name=Asia%2FBangkok&user_is_login=true&verifyFp=${verifyFp}&webcast_language=vi-VN`;
          _bodyJson = {
            enter_source: "others-others",
            room_id: room_id
          };
          break;
        case "name":
          url = `https://www.tiktok.com/api/update/profile/?WebIdLastTime=&aid=1988&app_language=vi-VN&app_name=tiktok_web&browser_language=vi&browser_name=Mozilla&browser_online=true&browser_platform=MacIntel&browser_version=${this.encodeRFC3986URIComponent(appVersionDefault)}&channel=tiktok_web&cookie_enabled=true&data_collection_enabled=true&device_id=${device_id}&device_platform=web_pc&focus_state=true&from_page=user&history_len=3&is_fullscreen=false&is_page_visible=true&odinId=${this.userId}&os=mac&priority_region=&referer=&region=VN&screen_height=982&screen_width=1512&tz_name=Asia%2FSaigon&user_is_login=true&verifyFp=${this.s_v_web_id}&webcast_language=vi-VN&msToken=${msToken}`;
          _bodyJson = {
            'nickname': this.name,
            'tt_csrf_token': this.tt_csrf_token
          };
          break;
      }
      let bodyEncoded = querystring.stringify(_bodyJson);
      let {
        targetUrl
      } = await this.sign({
        url,
        bodyEncoded: bodyEncoded,
        msToken
      });
      let is_retry = false;
      if (is_retry) {
        await delay(500);
        return await this.callApi({
          type
        });
      }
      let target_url = targetUrl;
      let s_sdk_crypt_sdk = getString(cookie_string, 'crypt_sdk_b64=', ';');
      let s_sdk_sign_data_key = getString(cookie_string, 'sign_data_key_b64=', ';');
      let data_gen = genheaderenter({
        s_sdk_crypt_sdk,
        s_sdk_sign_data_key,
        path: '/webcast/room/enter/'
      });
      if (!data_gen || !data_gen["tt-ticket-guard-client-data"] || !data_gen["tt-ticket-guard-public-key"]) {
        throw new Error("No data gen");
      }
      var options = {
        url: target_url,
        method: 'POST',
        headers: {
          'Accept': '*/*',
          'Accept-Language': 'en-US,en;q=0.9',
          'Connection': 'keep-alive',
          'Cookie': cookie_string,
          'Origin': 'https://www.tiktok.com',
          'Referer': 'https://www.tiktok.com',
          'Sec-Fetch-Dest': 'empty',
          'Sec-Fetch-Mode': 'cors',
          'Sec-Fetch-Site': 'same-origin',
          'User-Agent': userAgentDefault,
          'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
          'sec-ch-ua': '"Google Chrome";v="131", "Chromium";v="131", "Not?A_Brand";v="24"',
          'sec-ch-ua-mobile': '?0',
          'sec-ch-ua-platform': '"macOS"',
          'x-secsdk-csrf-token': 'DOWNGRADE',
          'tt-ticket-guard-client-data': data_gen["tt-ticket-guard-client-data"],
          'tt-ticket-guard-iteration-version': 0,
          'tt-ticket-guard-public-key': data_gen["tt-ticket-guard-public-key"],
          'tt-ticket-guard-version': 2,
          'tt-ticket-guard-web-version': 1
        },
        data: bodyEncoded,
        timeout: timeout,
        responseType: 'arraybuffer'
      };
      let data_page = await this.makeRequest(options);
      if (data_page.status == 403) {
        throw new Error("Request failed with status code 403");
      }
      if (data_page.error && data_page.error != "Request timeout") {
        log(data_page.error);
      }
      if (data_page.body) {
        let code = data_page.bodyJson.status_code;
        let message = (data_page.bodyJson || {}).data && (data_page.bodyJson || {}).data.message;
        let result = {
          is_403: false,
          is_dead: message === "User doesn't login" || code === 20003 ? true : false,
          body: data_page.body
        };
        return result;
      }
      let result = {
        is_403: false,
        data: data_page.body,
        body: data_page.body
      };
      return result;
    } catch (error) {
      log("error call api", this.session_id, error.message);
      let result = {
        is_403: error.message.includes("status code 403") ? true : false,
        error: error.message
      };
      return result;
    }
  }

  // C·∫•u h√¨nh proxy cho Axios v·ªõi tunnel agents
  configureProxy(proxy) {
    if (!proxy) return undefined;
    try {
      // Parse proxy string n·∫øu c·∫ßn
      let parsedProxy = this.parseProxyString(proxy);
      if (!parsedProxy || !parsedProxy.host || !parsedProxy.port) {
        log("Invalid proxy format:", proxy);
        return undefined;
      }
      const {
        protocol,
        host,
        port,
        username,
        password
      } = parsedProxy;
      const auth = username && password ? `${username}:${password}` : '';

      // Tr·∫£ v·ªÅ c·∫•u h√¨nh proxy ph√π h·ª£p v·ªõi axios
      return {
        host,
        port: parseInt(port),
        protocol: `${protocol || "http"}:`,
        auth: auth ? {
          username: username,
          password: password
        } : undefined
      };
    } catch (error) {
      log("Error configuring proxy:", error.message);
      return undefined;
    }
  }

  // Parse proxy string helper
  parseProxyString(proxyStr) {
    if (!proxyStr) return null;

    // N·∫øu ƒë√£ l√† object proxy, tr·∫£ v·ªÅ lu√¥n
    if (typeof proxyStr === 'object' && proxyStr.host) {
      return proxyStr;
    }
    try {
      // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p proxy ƒë√£ l√† URL ho√†n ch·ªânh
      if (proxyStr.includes("https://") || proxyStr.includes("http://")) {
        const proxyUrl = new URL(proxyStr);
        return {
          protocol: proxyUrl.protocol.replace(':', ''),
          host: proxyUrl.hostname,
          port: proxyUrl.port,
          username: proxyUrl.username,
          password: proxyUrl.password
        };
      }

      // X·ª≠ l√Ω ƒë·ªãnh d·∫°ng host:port ho·∫∑c host:port:user:pass
      const parts = proxyStr.split(':');
      if (parts.length >= 2) {
        return {
          host: parts[0],
          port: parts[1],
          username: parts.length > 2 ? parts[2] : undefined,
          password: parts.length > 3 ? parts[3] : undefined,
          protocol: 'http'
        };
      }
      return null;
    } catch (error) {
      log("Error parsing proxy string:", error.message);
      return null;
    }
  }

  // T·∫°o tunnel agent d·ª±a v√†o protocol (http/https)
  createTunnelAgent(proxy, isHttps = true) {
    if (!proxy) return undefined;
    try {
      // Parse proxy string
      let parsedProxy = this.parseProxyString(proxy);
      if (!parsedProxy) {
        log("Invalid proxy format:", proxy);
        return undefined;
      }
      const {
        host,
        port,
        username,
        password
      } = parsedProxy;

      // C·∫•u h√¨nh tunnel options
      const tunnelOptions = {
        proxy: {
          host: host,
          port: parseInt(port),
          proxyAuth: username && password ? `${username}:${password}` : undefined
        },
        rejectUnauthorized: false // B·ªè qua l·ªói ch·ª©ng ch·ªâ SSL
      };
      tunnelOptions.keepAlive = false;

      // Tr·∫£ v·ªÅ tunnel agent ph√π h·ª£p
      if (isHttps) {
        return tunnel.httpsOverHttp(tunnelOptions);
      } else {
        return tunnel.httpOverHttp(tunnelOptions);
      }
    } catch (error) {
      log("Error creating tunnel agent:", error.message);
      return undefined;
    }
  }
  safeDestroyAgent(agent) {
    try {
      agent?.destroy?.();
    } catch (e) {
      log('Destroy agent error:', e.message);
    }
  }
  async makeRequest(options) {
    let that = this;
    let {
      url,
      headers,
      method,
      proxy,
      retryCount,
      data,
      timeout,
      retryTime,
      proxy_list,
      form,
      preCheckRetry,
      name,
      retryAfter,
      httpsAgent,
      httpAgent
    } = options;
    if ((url.includes('webcast.tiktok.com/webcast/im/fetch/') || url.includes('webcast.tiktok.com/webcast/room/enter/') || url.includes('webcast.tiktok.com/webcast/room/leave/')) && !url.includes("X-Gnarly")) {
      return {
        error: "None sign" + that.proxy,
        body: "",
        headers: {},
        status: null
      };
    }
    method = method || "get";
    retryTime = retryTime || 2;
    retryAfter = retryAfter || 10000;
    let isGetBody = true;
    if (options.hasOwnProperty("isGetBody")) {
      isGetBody = options.isGetBody;
    }
    let isRetry = true;
    if (options.hasOwnProperty("isRetry")) {
      isRetry = options.isRetry;
    }
    let retry = retryCount || 0;
    try {
      // X√°c ƒë·ªãnh protocol c·ªßa URL hi·ªán t·∫°i (http ho·∫∑c https)
      const isHttps = url.startsWith("https");
      this.lastRequestProtocol = isHttps ? "https:" : "http:";

      // Quy·∫øt ƒë·ªãnh s·ª≠ d·ª•ng proxy d·ª±a tr√™n logic m·ªõi
      // Ch·ªâ khi proxy l√† false r√µ r√†ng th√¨ m·ªõi kh√¥ng s·ª≠ d·ª•ng proxy
      // M·∫∑c ƒë·ªãnh s·∫Ω s·ª≠ d·ª•ng this.proxy n·∫øu kh√¥ng c√≥ proxy ƒë∆∞·ª£c truy·ªÅn v√†o
      let proxyToUse = proxy;
      if (proxy !== false) {
        proxyToUse = proxy || this.proxy;
      }

      // T·∫°o custom agent d·ª±a tr√™n protocol n·∫øu proxy t·ªìn t·∫°i
      let customHttpsAgent = httpsAgent;
      let customHttpAgent = httpAgent;
      if (proxyToUse && !customHttpsAgent && !customHttpAgent) {
        if (isHttps) {
          customHttpsAgent = this.createTunnelAgent(proxyToUse, true);
        } else {
          customHttpAgent = this.createTunnelAgent(proxyToUse, false);
        }
      }
      const axiosOptions = {
        url,
        method: method.toUpperCase(),
        headers,
        timeout: timeout || 30000,
        responseType: options.responseType || "arraybuffer"
      };

      // ∆Øu ti√™n s·ª≠ d·ª•ng agent ƒë√£ ƒë∆∞·ª£c t·∫°o tr∆∞·ªõc
      if (isHttps) {
        axiosOptions.httpsAgent = customHttpsAgent;
      } else {
        axiosOptions.httpAgent = customHttpAgent;
      }

      // Kh√¥ng s·ª≠ d·ª•ng proxy config n·∫øu ƒë√£ c√≥ agent ho·∫∑c proxy l√† false
      if (!customHttpsAgent && !customHttpAgent && proxyToUse) {
        // Ch·ªâ s·ª≠ d·ª•ng proxy config khi kh√¥ng c√≥ agent
        axiosOptions.proxy = this.configureProxy(proxyToUse);
      }
      if (data) axiosOptions.data = data;

      // S·ª≠ d·ª•ng Promise.race ƒë·ªÉ handle timeout t√πy ch·ªânh
      const requestPromise = axios(axiosOptions);
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => {
          reject(new Error("Request timeout " + proxyToUse));
        }, timeout || 30000);
      });
      const response = await Promise.race([requestPromise, timeoutPromise]);

      // X·ª≠ l√Ω response
      let responseBody = "";
      let bodyBinary = null;
      if (response.data) {
        bodyBinary = response.data;
        if (Buffer.isBuffer(response.data)) {
          responseBody = response.data.toString("utf8");
        } else if (typeof response.data === "object") {
          responseBody = JSON.stringify(response.data);
        } else {
          responseBody = String(response.data);
        }
      }

      // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t status_viewer d·ª±a tr√™n response
      if (!responseBody) {
        that.status_viewer = 6;
      }
      if (response.status === 403) {
        that.status_viewer = 4;
      } else if (url.includes("webcast/room/enter")) {
        if (responseBody && responseBody.includes('"status_code":20003')) {
          that.status_viewer = 3; // logout
        } else if (responseBody && responseBody.includes('"status_code":4003182')) {
          that.status_viewer = 2;
        } else if (responseBody && responseBody.includes("AnchorABMap")) {
          that.status_viewer = 1; // good
        } else if (responseBody && responseBody.includes('"status_code":30003')) {
          that.status_viewer = 5; // finish
        }
      }

      // Chu·∫©n b·ªã k·∫øt qu·∫£ tr·∫£ v·ªÅ
      const head = {
        error: null,
        body: responseBody,
        bodyBinary: bodyBinary,
        headers: response.headers,
        status: response.status
      };

      // Ki·ªÉm tra n·∫øu c·∫ßn retry theo preCheckRetry
      let isRetryPreCheck = false;
      if (typeof preCheckRetry === "function") {
        try {
          isRetryPreCheck = await preCheckRetry(head.body || "", head);
        } catch (e) {
          log("err pre", e);
        }
      }

      // Parse JSON body n·∫øu c√≥ th·ªÉ
      let bodyJson = {};
      try {
        bodyJson = JSON.parse(head.body);
      } catch (e) {}
      head.bodyJson = bodyJson;

      // X·ª≠ l√Ω retry n·∫øu c·∫ßn
      if (isRetryPreCheck ||