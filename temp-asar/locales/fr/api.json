gICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgc2V0RmllbGRzID0gW107XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModXBkYXRlcykpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnZW5hYmxlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0RmllbGRzLnB1c2goYCR7a2V5fSA9ID9gKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUgPyAxIDogMCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdsYXN0UnVuJyB8fCBrZXkgPT09ICduZXh0UnVuJykge1xuICAgICAgICAgICAgICAgICAgICBzZXRGaWVsZHMucHVzaChgJHtrZXl9ID0gP2ApO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSA/IHZhbHVlIDogbnVsbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0RmllbGRzLnB1c2goYCR7a2V5fSA9ID9gKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHNldEZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNldEZpZWxkcy5wdXNoKCd1cGRhdGVkQXQgPSA/Jyk7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaChub3cpO1xuICAgICAgICAgICAgdmFsdWVzLnB1c2godGFza0lkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgc3FsID0gYFVQREFURSB0YXNrcyBTRVQgJHtzZXRGaWVsZHMuam9pbignLCAnKX0gV0hFUkUgaWQgPSA/YDtcbiAgICAgICAgICAgIGNvbnN0IHN0bXQgPSB0aGlzLmRiLnByZXBhcmUoc3FsKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gc3RtdC5ydW4oLi4udmFsdWVzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHJlc3VsdC5jaGFuZ2VzID4gMCkge1xuICAgICAgICAgICAgICAgIGxvZyhg4pyFIFVwZGF0ZWQgdGFzayAke3Rhc2tJZH1gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ1Rhc2sgbm90IGZvdW5kJyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIHRhc2s6JywgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgdGFza1xuICAgICAqL1xuICAgIGFzeW5jIGRlbGV0ZVRhc2sodGFza0lkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBzdG10ID0gdGhpcy5kYi5wcmVwYXJlKGBERUxFVEUgRlJPTSB0YXNrcyBXSEVSRSBpZCA9ID9gKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHN0bXQucnVuKHRhc2tJZCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChyZXN1bHQuY2hhbmdlcyA+IDApIHtcbiAgICAgICAgICAgICAgICBsb2coYOKchSBEZWxldGVkIHRhc2sgJHt0YXNrSWR9YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdUYXNrIG5vdCBmb3VuZCcgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBlcnJvcignRXJyb3IgZGVsZXRpbmcgdGFzazonLCBlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnIubWVzc2FnZSB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRhc2sgYnkgSURcbiAgICAgKi9cbiAgICBhc3luYyBnZXRUYXNrQnlJZCh0YXNrSWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHN0bXQgPSB0aGlzLmRiLnByZXBhcmUoYFNFTEVDVCAqIEZST00gdGFza3MgV0hFUkUgaWQgPSA/YCk7XG4gICAgICAgICAgICBjb25zdCB0YXNrID0gc3RtdC5nZXQodGFza0lkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi50YXNrLFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBCb29sZWFuKHRhc2suZW5hYmxlZCksXG4gICAgICAgICAgICAgICAgICAgIGxhc3RSdW46IHRhc2subGFzdFJ1bixcbiAgICAgICAgICAgICAgICAgICAgbmV4dFJ1bjogdGFzay5uZXh0UnVuLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVkQXQ6IHRhc2suY3JlYXRlZEF0LFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkQXQ6IHRhc2sudXBkYXRlZEF0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZXJyb3IoJ0Vycm9yIGdldHRpbmcgdGFzayBieSBJRDonLCBlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGFza3MgYnkgc3RhdHVzXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VGFza3NCeVN0YXR1cyhzdGF0dXMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHN0bXQgPSB0aGlzLmRiLnByZXBhcmUoYFxuICAgICAgICAgICAgICAgIFNFTEVDVCAqIEZST00gdGFza3MgXG4gICAgICAgICAgICAgICAgV0hFUkUgc3RhdHVzID0gPyBcbiAgICAgICAgICAgICAgICBPUkRFUiBCWSBjcmVhdGVkQXQgREVTQ1xuICAgICAgICAgICAgYCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHRhc2tzID0gc3RtdC5hbGwoc3RhdHVzKS5tYXAodGFzayA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLnRhc2ssXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogQm9vbGVhbih0YXNrLmVuYWJsZWQpLFxuICAgICAgICAgICAgICAgIGxhc3RSdW46IHRhc2subGFzdFJ1bixcbiAgICAgICAgICAgICAgICBuZXh0UnVuOiB0YXNrLm5leHRSdW4sXG4gICAgICAgICAgICAgICAgY3JlYXRlZEF0OiB0YXNrLmNyZWF0ZWRBdCxcbiAgICAgICAgICAgICAgICB1cGRhdGVkQXQ6IHRhc2sudXBkYXRlZEF0XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlcmlhbGl6ZUZvcklQQyh0YXNrcyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge