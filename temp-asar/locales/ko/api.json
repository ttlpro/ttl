jb25zdCBwcm94eSBvZiBwcm94aWVzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxpbmUgPSAnJztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdpcF9wb3J0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSBgJHtwcm94eS5ob3N0fToke3Byb3h5LnBvcnR9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdpcF9wb3J0X3VzZXJuYW1lJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSBgJHtwcm94eS5ob3N0fToke3Byb3h5LnBvcnR9OiR7cHJveHkudXNlcm5hbWUgfHwgJyd9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd1c2VybmFtZV9wYXNzd29yZF9pcF9wb3J0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm94eS51c2VybmFtZSAmJiBwcm94eS5wYXNzd29yZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSBgJHtwcm94eS51c2VybmFtZX06JHtwcm94eS5wYXNzd29yZH1AJHtwcm94eS5ob3N0fToke3Byb3h5LnBvcnR9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZSA9IGAke3Byb3h5Lmhvc3R9OiR7cHJveHkucG9ydH1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2h0dHBfZm9ybWF0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm94eS51c2VybmFtZSAmJiBwcm94eS5wYXNzd29yZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSBgaHR0cDovLyR7cHJveHkudXNlcm5hbWV9OiR7cHJveHkucGFzc3dvcmR9QCR7cHJveHkuaG9zdH06JHtwcm94eS5wb3J0fWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSBgaHR0cDovLyR7cHJveHkuaG9zdH06JHtwcm94eS5wb3J0fWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogLy8gaXBfcG9ydF91c2VybmFtZV9wYXNzd29yZFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZSA9IGAke3Byb3h5Lmhvc3R9OiR7cHJveHkucG9ydH06JHtwcm94eS51c2VybmFtZSB8fCAnJ306JHtwcm94eS5wYXNzd29yZCB8fCAnJ31gO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGV4cG9ydERhdGEgKz0gbGluZSArICdcXG4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsb2coYOKchSDEkMOjIHh14bqldCAke3Byb3hpZXMubGVuZ3RofSBwcm94eSB24bubaSDEkeG7i25oIGThuqFuZyAke2Zvcm1hdH1gKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRhdGE6IGV4cG9ydERhdGEsXG4gICAgICAgICAgICAgICAgY291bnQ6IHByb3hpZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGZvcm1hdDogZm9ybWF0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgZXJyb3IoJ0Vycm9yIGV4cG9ydGluZyBwcm94aWVzOicsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFByb3h5U3RvcmFnZTsgIiwiY29uc3QgQmFzZVN0b3JhZ2UgPSByZXF1aXJlKCcuL2Jhc2Utc3RvcmFnZScpO1xuY29uc3QgeyBsb2csIGVycm9yIH0gPSByZXF1aXJlKCcuLi9sb2dnZXInKTtcblxuY2xhc3MgUm9vbVN0b3JhZ2UgZXh0ZW5kcyBCYXNlU3RvcmFnZSB7XG4gICAgLyoqXG4gICAgICogTOG6pXkgdOG6pXQgY+G6oyByb29tc1xuICAgICAqL1xuICAgIGFzeW5jIGdldEFsbFJvb21zKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbG9nKCfwn5SEIEfhu41pIGdldEFsbFJvb21zJyk7XG4gICAgICAgICAgICBjb25zdCBzdG10ID0gdGhpcy5kYi5wcmVwYXJlKGBcbiAgICAgICAgICAgICAgICBTRUxFQ1QgKiBGUk9NIHJvb21zIFxuICAgICAgICAgICAgICAgIE9SREVSIEJZIGxhc3RWaWV3ZWQgREVTQywgY3JlYXRlZEF0IERFU0NcbiAgICAgICAgICAgIGApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCByb29tcyA9IHN0bXQuYWxsKCk7XG4gICAgICAgICAgICBsb2coYPCfk4ogxJDhu41jIMSRxrDhu6NjICR7cm9vbXMubGVuZ3RofSBwaMOybmcgdOG7qyBkYXRhYmFzZWApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBY4butIGzDvSBk4buvIGxp4buHdSB0cuG6oyB24buBXG4gICAgICAgICAgICBjb25zdCBwcm9jZXNzZWRSb29tcyA9IHJvb21zLm1hcChyb29tID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi5yb29tLFxuICAgICAgICAgICAgICAgICAgICBpc0xpdmU6IEJvb2xlYW4ocm9vbS5pc0xpdmUpLFxuICAgICAgICAgICAgICAgICAgICAvLyBDaHV54buDbiDEkeG7lWkgY8OhYyB0csaw4budbmcgc+G7kVxuICAgICAgICAgICAgICAgICAgICB2aWV3ZXJDb3VudDogTnVtYmVyKHJvb20udmlld2VyQ291bnQgfHwgMCksXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWaWV3ZXJzOiBOdW1iZXIocm9vbS5jdXJyZW50Vmlld2VycyB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRDb3VudDogTnVtYmVyKHJvb20uc3RhcnRDb3VudCB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Vmlld2VyczogTnVtYmVyKHJvb20udGFyZ2V0Vmlld2VycyB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgcmVhbFZpZXdlcnM6IE51bWJlcihyb29tLnJlYWxWaWV3ZXJzIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogTnVtYmVyKHJvb20uZHVyYXRpb24gfHwgMzApLFxuICAgICAgICAgICAgICAgICAgICBmaW5hbER1cmF0aW9uOiBOdW1iZXIocm9vbS5maW5hbER1cmF0aW9uIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICAvLyBHaeG7ryBuZ3V5w6puIGPDoWMgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgIGxhc3RWaWV3ZWQ6IHJvb20ubGFzdFZpZXdlZCxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlZEF0OiByb29tLmNyZWF0ZWRBdCxcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZEF0OiByb29tLnVwZGF0ZWRBdCxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRlZEF0OiByb29tLnN0YXJ0ZWRBdCxcbiAgICAgICAgICAgICAgICAgICAgZW5kZWRBdDogcm9vbS5lbmRlZEF0LFxuICAgICAgICAgICAgICAgICAgICBsYXN0VGltZUNoZWNrVmlld2Vyczogcm9vbS5sYXN0VGltZUNoZWNrVmlld2VycyxcbiAgICAgICAgICAgICAgICAgICAgc3RvcHBlZEF0OiByb29tLnN0b3BwZWRBdFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbG9nKGDinIUgxJDDoyB44butIGzDvSAke3Byb2Nlc3NlZFJvb21zLmxlbmd0aH0gcGjDsm5nLCB0cuG6oyB24buBIGNobyBVSWApO1