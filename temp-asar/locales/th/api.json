aWVzKGZvbGRlcklkKWApO1xuICAgICAgICAgICAgdGhpcy5kYi5leGVjKGBDUkVBVEUgSU5ERVggSUYgTk9UIEVYSVNUUyBpZHhfcHJveGllc19zdGF0dXMgT04gcHJveGllcyhzdGF0dXMpYCk7XG4gICAgICAgICAgICB0aGlzLmRiLmV4ZWMoYENSRUFURSBJTkRFWCBJRiBOT1QgRVhJU1RTIGlkeF9wcm94aWVzX2hvc3RfcG9ydCBPTiBwcm94aWVzKGhvc3QsIHBvcnQpYCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFJvb21zIGluZGV4ZXNcbiAgICAgICAgICAgIHRoaXMuZGIuZXhlYyhgQ1JFQVRFIElOREVYIElGIE5PVCBFWElTVFMgaWR4X3Jvb21zX3Jvb21Vc2VybmFtZSBPTiByb29tcyhyb29tVXNlcm5hbWUpYCk7XG4gICAgICAgICAgICB0aGlzLmRiLmV4ZWMoYENSRUFURSBJTkRFWCBJRiBOT1QgRVhJU1RTIGlkeF9yb29tc19saXZlIE9OIHJvb21zKGlzTGl2ZSlgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQWNjb3VudC1yb29tcyBpbmRleGVzXG4gICAgICAgICAgICB0aGlzLmRiLmV4ZWMoYENSRUFURSBJTkRFWCBJRiBOT1QgRVhJU1RTIGlkeF9hY2NvdW50X3Jvb21zX2FjY291bnQgT04gYWNjb3VudF9yb29tcyhhY2NvdW50SWQpYCk7XG4gICAgICAgICAgICB0aGlzLmRiLmV4ZWMoYENSRUFURSBJTkRFWCBJRiBOT1QgRVhJU1RTIGlkeF9hY2NvdW50X3Jvb21zX3Jvb20gT04gYWNjb3VudF9yb29tcyhyb29tSWQpYCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFZpZXdlciBoaXN0b3J5IGluZGV4ZXNcbiAgICAgICAgICAgIHRoaXMuZGIuZXhlYyhgQ1JFQVRFIElOREVYIElGIE5PVCBFWElTVFMgaWR4X3ZpZXdlcl9oaXN0b3J5X3Jvb20gT04gdmlld2VyX2hpc3Rvcnkocm9vbVVpZClgKTtcbiAgICAgICAgICAgIHRoaXMuZGIuZXhlYyhgQ1JFQVRFIElOREVYIElGIE5PVCBFWElTVFMgaWR4X3ZpZXdlcl9oaXN0b3J5X3RpbWVzdGFtcCBPTiB2aWV3ZXJfaGlzdG9yeSh0aW1lc3RhbXApYCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFRhc2tzIGluZGV4ZXNcbiAgICAgICAgICAgIHRoaXMuZGIuZXhlYyhgQ1JFQVRFIElOREVYIElGIE5PVCBFWElTVFMgaWR4X3Rhc2tzX3N0YXR1cyBPTiB0YXNrcyhzdGF0dXMpYCk7XG4gICAgICAgICAgICB0aGlzLmRiLmV4ZWMoYENSRUFURSBJTkRFWCBJRiBOT1QgRVhJU1RTIGlkeF90YXNrc19lbmFibGVkIE9OIHRhc2tzKGVuYWJsZWQpYCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxvZygn4pyFIERhdGFiYXNlIGluZGV4ZXMgY3JlYXRlZCBzdWNjZXNzZnVsbHknKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yKCfinYwgRXJyb3IgY3JlYXRpbmcgaW5kZXhlczonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgZGVmYXVsdCBkYXRhXG4gICAgICovXG4gICAgYXN5bmMgaW5zZXJ0RGVmYXVsdERhdGEoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2coJ/CflKcgSW5zZXJ0aW5nIGRlZmF1bHQgZGF0YS4uLicpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBJbnNlcnQgZGVmYXVsdCBzZXR0aW5nc1xuICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3NTdG10ID0gdGhpcy5kYi5wcmVwYXJlKGBcbiAgICAgICAgICAgICAgICBJTlNFUlQgT1IgSUdOT1JFIElOVE8gc2V0dGluZ3MgKGtleSwgdmFsdWUsIHVwZGF0ZWRBdClcbiAgICAgICAgICAgICAgICBWQUxVRVMgKD8sID8sID8pXG4gICAgICAgICAgICBgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5kZWZhdWx0U2V0dGluZ3MpKSB7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3NTdG10LnJ1bihrZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlKSwgbm93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbG9nKCfinIUgRGVmYXVsdCBkYXRhIGluc2VydGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgZXJyb3IoJ+KdjCBFcnJvciBpbnNlcnRpbmcgZGVmYXVsdCBkYXRhOicsIGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogS2nhu4NtIHRyYSBkYXRhYmFzZSBpbnRlZ3JpdHlcbiAgICAgKi9cbiAgICBjaGVja0ludGVncml0eSgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZGIucHJhZ21hKCdpbnRlZ3JpdHlfY2hlY2snKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHRbMF0uaW50ZWdyaXR5X2NoZWNrID09PSAnb2snKSB7XG4gICAgICAgICAgICAgICAgbG9nKCfinIUgRGF0YWJhc2UgaW50ZWdyaXR5IGNoZWNrIHBhc3NlZCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlcnJvcign4p2MIERhdGFiYXNlIGludGVncml0eSBjaGVjayBmYWlsZWQ6JywgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBlcnJvcign4p2MIEVycm9yIGNoZWNraW5nIGRhdGFiYXNlIGludGVncml0eTonLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBLaeG7g20gdHJhIHbDoCBj4bqtcCBuaOG6rXQgc2NoZW1hIGRhdGFiYXNlXG4gICAgICovXG4gICAgYXN5bmMgbWlncmF0ZVNjaGVtYSgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvZygn8J+UpyBDaGVja2luZyBhbmQgbWlncmF0aW5nIGRhdGFiYXNlIHNjaGVtYS4uLicpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIHbDoCBz4butYSBi4bqjbmcgcm9vbXMgbuG6v3UgY8OzIHbhuqVuIMSR4buBXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmZpeFJvb21zVGFibGUoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSBj4buZdCBhY3RpdmVSb29tcyB0cm9uZyBi4bqjbmcgYWNjb3VudHNcbiAgICAgICAgICAgIGlmICghdGhpcy5jb2x1bW5FeGlzdHMoJ2FjY291bnRzJywgJ2FjdGl2ZVJvb21zJykpIHtcbiAgICAgICAgICAgICAgICBsb2coJ+KelSBBZGRpbmcgY29sdW1uIGFjdGl2ZVJvb21zIHRvIGFjY291bnRzIHRhYmxlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYi5leGVjKGBBTFRFUiBUQUJMRSBhY2NvdW50cyBBREQgQ09MVU1OIGFjdGl2ZVJvb21zIFRFWFQgREVGQVVMVCAnW10nYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgY+G7mXQgcGFzc3dvcmQgdHJvbmcgYuG6o25nIGFjY291bnRzXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29sdW1uRXhpc3RzKCdhY2NvdW50cycsICdwYXNzd29yZCcpKSB7XG4gICAgICAgICAgICAgICAgbG9nKCfinpUgQWRkaW5nIGNvbHVtbiBwYXNzd29yZCB0byBhY2NvdW50cyB0YWJsZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGIuZXhlYyhgQUxURVIgVEFCTEUgYWNjb3VudHMgQUREIENPTFVNTiBwYXNzd29yZCBURVhUYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgY+G7mXQgZW1haWwgdHJvbmcgYuG6o25nIGFjY291bnRzXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29sdW1uRXhpc3RzKCdhY2NvdW50cycsICdlbWFpbCcpKSB7XG4gICAgICAgICAgICAgICAgbG9nKCfinpUgQWRkaW5nIGNvbHVtbiBlbWFpbCB0byBhY2NvdW50cyB0YWJsZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGIuZXhlYyhgQUxURVIgVEFCTEUgYWNjb3VudHMgQUREIENPTFVNTiBlbWFpbCBURVhUYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgY+G7mXQgZW1haWxQYXNzd29yZCB0cm9uZyBi4bqjbmcgYWNjb3VudHNcbiAgICAgICAgICAgIGlmICghdGhpcy5jb2x1bW5FeGlzdHMoJ2FjY291bnRzJywgJ2VtYWlsUGFzc3dvcmQnKSkge1xuICAgICAgICAgICAgICAgIGxvZygn4p6VIEFkZGluZyBjb2x1bW4gZW1haWxQYXNzd29yZCB0byBhY2NvdW50cyB0YWJsZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGIuZXhlYyhgQUxURVIgVEFCTEUgYWNjb3VudHMgQUREIENPTFVNTiBlbWFpbFBhc3N3b3JkIFRFWFRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSBj4buZdCBsYXN0VXNlZCB0cm9uZyBi4bqjbmcgYWNjb3VudHNcbiAgICAgICAgICAgIGlmICghdGhpcy5jb2x1bW5FeGlzdHMoJ2FjY291bnRzJywgJ2xhc3RVc2VkJykpIHtcbiAgICAgICAgICAgICAgICBsb2coJ+KelSBBZGRpbmcgY29sdW1uIGxhc3RVc2VkIHRvIGFjY291bnRzIHRhYmxlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYi5leGVjKGBBTFRFUiBUQUJMRSBhY2NvdW50cyBBREQgQ09MVU1OIGxhc3RVc2VkIFRFWFRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gS2nhu4NtIHRyYSBj4buZdCBjdXJyZW50Um9vbXMgdHJvbmcgYuG6o25nIGFjY291bnRzXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29sdW1uRXhpc3RzKCdhY2NvdW50cycsICdjdXJyZW50Um9vbXMnKSkge1xuICAgICAgICAgICAgICAgIGxvZygn4p6VIEFkZGluZyBjb2x1bW4gY3VycmVudFJvb21zIHRvIGFjY291bnRzIHRhYmxlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYi5leGVjKGBBTFRFUiBUQUJMRSBhY2NvdW50cyBBREQgQ09MVU1OIGN1cnJlbnRSb29tcyBJTlRFR0VSIERFRkFVTFQgMGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIGPhu5l0IGF2YXRhclRodW1iIHRyb25nIGLhuqNuZyBhY2NvdW50c1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbHVtbkV4aXN0cygnYWNjb3VudHMnLCAnYXZhdGFyVGh1bWInKSkge1xuICAgICAgICAgICAgICAgIGxvZygn4p6VIEFkZGluZyBjb2x1bW4gYXZhdGFyVGh1bWIgdG8gYWNjb3VudHMgdGFibGUnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRiLmV4ZWMoYEFMVEVSIFRBQkxFIGFjY291bnRzIEFERCBDT0xVTU4gYXZhdGFyVGh1bWIgVEVYVGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBLaeG7g20gdHJhIGPhu5l0IHJvb21Vc2VybmFtZSB0cm9uZyBi4bqjbmcgYWNjb3VudHNcbiAgICAgICAgICAgIGlmICghdGhpcy5jb2x1bW5FeGlzdHMoJ2FjY291bnRzJywgJ3Jvb21Vc2Vyb