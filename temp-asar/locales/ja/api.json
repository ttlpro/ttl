gYWN0aXZlUm9vbXNcbiAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkQWN0aXZlUm9vbXMgPSBhY3RpdmVSb29tcy5maWx0ZXIocm9vbSA9PiByb29tICE9PSByb29tSWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IGFjdGl2ZVJvb21zIHRyb25nIGRhdGFiYXNlXG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlQWN0aXZlUm9vbXNTdG10ID0gdGhpcy5kYi5wcmVwYXJlKGBcbiAgICAgICAgICAgICAgICAgICAgVVBEQVRFIGFjY291bnRzIFxuICAgICAgICAgICAgICAgICAgICBTRVQgYWN0aXZlUm9vbXMgPSA/LFxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZEF0ID0gP1xuICAgICAgICAgICAgICAgICAgICBXSEVSRSBpZCA9ID9cbiAgICAgICAgICAgICAgICBgKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVBY3RpdmVSb29tc1N0bXQucnVuKEpTT04uc3RyaW5naWZ5KHVwZGF0ZWRBY3RpdmVSb29tcyksIG5vdywgYWNjb3VudElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbG9nKGDinIUgxJDDoyBnaeG6o2kgcGjDs25nICR7YWNjb3VudHNJblJvb20ubGVuZ3RofSBhY2NvdW50cyBraOG7j2kgcm9vbSAke3Jvb21JZH1gKTtcbiAgICAgICAgICAgIHJldHVybiB7IFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsIFxuICAgICAgICAgICAgICAgIGFjY291bnRzUmVsZWFzZWQ6IGFjY291bnRzSW5Sb29tLmxlbmd0aFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBlcnJvcihg4p2MIEzhu5dpIGtoaSBnaeG6o2kgcGjDs25nIGFjY291bnRzIGto4buPaSByb29tICR7cm9vbUlkfTpgLCBlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnIubWVzc2FnZSB9O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJvb21TdG9yYWdlOyAiLCJjb25zdCB7IGxvZywgZXJyb3IgfSA9IHJlcXVpcmUoJy4uL2xvZ2dlcicpO1xuY29uc3QgQmFzZVN0b3JhZ2UgPSByZXF1aXJlKCcuL2Jhc2Utc3RvcmFnZScpO1xuXG5jbGFzcyBTZXR0aW5nc1N0b3JhZ2UgZXh0ZW5kcyBCYXNlU3RvcmFnZSB7XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBzZXR0aW5nc1xuICAgICAqL1xuICAgIGFzeW5jIGdldFNldHRpbmdzKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc3RtdCA9IHRoaXMuZGIucHJlcGFyZShgXG4gICAgICAgICAgICAgICAgU0VMRUNUIGtleSwgdmFsdWUgRlJPTSBzZXR0aW5nc1xuICAgICAgICAgICAgYCk7XG4gICAgICAgICAgICBjb25zdCBzZXR0aW5ncyA9IHN0bXQuYWxsKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBzZXR0aW5nIG9mIHNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3NldHRpbmcua2V5XSA9IEpTT04ucGFyc2Uoc2V0dGluZy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3NldHRpbmcua2V5XSA9IHNldHRpbmcudmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBNZXJnZSB24bubaSBkZWZhdWx0IHNldHRpbmdzXG4gICAgICAgICAgICBjb25zdCBmaW5hbFNldHRpbmdzID0geyAuLi50aGlzLmRlZmF1bHRTZXR0aW5ncywgLi4ucmVzdWx0IH07XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXJpYWxpemVGb3JJUEMoZmluYWxTZXR0aW5ncyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBlcnJvcignRXJyb3IgZ2V0dGluZyBzZXR0aW5nczonLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXJpYWxpemVGb3JJUEModGhpcy5kZWZhdWx0U2V0dGluZ3MpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2F2ZSBzZXR0aW5nc1xuICAgICAqL1xuICAgIGFzeW5jIHNhdmVTZXR0aW5ncyhzZXR0aW5ncykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc3RtdCA9IHRoaXMuZGIucHJlcGFyZShgXG4gICAgICAgICAgICAgICAgSU5TRVJUIE9SIFJFUExBQ0UgSU5UTyBzZXR0aW5ncyAoa2V5LCB2YWx1ZSwgdXBkYXRlZEF0KVxuICAgICAgICAgICAgICAgIFZBTFVFUyAoPywgPywgPylcbiAgICAgICAgICAgIGApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICBsZXQgc2F2ZWRDb3VudCA9IDA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNldHRpbmdzKSkge1xuICAgICAgICAgICAgICAgIHN0bXQucnVuKFxuICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgbm93XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBzYXZlZENvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxvZyhg4pyFIFNhdmVkICR7c2F2ZWRDb3VudH0gc2V0dGluZ3NgKTtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGNvdW50OiBzYXZlZENvdW50IH07XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBlcnJvcignRXJyb3Igc2F2aW5nIHNldHRpbmdzOicsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2F2ZSBzaW5nbGUgc2V0dGluZ1xuICAgICAqL1xuICAgIGFzeW5jIHNhdmVTZXR0aW5nKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHN0bXQgPSB0aGlzLmRiLnByZXBhcmUoYFxuICAgICAgICAgICAgICAgIElOU0VSVCBPUiBSRVBMQUNFIElOVE8gc2V0dGluZ3MgKGtleSwgdmFsdWUsIHVwZGF0ZWRBdClcbiAgICAgICAgICAgICAgICBWQUxVRVMgKD8sID8sID8pXG4gICAgICAgICAgICBgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc3RtdC5ydW4oXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHZhbHVlKSxcbiAgICAgICAgICAgICAgICBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxvZyhg4pyFIFNhdmVkIHNldHRpbmc6ICR7a2V5fWApO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgZXJyb3IoJ0Vycm9yIHNhdmluZyBzZXR0aW5nOicsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHNpbmdsZSBzZXR0aW5nXG4gICAgICovXG4gICAgYXN5bmMgZ2V0U2V0dGluZyhrZXkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHN0bXQgPSB0aGlzLmRiLnByZXBhcmUoYFxuICAgICAgICAgICAgICAgIFNFTEVDVCB2YWx1ZSBGUk9NIHNldHRpbmdzIFdIRVJFIGtleSA9ID9cbiAgICAgICAgICAgIGApO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gc3RtdC5nZXQoa2V5KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8