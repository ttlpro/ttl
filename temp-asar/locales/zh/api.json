H1cbn1cblxuLyoqXG4gKiBIw6BtIGVycm9yIGx1w7RuIGhp4buDbiB0aOG7iyAoa2jDtG5nIGLhu4sg4bqjbmggaMaw4bufbmcgYuG7n2kgTE9HX0VOQUJMRUQpXG4gKiBAcGFyYW0gIHsuLi5hbnl9IGFyZ3MgQ8OhYyB0aGFtIHPhu5EgZ2nhu5FuZyBuaMawIGNvbnNvbGUuZXJyb3JcbiAqL1xuZnVuY3Rpb24gZXJyb3IoLi4uYXJncykge1xuICAgIGNvbnNvbGUuZXJyb3IoLi4uYXJncyk7XG59XG5cbi8qKlxuICogSMOgbSB3YXJuIGx1w7RuIGhp4buDbiB0aOG7iyAoa2jDtG5nIGLhu4sg4bqjbmggaMaw4bufbmcgYuG7n2kgTE9HX0VOQUJMRUQpXG4gKiBAcGFyYW0gIHsuLi5hbnl9IGFyZ3MgQ8OhYyB0aGFtIHPhu5EgZ2nhu5FuZyBuaMawIGNvbnNvbGUud2FyblxuICovXG5mdW5jdGlvbiB3YXJuKC4uLmFyZ3MpIHtcbiAgICBjb25zb2xlLndhcm4oLi4uYXJncyk7XG59XG5cbi8qKlxuICogQuG6rXQvdOG6r3QgbG9nXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWQgdHJ1ZSDEkeG7gyBi4bqtdCwgZmFsc2UgxJHhu4MgdOG6r3RcbiAqL1xuZnVuY3Rpb24gc2V0TG9nRW5hYmxlZChlbmFibGVkKSB7XG4gICAgZ2xvYmFsLkxPR19FTkFCTEVEID0gZW5hYmxlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbG9nLFxuICAgIGVycm9yLFxuICAgIHdhcm4sXG4gICAgc2V0TG9nRW5hYmxlZCxcbiAgICBMT0dfRU5BQkxFRFxufTsgIiwiY29uc3QgeyBOb3RpZmljYXRpb24sIGFwcCwgZGlhbG9nIH0gPSByZXF1aXJlKCdlbGVjdHJvbicpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgbG9nLCBlcnJvciB9ID0gcmVxdWlyZSgnLi9sb2dnZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IGFwcFN0YXRlID0gcmVxdWlyZSgnLi9hcHAtc3RhdGUnKTtcblxuLyoqXG4gKiBRdeG6o24gbMO9IHRow7RuZyBiw6FvIGRlc2t0b3AgduG7m2kgaOG7lyB0cuG7oyDEkWEgbmfDtG4gbmfhu69cbiAqL1xuY2xhc3MgTm90aWZpY2F0aW9uTWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIFxuICAgICAgICAvLyBUaGF5IMSR4buVaSDEkcaw4budbmcgZOG6q24gaWNvbiDEkeG7gyBz4butIGThu6VuZyBpY29uIGPDsyBz4bq1blxuICAgICAgICAvLyBjb25zdCBpY29uUGF0aCA9IHBhdGguam9pbihhcHAuZ2V0QXBwUGF0aCgpLCAncmVzb3VyY2VzL2ljb24ucG5nJyk7XG4gICAgICAgIGNvbnN0IGljb25QYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJ3Jlc291cmNlcycsICdpY29uLnBuZycpO1xuICAgICAgICBsb2coYPCfk6IgSWNvbiBwYXRoIGZvciBub3RpZmljYXRpb25zOiAke2ljb25QYXRofWApO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5pY29uUGF0aCA9IGljb25QYXRoO1xuICAgICAgICB0aGlzLnNvdW5kRW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuaGlzdG9yeUxpbWl0ID0gNTA7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uSGlzdG9yeSA9IFtdO1xuICAgICAgICBcbiAgICAgICAgLy8gTMawdSB0aGFtIGNoaeG6v3UgxJHhur9uIHRow7RuZyBiw6FvIMSR4buDIHRyw6FuaCBi4buLIGdhcmJhZ2UgY29sbGVjdGVkXG4gICAgICAgIHRoaXMuYWN0aXZlTm90aWZpY2F0aW9ucyA9IFtdO1xuICAgICAgICBcbiAgICAgICAgLy8gS2jhu59pIHThuqFvIGjhu5cgdHLhu6MgxJFhIG5nw7RuIG5n4buvXG4gICAgICAgIHRoaXMudHJhbnNsYXRpb25zID0gdGhpcy5sb2FkVHJhbnNsYXRpb25zKGFwcFN0YXRlLmxhbmd1YWdlKTtcbiAgICAgICAgXG4gICAgICAgIC8vIMSQxINuZyBrw70gbOG6r25nIG5naGUgdGhheSDEkeG7lWkgbmfDtG4gbmfhu68gdOG7qyBBcHBTdGF0ZVxuICAgICAgICBhcHBTdGF0ZS5hZGRMaXN0ZW5lcignbGFuZ3VhZ2UnLCAobGFuZ3VhZ2UpID0+IHtcbiAgICAgICAgICAgIGxvZyhg8J+MkCBOZ8O0biBuZ+G7ryB0aMO0bmcgYsOhbyB0aGF5IMSR4buVaSB0aMOgbmg6ICR7bGFuZ3VhZ2V9YCk7XG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9ucyA9IHRoaXMubG9hZFRyYW5zbGF0aW9ucyhsYW5ndWFnZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gS2nhu4NtIHRyYSBo4buXIHRy4bujIHRow7RuZyBiw6FvXG4gICAgICAgIGlmICghTm90aWZpY2F0aW9uLmlzU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgICAgIGxvZygn4p2MIFRow7RuZyBiw6FvIGtow7RuZyDEkcaw4bujYyBo4buXIHRy4bujIHRyw6puIGjhu4cgdGjhu5FuZyBuw6B5Jyk7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZygn4pyFIFRow7RuZyBiw6FvIMSRxrDhu6NjIGjhu5cgdHLhu6MgdHLDqm4gaOG7hyB0aOG7kW5nIG7DoHknKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gVGhp4bq/dCBs4bqtcCBBcHBVc2VyTW9kZWxJZCBjaG8gV2luZG93c1xuICAgICAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhcHAuc2V0QXBwVXNlck1vZGVsSWQoYXBwLmdldE5hbWUoKSB8fCAnQU1BQyBUaWtUb2sgTGl2ZScpO1xuICAgICAgICAgICAgICAgIGxvZygn4pyFIMSQw6MgdGhp4bq/dCBs4bqtcCBBcHBVc2VyTW9kZWxJZCBjaG8gV2luZG93cycpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IoJ+KdjCBM4buXaSBraGkgdGhp4bq/dCBs4bqtcCBBcHBVc2VyTW9kZWxJZDonLCBlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogxJDhu41jIGZpbGUgdHJhbnNsYXRpb25zIGThu7FhIHRyw6puIG5nw7RuIG5n4buvXG4gICAgICovXG4gICAgbG9hZFRyYW5zbGF0aW9ucyhsYW5nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBpc1Byb2QgPSBwcm9jZ