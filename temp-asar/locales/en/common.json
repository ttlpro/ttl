hcnRUYXNrKHRhc2tJZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcFRhc2sodGFza0lkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFjDs2EgdGFza1xuICAgICAqL1xuICAgIGFzeW5jIGRlbGV0ZVRhc2sodGFza0lkKSB7XG4gICAgICAgIGlmICghdGhpcy5zdG9yYWdlTWFuYWdlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdG9yYWdlIG1hbmFnZXIgbm90IGluaXRpYWxpemVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9wIHRhc2sgdHLGsOG7m2Mga2hpIHjDs2FcbiAgICAgICAgdGhpcy5zdG9wVGFzayh0YXNrSWQpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc3RvcmFnZU1hbmFnZXIuZGVsZXRlVGFzayh0YXNrSWQpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3VsdC5lcnJvcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBC4bqvdCDEkeG6p3UgdGFzayB0cuG7sWMgdGnhur9wIChraMO0bmcgY2hlY2sgZW5hYmxlZClcbiAgICAgKi9cbiAgICBhc3luYyBzdGFydFRhc2tEaXJlY3RseSh0YXNrSWQpIHtcbiAgICAgICAgbG9nKGDwn5qAIELhuq90IMSR4bqndSB0YXNrIHRy4buxYyB0aeG6v3AgJHt0YXNrSWR9YCk7XG4gICAgICAgIGNvbnN0IHRhc2tzID0gYXdhaXQgdGhpcy5nZXRBbGxUYXNrcygpO1xuICAgICAgICBjb25zdCB0YXNrID0gdGFza3MuZmluZCh0ID0+IHQuaWQgPT09IHRhc2tJZCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXRhc2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGFzayBraMO0bmcgdOG7k24gdOG6oWknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEThu6tuZyB0aW1lciBjxakgbuG6v3UgY8OzXG4gICAgICAgIHRoaXMuc3RvcFRhc2sodGFza0lkKTtcblxuICAgICAgICAvLyBU4bqhbyB0aW1lciBt4bubaVxuICAgICAgICBjb25zdCB0aW1lciA9IHNldEludGVydmFsKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZXhlY3V0ZVRhc2sodGFza0lkKTtcbiAgICAgICAgfSwgdGFzay5pbnRlcnZhbCk7XG5cbiAgICAgICAgdGhpcy5hY3RpdmVUaW1lcnMuc2V0KHRhc2tJZCwgdGltZXIpO1xuICAgICAgICBcbiAgICAgICAgLy8gVMOtbmggdG/DoW4gdGjhu51pIGdpYW4gY2jhuqF5IHRp4bq/cCB0aGVvIG3hu5l0IGPDoWNoIGNow61uaCB4w6FjXG4gICAgICAgIGNvbnN0IG5leHRSdW5UaW1lID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIHRhc2suaW50ZXJ2YWwpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB0YXNrXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZU1hbmFnZXIudXBkYXRlVGFzayh0YXNrSWQsIHsgXG4gICAgICAgICAgICBzdGF0dXM6ICdydW5uaW5nJyxcbiAgICAgICAgICAgIG5leHRSdW46IG5leHRSdW5UaW1lXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxvZyhgVGFzayAnJHt0YXNrLm5hbWV9JyDEkcOjIMSRxrDhu6NjIGLhuq90IMSR4bqndSwgY2jhuqF5IHRp4bq/cCB0aGVvIHbDoG86ICR7bmV4dFJ1blRpbWV9YCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQuG6r3QgxJHhuqd1IHRhc2sgKHbhu5tpIHZhbGlkYXRpb24pXG4gICAgICovXG4gICAgYXN5bmMgc3RhcnRUYXNrKHRhc2tJZCkge1xuICAgICAgICBjb25zdCB0YXNrcyA9IGF3YWl0IHRoaXMuZ2V0QWxsVGFza3MoKTtcbiAgICAgICAgY29uc3QgdGFzayA9IHRhc2tzLmZpbmQodCA9PiB0LmlkID09PSB0YXNrSWQpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCF0YXNrKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rhc2sga2jDtG5nIHThu5NuIHThuqFpJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRhc2suZW5hYmxlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUYXNrIGNoxrBhIMSRxrDhu6NjIGvDrWNoIGhv4bqhdCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3RhcnRUYXNrRGlyZWN0bHkodGFza0lkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBE4burbmcgdGFza1xuICAgICAqL1xuICAgIHN0b3BUYXNrKHRhc2tJZCkge1xuICAgICAgICBsb2coYPCfm5EgQXR0ZW1wdGluZyB0byBzdG9wIHRhc2sgJHt0YXNrSWR9YCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB0aW1lciA9IHRoaXMuYWN0aXZlVGltZXJzLmdldCh0YXNrSWQpO1xuICAgICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVUaW1lcnMuZGVsZXRlKHRhc2tJZCk7XG4gICAgICAgICAgICBsb2coYOKchSBUYXNrICR7dGFza0lkfSB0aW1lciBjbGVhcmVkIHN1Y2Nlc3NmdWxseWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nKGDimqDvuI8gTm8gYWN0aXZlIHRpbWVyIGZvdW5kIGZvciB0YXNrICR7dGFza0lkfWApO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBEZWJ1ZzogU2hvdyByZW1haW5pbmcgYWN0aXZlIHRpbWVyc1xuICAgICAgICBsb2coYPCflI0gQWN0aXZlIHRpbWVycyBhZnRlciBzdG9wOmAsIEFycmF5LmZyb20odGhpcy5hY3RpdmVUaW1lcnMua2V5cygpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGjhu7FjIHRoaSB0YXNrIHbhu5tpIGltcHJvdmVkIGNoZWNraW5nXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZVRhc2sodGFza0lkKSB7XG4gICAgICAgIGxvZyhg8J+agCBFeGVjdXRpbmcgdGFzayAke3Rhc2tJZH1gKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRhc2tzID0gYXdhaXQgdGhpcy5nZXRBbGxUYXNrcygpO1xuICAgICAgICBjb25zdCB0YXNrID0gdGFza3MuZmluZCh0ID0+IHQuaWQgPT09IHRhc2tJZCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXRhc2spIHtcbiAgICAgICAgICAgIGxvZyhg4p2MIFRhc2sgJHt0YXNrSWR9IG5vdCBmb3VuZGApO1xuICAgICAgICAgICAgLy8g4pyFIENI4buIIFNUT1AgVEFTSyDEkMOTLCBLSMOUTkcgU1RPUCBU4bqkVCBD4bqiXG4gICAgICAgICAgICB0aGlzLnN0b3BUYXNrKHRhc2tJZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICghdGFzay5lbmFibGVkKSB7XG4gICAgICAgICAgICBsb2coYOKdjCBUYXNrICR7dGFza0lkfSBpcyBkaXNhYmxlZCwgc3RvcHBpbmdgKTtcbiAgICAgICAgICAgIHRoaXMuc3RvcFRhc2sodGFza0lkKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRSSVBMRSBDSEVDSzogVGltZXIgY8OzIGPDsm4gdHJvbmcgYWN0aXZlVGltZXJzIGtow7RuZ1xuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlVGltZXJzLmhhcyh0YXNrSWQpKSB7XG4gICAgICAgICAgICBsb2coYOKdjCBUYXNrICR7dGFza0lkfSB0aW1lciBub3QgaW4gYWN0aXZlVGltZXJzLCBzdG9wcGluZ2ApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvZyhg4o+zIFRhc2sgJHt0YXNrLm5hbWV9ICgke3Rhc2tJZH0pIHN0YXJ0aW5nIGV4ZWN1dGlvbmApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSBydW5uaW5nIHbDoCBsYXN0UnVuXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZU1hbmFnZXIudXBkYXRlVGFzayh0YXNrSWQsIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdydW5uaW5nJyxcbiAgICAgICAgICAgICAgICBsYXN0UnVuOiBjdXJyZW50VGltZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLnRhc2tIYW5kbGVycy5nZXQodGFzay5oYW5kbGVyKTtcbiAgICAgICAgICAgIGlmICghaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSGFuZGxlciAnJHt0YXNrLmhhbmRsZXJ9JyBraMO0bmcgdOG7k24gdOG6oWlgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g4pyFIFdSQVBQRVIgduG7m2kgdGltZW91dCDEkeG7gyB0csOhbmggaGFuZ1xuICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgICAgICAgICBoYW5kbGVyKCksXG4gICAgICAgICAgICAgICAgbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4gXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KG5ldyBFcnJvcignVGFzayB0aW1lb3V0IGFmdGVyIDUgbWludXRlcycpKSwgNSAqIDYwICogMTAwMClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgbG9nKGDinIUgVGFzayAke3Rhc2tJZH0gY29tcGxldGVkIHN1Y2Nlc3NmdWxseWApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUw61uaCB0b8OhbiBuZXh0UnVuIG3hu5tpXG4gICAgICAgICAgICBjb25zdCBuZXh0UnVuVGltZSA9IG5ldyBEYXRlKERhdGUubm93KCkgKyB0YXNrLmludGVydmFsKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgc3RhdHVzLCBydW5Db3VudCwgdsOgIG5leHRSdW5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZU1hbmFnZXIudXBkYXRlVGFzayh0YXNrSWQsIHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdjb21wbGV0ZWQnLFxuICAgICAgICAgICAgICAgIHJ1bkNvdW50OiAodGFzay5ydW5Db3VudCB8fCAwKSArIDEsXG4gICAgICAgICAgICAgICAgbmV4dFJ1bjogbmV4dFJ1blRpbWVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZXJyb3IoYOKdjCBFcnJvciBleGVjdXRpbmcgdGFzayAke3Rhc2submFtZX06YCwgZXJyKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g4pyFIEtow7RuZyBjcmFzaCBu4bq/dSB1cGRhdGVUYXNrU3RhdHVzIGZhaWxcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gVMOtbmggdG/DoW4gbmV4dFJ1biBt4bubaSBuZ2F5IGPhuqMga2hpIGPDsyBs4buXaVxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRSdW5UaW1lID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIHRhc2suaW50ZXJ2YWwpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlTWFuYWdlci51cGRhdGVUYXNrKHRhc2tJZCwge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIGxhc3RFcnJvcjogZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ291bnQ6ICh0YXNrLmVycm9yQ291bnQgfHwgMCkgKyAxLFxuICAgICAgICAgICAgICAgICAgICBuZXh0UnVuOiBuZXh0UnVuVGltZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBjYXRjaCAodXBkYXRlRXJyKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IoYOKdjCBGYWlsZWQgdG8gdXBkYXRlIHRhc2sgc3RhdHVzOmAsIHVwZGF0ZUVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBD4bqtcCBuaOG6rXQgdHLhuqFuZyB0aMOhaSB0YXNrXG4gICAgICovXG4gICAgYXN5bmMgdXBkYXRlVGFza1N0YXR1cyh0YXNrSWQsIHN0YXR1cywgbGFzdEVycm9yID0gbnVsbCkge1xuICAgICAgICBpZiAoIXRoaXMuc3RvcmFnZU1hbmFnZXIpIHtcbiAgICAgICAgICAgIGxvZygn4pqg77iPIE5vIHN0b3JhZ2UgbWFuYWdlciwgc2tpcHBpbmcgc3RhdHVzIHVwZGF0ZScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEzhuqV5IHRow7RuZyB0aW4gdGFzayBoaeG7h24gdOG6oWkgxJHhu4MgY+G6rXAgbmjhuq10IMSRw7puZ1xuICAgICAgICAgICAgY29uc3QgdGFzayA9IGF3YWl0IHRoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0VGFza0J5SWQodGFza0lkKTtcbiAgICAgICAgICAgIGlmICghdGFzaykge1xuICAgICAgICAgICAgICAgIGxvZyhg4pqg77iPIENhbm5vdCB1cGRhdGUgc3RhdHVzIGZvciBub24tZXhpc3RlbnQgdGFzayAke3Rhc2tJZH1gKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZXMgPSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBD4bqtcCBuaOG6rXQgbGFzdFJ1biBu4bq/dSBsw6AgcnVubmluZyBob+G6t2MgY29tcGxldGVkXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSAncnVubmluZycgfHwgc3RhdHVzID09PSAnY29tcGxldGVkJykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZXMubGFzdFJ1biA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IG5leHRSdW4gbuG6v3UgdGFzayB24bqrbiBhY3RpdmVcbiAgICAgICAgICAgIGlmICh0YXNrLmVuYWJsZWQgJiYgKHN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcgfHwgc3RhdHVzID09PSAncnVubmluZycpKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlcy5uZXh0UnVuID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIHRhc2suaW50ZXJ2YWwpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEPhuq1wIG5o4bqtdCBlcnJvciBu4bq/dSBjw7NcbiAgICAgICAgICAgIGlmIChsYXN0RXJyb3IpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVzLmxhc3RFcnJvciA9IGxhc3RFcnJvcjtcbiAgICAgICAgICAgICAgICB1cGRhdGVzLmVycm9yQ291bnQgPSAodGFzay5lcnJvckNvdW50IHx8IDApICsgMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ+G6rXAgbmjhuq10IHJ1bkNvdW50IG7hur91IGNvbXBsZXRlZFxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVzLnJ1bkNvdW50ID0gKHRhc2sucnVuQ291bnQgfHwgMCkgKyAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnN0b3JhZ2VNYW5hZ2VyLnVwZGF0ZVRhc2sodGFza0lkLCB1cGRhdGVzKTtcblxuICAgICAgICAgICAgaWYgKCFyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIGVycm9yKCfinYwgRXJyb3IgdXBkYXRpbmcgdGFzayBzdGF0dXM6JywgcmVzdWx0LmVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBlcnJvcign4p2MIEVycm9yIHVwZGF0aW5nIHRhc2sgc3RhdHVzOicsIGVycik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBLaMO0aSBwaOG7pWMgY8OhYyB0YXNrIMSRYW5nIGhv4bqhdCDEkeG7mW5nIHNhdSBraGkgcmVzdGFydFxuICAgICAqL1xuICAgIGFzeW5jIHJlc3RvcmVBY3RpdmVUYXNrcygpIHtcbiAgICAgICAgY29uc3QgdGFza3MgPSBhd2FpdCB0aGlzLmdldEFsbFRhc2tzKCk7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVRhc2tzID0gdGFza3MuZmlsdGVyKHQgPT4gdC5lbmFibGVkKTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgdGFzayBvZiBhY3RpdmVUYXNrcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnN0YXJ0VGFzayh0YXNrLmlkKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGVycm9yKGBFcnJvciByZXN0b3JpbmcgdGFzayAke3Rhc2submFtZX06YCwgZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRo4buxYyB0aGkgdGFzayBuZ2F5IGzhuq1wIHThu6ljIChtYW51YWwgcnVuKVxuICAgICAqL1xuICAgIGFzeW5jIHJ1blRhc2tOb3codGFza0lkKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZXhlY3V0ZVRhc2sodGFza0lkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBE4buNbiBk4bq5cCB04bqldCBj4bqjIHRpbWVycyBraGkgc2h1dGRvd25cbiAgICAgKi9cbiAgICBjbGVhbnVwKCkge1xuICAgICAgICBmb3IgKGNvbnN0IFt0YXNrSWQsIHRpbWVyXSBvZiB0aGlzLmFjdGl2ZVRpbWVycykge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3RpdmVUaW1lcnMuY2xlYXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBM4bqleSBkYW5oIHPDoWNoIGhhbmRsZXJzIGPDsyBz4bq1blxuICAgICAqL1xuICAgIGdldEF2YWlsYWJsZUhhbmRsZXJzKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnRhc2tIYW5kbGVycy5rZXlzKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlYnVnIG1ldGhvZCAtIFNob3cgYWN0aXZlIHRpbWVyc1xuICAgICAqL1xuICAgIGRlYnVnQWN0aXZlVGltZXJzKCkge1xuICAgICAgICBsb2coJ/CflI0gQWN0aXZlIFRpbWVyczonLCBBcnJheS5mcm9tKHRoaXMuYWN0aXZlVGltZXJzLmtleXMoKSkpO1xuICAgICAgICBsb2coJ/CflI0gVG90YWwgYWN0aXZlIHRpbWVyczonLCB0aGlzLmFjdGl2ZVRpbWVycy5zaXplKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGFza01hbmFnZXI7ICIsImNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcbmNvbnN0IHsgYXBwLCBpcGNNYWluLCBzY3JlZW4gfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJylcbmNvbnN0IHNlcnZlID0gcmVxdWlyZSgnZWxlY3Ryb24tc2VydmUnKVxuY29uc3QgeyBjcmVhdGVXaW5kb3cgfSA9IHJlcXVpcmUoJy4vaGVscGVycycpXG5jb25zdCBWaWV3ZXIgPSByZXF1aXJlKFwiLi9idXNpbmVzc2VzL1ZpZXdlci5qc1wiKTtcbmNvbnN0IHsgbG9nLCBlcnJvciB9ID0gcmVxdWlyZSgnLi4vbGliL2xvZ2dlcicpO1xuY29uc3QgeyBjcmVhdGVNZW51LCBzZXR1cE1lbnVMb2NhbGl6YXRpb24gfSA9IHJlcXVpcmUoJy4vbWVudScpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpXG5jb25zdCBhcHBTdGF0ZSA9IHJlcXVpcmUoJy4uL2xpYi9hcHAtc3RhdGUnKVxuXG5jb25zdCBpc1Byb2QgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nXG5cbi8vIFNldCBhcHAgbmFtZVxuYXBwLm5hbWUgPSAnYW1hYy10aWt0b2stdmlld2VyJ1xuaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICdkYXJ3aW4nKSB7XG4gIGNvbnN0IGljb25QYXRoID0gaXNQcm9kIFxuICAgID8gcGF0aC5qb2luKHByb2Nlc3MucmVzb3VyY2VzUGF0aCwgJ2ljb24ucG5nJylcbiAgICA6IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9yZXNvdXJjZXMvaWNvbi5wbmcnKVxuICBcbiAgdHJ5IHtcbiAgICBpZiAocmVxdWlyZSgnZnMnKS5leGlzdHNTeW5jKGljb25QYXRoKSkge1xuICAgICAgYXBwLmRvY2suc2V0SWNvbihpY29uUGF0aClcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJZ25vcmUgaWNvbiBlcnJvcnNcbiAgfVxufVxuXG4vLyBIw6BtIGPhuq1wIG5o4bqtdCB0w6puIOG7qW5nIGThu6VuZyB0aGVvIG5nw7RuIG5n4buvXG5mdW5jdGlvbiB1cGRhdGVBcHBOYW1lKCkge1xuICAvLyDEkOG7jWMgZmlsZSB0cmFuc2xhdGlvbiBk4buxYSB0csOqbiBuZ8O0biBuZ+G7ryBoaeG7h24gdOG6oWlcbiAgY29uc3QgY3VycmVudExhbmd1YWdlID0gYXBwU3RhdGUubGFuZ3VhZ2UgfHwgJ3ZpJ1xuICBjb25zdCBpc1Byb2QgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nXG4gIFxuICAvLyDEkOG7jWMgZmlsZSB0cmFuc2xhdGlvbiB04burIHRoxrAgbeG7pWMgbG9jYWxlc1xuICB0cnkge1xuICAgIGxldCB0cmFuc2xhdGlvblBhdGhcbiAgICBcbiAgICBpZiAoaXNQcm9kKSB7XG4gICAgICAvLyBUcm9uZyBtw7RpIHRyxrDhu51uZyBwcm9kdWN0aW9uLCDEkcaw4budbmcgZOG6q24gdOG7m2kgdGjGsCBt4bulYyBsb2NhbGVzIMSRw6MgZ2nhuqNpIG7DqW5cbiAgICAgIGNvbnN0IGFwcFBhdGggPSBhcHAuZ2V0QXBwUGF0aCgpXG4gICAgICBjb25zdCBhcHBEaXIgPSBwYXRoLmRpcm5hbWUoYXBwUGF0aClcbiAgICAgIFxuICAgICAgLy8gVGjhu60gdMOsbSB0cm9uZyB0aMawIG3hu6VjIGxvY2FsZXMgZ2nhuqNpIG7DqW4g4bufIGPDuW5nIGPhuqVwIHbhu5tpIGFwcC5hc2FyXG4gICAgICB0cmFuc2xhdGlvblBhdGggPSBwYXRoLmpvaW4oYXBwRGlyLCAnbG9jYWxlcycsIGN1cnJlbnRMYW5ndWFnZSwgJ2NvbW1vbi5qc29uJylcbiAgICAgIFxuICAgICAgLy8gVHLDqm4gbWFjT1MgY8OzIHRo4buDIGPDsyBj4bqldSB0csO6YyBraMOhY1xuICAgICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICdkYXJ3aW4nICYmICFmcy5leGlzdHNTeW5jKHRyYW5zbGF0aW9uUGF0aCkpIHtcbiAgICAgICAgLy8gVGjhu60gdMOsbSB0cm9uZyBSZXNvdXJjZXNcbiAgICAgICAgdHJhbnNsYXRpb25QYXRoID0gcGF0aC5qb2luKHByb2Nlc3MucmVzb3VyY2VzUGF0aCwgJ2xvY2FsZXMnLCBjdXJyZW50TGFuZ3VhZ2UsICdjb21tb24uanNvbicpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE3DtGkgdHLGsOG7nW5nIGRldmVsb3BtZW50XG4gICAgICB0cmFuc2xhdGlvblBhdGggPSBwYXRoLmpvaW4oYXBwLmdldEFwcFBhdGgoKSwgJ3JlbmRlcmVyJywgJ2xvY2FsZXMnLCBjdXJyZW50TGFuZ3VhZ2UsICdjb21tb24uanNvbicpXG4gICAgfVxuICAgIFxuICAgIGxvZyhg8J+UjSBBcHA6IFRyeWluZyB0byBsb2FkIHRyYW5zbGF0aW9ucyBmcm9tOiAke3RyYW5zbGF0aW9uUGF0aH1gKVxuICAgIFxuICAgIGlmIChmcy5leGlzdHNTeW5jKHRyYW5zbGF0aW9uUGF0aCkpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmModHJhbnNsYXRpb25QYXRoLCAndXRmOCcpXG4gICAgICBjb25zdCB0cmFuc2xhdGlvbnMgPSBKU09OLnBhcnNlKGRhdGEpXG4gICAgICBcbiAgICAgIC8vIEPhuq1wIG5o4bqtdCB0w6puIOG7qW5nIGThu6VuZyBu4bq/dSBjw7NcbiAgICAgIGlmICh0cmFuc2xhdGlvbnMgJiYgdHJhbnNsYXRpb25zLmFwcCAmJiB0cmFuc2xhdGlvbnMuYXBwLnRpdGxlKSB7XG4gICAgICAgIGFwcC5uYW1lID0gdHJhbnNsYXRpb25zLmFwcC50aXRsZVxuICAgICAgICBsb2coYOKchSBBcHA6IFVwZGF0ZWQgYXBwIG5hbWUgdG8gXCIke2FwcC5uYW1lfVwiICgke2N1cnJlbnRMYW5ndWFnZX0pYClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9nKGDinYwgQXBwOiBUcmFuc2xhdGlvbiBmaWxlIG5vdCBmb3VuZCBmb3IgJHtjdXJyZW50TGFuZ3VhZ2V9IGF0ICR7dHJhbnNsYXRpb25QYXRofWApXG4gICAgICBcbiAgICAgIC8vIFRo4butIGTDuW5nIHRp4bq/bmcgVmnhu4d0IGzDoG0gZmFsbGJhY2tcbiAgICAgIGxldCBmYWxsYmFja1BhdGhcbiAgICAgIFxuICAgICAgaWYgKGlzUHJvZCkge1xuICAgICAgICAvLyBUcm9uZyBtw7RpIHRyxrDhu51uZyBwcm9kdWN0aW9uXG4gICAgICAgIGNvbnN0IGFwcFBhdGggPSBhcHAuZ2V0QXBwUGF0aCgpXG4gICAgICAgIGNvbnN0IGFwcERpciA9IHBhdGguZGlybmFtZShhcHBQYXRoKVxuICAgICAgICBcbiAgICAgICAgLy8gVGjhu60gdMOsbSB0cm9uZyB0aMawIG3hu6VjIGxvY2FsZXMgZ2nhuqNpIG7DqW5cbiAgICAgICAgZmFsbGJhY2tQYXRoID0gcGF0aC5qb2luKGFwcERpciwgJ2xvY2FsZXMnLCAndmknLCAnY29tbW9uLmpzb24nKVxuICAgICAgICBcbiAgICAgICAgLy8gVHLDqm4gbWFjT1MgY8OzIHRo4buDIGPDsyBj4bqldSB0csO6YyBraMOhY1xuICAgICAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2RhcndpbicgJiYgIWZzLmV4aXN0c1N5bmMoZmFsbGJhY2tQYXRoKSkge1xuICAgICAgICAgIC8vIFRo4butIHTDrG0gdHJvbmcgUmVzb3VyY2VzXG4gICAgICAgICAgZmFsbGJhY2tQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MucmVzb3VyY2VzUGF0aCwgJ2xvY2FsZXMnLCAndmknLCAnY29tbW9uLmpzb24nKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNw7RpIHRyxrDhu51uZyBkZXZlbG9wbWVudFxuICAgICAgICBmYWxsYmFja1BhdGggPSBwYXRoLmpvaW4oYXBwLmdldEFwcFBhdGgoKSwgJ3JlbmRlcmVyJywgJ2xvY2FsZXMnLCAndmknLCAnY29tbW9uLmpzb24nKVxuICAgICAgfVxuICAgICAgXG4gICAgICBsb2coYPCflI0gQXBwOiBUcnlpbmcgZmFsbGJhY2sgYXQ6ICR7ZmFsbGJhY2tQYXRofWApXG4gICAgICBcbiAgICAgIGlmIChmcy5leGlzdHNTeW5jKGZhbGxiYWNrUGF0aCkpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmYWxsYmFja1BhdGgsICd1dGY4JylcbiAgICAgICAgY29uc3QgdHJhbnNsYXRpb25zID0gSlNPTi5wYXJzZShkYXRhKVxuICAgICAgICBcbiAgICAgICAgLy8gQ+G6rXAgbmjhuq10IHTDqm4g4bupbmcgZOG7pW5nIG7hur91IGPDs1xuICAgICAgICBpZiAodHJhbnNsYXRpb25zICYmIHRyYW5zbGF0aW9ucy5hcHAgJiYgdHJhbnNsYXRpb25zLmFwcC50aXRsZSkge1xuICAgICAgICAgIGFwcC5uYW1lID0gdHJhbnNsYXRpb25zLmFwcC50aXRsZVxuICAgICAgICAgIGxvZyhg4pyFIEFwcDogVXBkYXRlZCBhcHAgbmFtZSB0byBcIiR7YXBwLm5hbWV9XCIgKGZhbGxiYWNrIHRvIHZpKWApXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZyhg4p2MIEFwcDogRmFsbGJhY2sgdHJhbnNsYXRpb24gZmlsZSBub3QgZm91bmQgYXQgJHtmYWxsYmFja1BhdGh9YClcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZyhg4p2MIEFwcDogRXJyb3IgdXBkYXRpbmcgYXBwIG5hbWU6ICR7ZXJyLm1lc3NhZ2V9YClcbiAgfVxufVxuXG4vLyDEkMSDbmcga8O9IGzhuq9uZyBuZ2hlIHPhu7Ega2nhu4duIHRoYXkgxJHhu5VpIG5nw7RuIG5n4buvIGNobyB0w6puIOG7qW5nIGThu6VuZ1xuZnVuY3Rpb24gc2V0dXBBcHBOYW1lTG9jYWxpemF0aW9uKCkge1xuICBhcHBTdGF0ZS5hZGRMaXN0ZW5lcignbGFuZ3VhZ2UnLCAobGFuZ3VhZ2UpID0+IHtcbiAgICBsb2coYPCfjJAgQXBwOiBMYW5ndWFnZSBjaGFuZ2VkIHRvICR7bGFuZ3VhZ2V9LCB1cGRhdGluZyBhcHAgbmFtZWApXG4gICAgdXBkYXRlQXBwTmFtZSgpXG4gIH0pXG59XG5cbi8vIEjDoG0gY+G6rXAgbmjhuq10IEFib3V0IFBhbmVsIHbhu5tpIGjhu5cgdHLhu6MgxJFhIG5nw7RuIG5n4buvXG5mdW5jdGlvbiBzZXR1cEFib3V0UGFuZWwoKSB7XG4gIC8vIMSQ4buNYyBmaWxlIHRyYW5zbGF0aW9uIGThu7FhIHRyw6puIG5nw7RuIG5n4buvIGhp4buHbiB04bqhaVxuICBjb25zdCBjdXJyZW50TGFuZ3VhZ2UgPSBhcHBTdGF0ZS5sYW5ndWFnZSB8fCAndmknXG4gIGNvbnN0IGlzUHJvZCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbidcbiAgXG4gIC8vIMSQ4buNYyBmaWxlIHRyYW5zbGF0aW9uIHThu6sgdGjGsCBt4bulYyBsb2NhbGVzXG4gIGxldCB0cmFuc2xhdGlvbnMgPSB7fVxuICB0cnkge1xuICAgIGxldCB0cmFuc2xhdGlvblBhdGhcbiAgICBcbiAgICBpZiAoaXNQcm9kKSB7XG4gICAgICAvLyBUcm9uZyBtw7RpIHRyxrDhu51uZyBwcm9kdWN0aW9uLCDEkcaw4budbmcgZOG6q24gdOG7m2kgdGjGsCBt4bulYyBsb2NhbGVzIMSRw6MgZ2nhuqNpIG7DqW5cbiAgICAgIGNvbnN0IGFwcFBhdGggPSBhcHAuZ2V0QXBwUGF0aCgpXG4gICAgICBjb25zdCBhcHBEaXIgPSBwYXRoLmRpcm5hbWUoYXBwUGF0aClcbiAgICAgIFxuICAgICAgLy8gVGjhu60gdMOsbSB0cm9uZyB0aMawIG3hu6VjIGxvY2FsZXMgZ2nhuqNpIG7DqW4g4bufIGPDuW5nIGPhuqVwIHbhu5tpIGFwcC5hc2FyXG4gICAgICB0cmFuc2xhdGlvblBhdGggPSBwYXRoLmpvaW4oYXBwRGlyLCAnbG9jYWxlcycsIGN1cnJlbnRMYW5ndWFnZSwgJ2NvbW1vbi5qc29uJylcbiAgICAgIFxuICAgICAgLy8gVHLDqm4gbWFjT1MgY8OzIHRo4buDIGPDsyBj4bqldSB0csO6YyBraMOhY1xuICAgICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICdkYXJ3aW4nICYmICFmcy5leGlzdHNTeW5jKHRyYW5zbGF0aW9uUGF0aCkpIHtcbiAgICAgICAgLy8gVGjhu60gdMOsbSB0cm9uZyBSZXNvdXJjZXNcbiAgICAgICAgdHJhbnNsYXRpb25QYXRoID0gcGF0aC5qb2luKHByb2Nlc3MucmVzb3VyY2VzUGF0aCwgJ2xvY2FsZXMnLCBjdXJyZW50TGFuZ3VhZ2UsICdjb21tb24uanNvbicpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE3DtGkgdHLGsOG7nW5nIGRldmVsb3BtZW50XG4gICAgICB0cmFuc2xhdGlvblBhdGggPSBwYXRoLmpvaW4oYXBwLmdldEFwcFBhdGgoKSwgJ3JlbmRlcmVyJywgJ2xvY2FsZXMnLCBjdXJyZW50TGFuZ3VhZ2UsICdjb21tb24uanNvbicpXG4gICAgfVxuICAgIFxuICAgIGxvZyhg8J+UjSBBYm91dCBQYW5lbDogVHJ5aW5nIHRvIGxvYWQgdHJhbnNsYXRpb25zIGZyb206ICR7dHJhbnNsYXRpb25QYXRofWApXG4gICAgXG4gICAgaWYgKGZzLmV4aXN0c1N5bmModHJhbnNsYXRpb25QYXRoKSkge1xuICAgICAgY29uc3QgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyh0cmFuc2xhdGlvblBhdGgsICd1dGY4JylcbiAgICAgIHRyYW5zbGF0aW9ucyA9IEpTT04ucGFyc2UoZGF0YSlcbiAgICAgIGxvZyhg4pyFIEFib3V0IFBhbmVsOiBMb2FkZWQgJHtjdXJyZW50TGFuZ3VhZ2V9IHRyYW5zbGF0aW9ucyBzdWNjZXNzZnVsbHlgKVxuICAgIH0gZWxzZSB7XG4gICAgICBsb2coYOKdjCBBYm91dCBQYW5lbDogVHJhbnNsYXRpb24gZmlsZSBub3QgZm91bmQgZm9yICR7Y3VycmVudExhbmd1YWdlfSBhdCAke3RyYW5zbGF0aW9uUGF0aH1gKVxuICAgICAgLy8gRmFsbGJhY2sgdG8gVmlldG5hbWVzZVxuICAgICAgbGV0IGZhbGxiYWNrUGF0aFxuICAgICAgXG4gICAgICBpZiAoaXNQcm9kKSB7XG4gICAgICAgIC8vIFRyb25nIG3DtGkgdHLGsOG7nW5nIHByb2R1Y3Rpb25cbiAgICAgICAgY29uc3QgYXBwUGF0aCA9IGFwcC5nZXRBcHBQYXRoKClcbiAgICAgICAgY29uc3QgYXBwRGlyID0gcGF0aC5kaXJuYW1lKGFwcFBhdGgpXG4gICAgICAgIFxuICAgICAgICAvLyBUaOG7rSB0w6xtIHRyb25nIHRoxrAgbeG7pWMgbG9jYWxlcyBnaeG6o2kgbsOpblxuICAgICAgICBmYWxsYmFja1BhdGggPSBwYXRoLmpvaW4oYXBwRGlyLCAnbG9jYWxlcycsICd2aScsICdjb21tb24uanNvbicpXG4gICAgICAgIFxuICAgICAgICAvLyBUcsOqbiBtYWNPUyBjw7MgdGjhu4MgY8OzIGPhuqV1IHRyw7pjIGtow6FjXG4gICAgICAgIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnZGFyd2luJyAmJiAhZnMuZXhpc3RzU3luYyhmYWxsYmFja1BhdGgpKSB7XG4gICAgICAgICAgLy8gVGjhu60gdMOsbSB0cm9uZyBSZXNvdXJjZXNcbiAgICAgICAgICBmYWxsYmFja1BhdGggPSBwYXRoLmpvaW4ocHJvY2Vzcy5yZXNvdXJjZXNQYXRoLCAnbG9jYWxlcycsICd2aScsICdjb21tb24uanNvbicpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE3DtGkgdHLGsOG7nW5nIGRldmVsb3BtZW50XG4gICAgICAgIGZhbGxiYWNrUGF0aCA9IHBhdGguam9pbihhcHAuZ2V0QXBwUGF0aCgpLCAncmVuZGVyZXInLCAnbG9jYWxlcycsICd2aScsICdjb21tb24uanNvbicpXG4gICAgICB9XG4gICAgICBcbiAgICAgIGxvZyhg8J+UjSBBYm91dCBQYW5lbDogVHJ5aW5nIGZhbGxiYWNrIGF0OiAke2ZhbGxiYWNrUGF0aH1gKVxuICAgICAgXG4gICAgICBpZiAoZnMuZXhpc3RzU3luYyhmYWxsYmFja1BhdGgpKSB7XG4gICAgICAgIGNvbnN0IGZhbGxiYWNrRGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmYWxsYmFja1BhdGgsICd1dGY4JylcbiAgICAgICAgdHJhbnNsYXRpb25zID0gSlNPTi5wYXJzZShmYWxsYmFja0RhdGEpXG4gICAgICAgIGxvZyhg4pyFIEFib3V0IFBhbmVsOiBMb2FkZWQgZmFsbGJhY2sgKHZpKSB0cmFuc2xhdGlvbnNgKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nKGDinYwgQWJvdXQgUGFuZWw6IEZhbGxiYWNrIHRyYW5zbGF0aW9uIGZpbGUgbm90IGZvdW5kIGF0ICR7ZmFsbGJhY2tQYXRofWApXG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2coYOKdjCBBYm91dCBQYW5lbDogRXJyb3IgbG9hZGluZyB0cmFuc2xhdGlvbnM6ICR7ZXJyLm1lc3NhZ2V9YClcbiAgICAvLyBDb250aW51ZSB3aXRoIGVtcHR5IHRyYW5zbGF0aW9ucyBvYmplY3RcbiAgfVxuICBcbiAgLy8gSGVscGVyIGZ1bmN0aW9uIMSR4buDIGzhuqV5IHRyYW5zbGF0aW9uIHN0cmluZ1xuICBjb25zdCB0ID0gKGtleSwgcGFyYW1zID0ge30pID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gUGjDom4gdMOhY2gga2V5XG4gICAgICBjb25zdCBrZXlQYXJ0cyA9IGtleS5zcGxpdCgnLicpXG4gICAgICBsZXQgcmVzdWx0ID0gdHJhbnNsYXRpb25zXG4gICAgICBcbiAgICAgIC8vIER1eeG7h3QgcXVhIGPDoWMgcGjhuqduIGPhu6dhIGtleVxuICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIGtleVBhcnRzKSB7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0W3BhcnRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHRbcGFydF1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4ga2V5IC8vIFRy4bqjIHbhu4Ega2V5IGfhu5FjIG7hur91IGtow7RuZyB0w6xtIHRo4bqleSBk4buLY2hcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBUaGF5IHRo4bq/IGPDoWMgdGhhbSBz4buRXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKHBhcmFtS2V5ID0+IHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShgeyR7cGFyYW1LZXl9fWAsIHBhcmFtc1twYXJhbUtleV0pXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZyhg4p2MIEFib3V0IFBhbmVsOiBUcmFuc2xhdGlvbiBlcnJvciBmb3Iga2V5ICR7a2V5fTogJHtlcnIubWVzc2FnZX1gKVxuICAgICAgcmV0dXJuIGtleVxuICAgIH1cbiAgfVxuICBcbiAgLy8gQ+G6pXUgaMOsbmggQWJvdXQgcGFuZWwgduG7m2kgdGjDtG5nIHRpbiDEkWEgbmfDtG4gbmfhu69cbiAgYXBwLnNldEFib3V0UGFuZWxPcHRpb25zKHtcbiAgICBhcHBsaWNhdGlvbk5hbWU6IHQoJ2FwcC5uYW1lJyksXG4gICAgYXBwbGljYXRpb25WZXJzaW9uOiBhcHAuZ2V0VmVyc2lvbigpLFxuICAgIHZlcnNpb246IGFwcC5nZXRWZXJzaW9uKCksXG4gICAgY29weXJpZ2h0OiB0KCdzZXR0aW5ncy5hYm91dC5saWNlbnNlVGV4dCcpLFxuICAgIGNyZWRpdHM6IHQoJ3NldHRpbmdzLmFib3V0LnRlYW1NZW1iZXJzJyksXG4gICAgaWNvblBhdGg6IGlzUHJvZCBcbiAgICAgID8gcGF0aC5qb2luKHByb2Nlc3MucmVzb3VyY2VzUGF0aCwgJ2ljb24ucG5nJylcbiAgICAgIDogcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL3Jlc291cmNlcy9pY29uLnBuZycpXG4gIH0pXG59XG5cbi8vIMSQxINuZyBrw70gbOG6r25nIG5naGUgc+G7sSBraeG7h24gdGhheSDEkeG7lWkgbmfDtG4gbmfhu69cbmZ1bmN0aW9uIHNldHVwQWJvdXRQYW5lbExvY2FsaXphdGlvbigpIHtcbiAgYXBwU3RhdGUuYWRkTGlzdGVuZXIoJ2xhbmd1YWdlJywgKGxhbmd1YWdlKSA9PiB7XG4gICAgbG9nKGDwn4yQIEFib3V0IFBhbmVsOiBMYW5ndWFnZSBjaGFuZ2VkIHRvICR7bGFuZ3VhZ2V9LCB1cGRhdGluZyBhYm91dCBwYW5lbGApXG4gICAgc2V0dXBBYm91dFBhbmVsKClcbiAgfSlcbn1cblxuLy8gSW1wb3J0IHN0b3JhZ2UgYWRhcHRlciBmb3IgU1FMaXRlIHN0b3JhZ2VcbmNvbnN0IFN0b3JhZ2VBZGFwdGVyID0gcmVxdWlyZSgnLi4vbGliL3N0b3JhZ2UtYWRhcHRlcicpXG5cbi8vIEltcG9ydCBhbGwgaGFuZGxlcnNcbmNvbnN0IGFjY291bnRIYW5kbGVycyA9IHJlcXVpcmUoJy4vaGFuZGxlcnMvYWNjb3VudEhhbmRsZXJzJylcbmNvbnN0IHByb3h5SGFuZGxlcnMgPSByZXF1aXJlKCcuL2hhbmRsZXJzL3Byb3h5SGFuZGxlcnMnKVxuY29uc3Qgcm9vbUhhbmRsZXJzID0gcmVxdWlyZSgnLi9oYW5kbGVycy9yb29tSGFuZGxlcnMnKVxuY29uc3QgYnVsa09wZXJhdGlvbkhhbmRsZXJzID0gcmVxdWlyZSgnLi9oYW5kbGVycy9idWxrT3BlcmF0aW9uSGFuZGxlcnMnKVxuY29uc3Qgc2V0dGluZ3NIYW5kbGVycyA9IHJlcXVpcmUoJy4vaGFuZGxlcnMvc2V0dGluZ3NIYW5kbGVycycpXG5jb25zdCBmb2xkZXJIYW5kbGVycyA9IHJlcXVpcmUoJy4vaGFuZGxlcnMvZm9sZGVySGFuZGxlcnMnKVxuY29uc3QgdXRpbGl0eUhhbmRsZXJzID0gcmVxdWlyZSgnLi9oYW5kbGVycy91dGlsaXR5SGFuZGxlcnMnKVxuY29uc3QgdGFza0hhbmRsZXJzID0gcmVxdWlyZSgnLi9oYW5kbGVycy90YXNrSGFuZGxlcnMnKVxuY29uc3Qgbm90aWZpY2F0aW9uSGFuZGxlcnMgPSByZXF1aXJlKCcuL2hhbmRsZXJzL25vdGlmaWNhdGlvbkhhbmRsZXJzJylcblxuLy8gSW5pdGlhbGl6ZSBkYXRhIG1hbmFnZXJzXG5sZXQgc3RvcmFnZU1hbmFnZXIsIGFjY291bnRNYW5hZ2VyLCBwcm94eU1hbmFnZXIsIGNvbmZpZ01hbmFnZXJcblxuLy8gSW5pdGlhbGl6ZSBtYW5hZ2VycyBhc3luY2hyb25vdXNseVxuYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZU1hbmFnZXJzKCkge1xuICB0cnkge1xuICAgIC8vIEto4bufaSB04bqhbyBTUUxpdGUgc3RvcmFnZSBcbiAgICBzdG9yYWdlTWFuYWdlciA9IG5ldyBTdG9yYWdlQWRhcHRlcigpXG4gICAgYXdhaXQgc3RvcmFnZU1hbmFnZXIuaW5pdCgpXG4gICAgXG4gICAgbG9nKGDwn5eE77iPIFN0b3JhZ2UgaW5pdGlhbGl6ZWQ6ICR7c3RvcmFnZU1hbmFnZXIuZ2V0U3RvcmFnZVR5cGUoKS50b1VwcGVyQ2FzZSgpfWApXG4gICAgbG9nKCfinIUgVXNpbmcgU1FMaXRlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UnKVxuICAgIFxuICAgIC8vIFThuqFvIHdyYXBwZXIgbWFuYWdlcnMgxJHhu4MgdMawxqFuZyB0aMOtY2ggduG7m2kgSVBDIGhhbmRsZXJzXG4gICAgYWNjb3VudE1hbmFnZXIgPSB7XG4gICAgICBhc3luYyBnZXRBbGxBY2NvdW50cygpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN0b3JhZ2VNYW5hZ2VyLmdldEFsbEFjY291bnRzKCk7XG4gICAgICB9LFxuICAgICAgXG4gICAgICBhc3luYyBhZGRBY2NvdW50KGFjY291bnQpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN0b3JhZ2VNYW5hZ2VyLmFkZEFjY291bnQoYWNjb3VudCk7XG4gICAgICB9LFxuICAgICAgXG4gICAgICBhc3luYyBkZWxldGVBY2NvdW50KGFjY291bnRJZCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgc3RvcmFnZU1hbmFnZXIuZGVsZXRlQWNjb3VudChhY2NvdW50SWQpO1xuICAgICAgfSxcbiAgICAgIFxuICAgICAgYXN5bmMgdXBkYXRlQWNjb3VudChhY2NvdW50SWQsIHVwZGF0ZXMpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN0b3JhZ2VNYW5hZ2VyLnVwZGF0ZUFjY291bnQoYWNjb3VudElkLCB1cGRhdGVzKTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIGFzeW5jIGdldEFjY291bnRzQnlGb2xkZXIoZm9sZGVySWQpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN0b3JhZ2VNYW5hZ2VyLmdldEFjY291bnRzQnlGb2xkZXIoZm9sZGVySWQpO1xuICAgICAgfSxcbiAgICAgIFxuICAgICAgYXN5bmMgaW1wb3J0RnJvbVRleHQodGV4dCwgZm9sZGVySWQpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN0b3JhZ2VNYW5hZ2VyLmltcG9ydEFjY291bnRzRnJvbVRleHQodGV4dCwgZm9sZGVySWQpO1xuICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgcHJveHlNYW5hZ2VyID0ge1xuICAgICAgYXN5bmMgZ2V0QWxsUHJveGllcygpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN0b3JhZ2VNYW5hZ2VyLmdldEFsbFByb3hpZXMoKTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIGFzeW5jIGFkZFByb3h5KHByb3h5KSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBzdG9yYWdlTWFuYWdlci5hZGRQcm94eShwcm94eSk7XG4gICAgICB9LFxuICAgICAgXG4gICAgICBhc3luYyBkZWxldGVQcm94eShwcm94eUlkKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBzdG9yYWdlTWFuYWdlci5kZWxldGVQcm94eShwcm94eUlkKTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIGFzeW5jIHVwZGF0ZVByb3h5KHByb3h5SWQsIHVwZGF0ZXMpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN0b3JhZ2VNYW5hZ2VyLnVwZGF0ZVByb3h5KHByb3h5SWQsIHVwZGF0ZXMpO1xuICAgICAgfSxcbiAgICAgIFxuICAgICAgYXN5bmMgZ2V0UHJveGllc0J5Rm9sZGVyKGZvbGRlcklkKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBzdG9yYWdlTWFuYWdlci5nZXRQcm94aWVzQnlGb2xkZXIoZm9sZGVySWQpO1xuICAgICAgfSxcbiAgICAgIFxuICAgICAgYXN5bmMgdGVzdFByb3h5KHByb3h5SWQpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN0b3JhZ2VNYW5hZ2VyLnRlc3RQcm94eShwcm94eUlkKTtcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIGFzeW5jIGltcG9ydEZyb21UZXh0KHRleHQsIGZvbGRlcklkKSB7XG4gICAgICAgIC8vIFPhu61hIGzhuqFpIMSR4buDIGfhu41pIHF1YSBzdG9yYWdlTWFuYWdlclxuICAgICAgICB0cnkge1xuICAgICAgICAgIGxvZyhg8J+TpSBH4buNaSBpbXBvcnRQcm94aWVzRnJvbVRleHQgduG7m2kgdGV4dCBkw6BpICR7dGV4dC5sZW5ndGh9IHbDoCBmb2xkZXIgJHtmb2xkZXJJZH1gKTtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdG9yYWdlTWFuYWdlci5pbXBvcnRQcm94aWVzRnJvbVRleHQodGV4dCwgZm9sZGVySWQpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGVycm9yKCfinYwgTOG7l2kga2hpIGltcG9ydCBwcm94aWVzIHThu6sgdGV4dDonLCBlcnIpO1xuICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyLm1lc3NhZ2UgfTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFxuICAgICAgYXN5bmMgYnVsa01vdmVQcm94aWVzVG9Gb2xkZXIocHJveHlJZHMsIGZvbGRlcklkKSB7XG4gICAgICAgIC8vIFPhu61hIGzhuqFpIMSR4buDIGfhu41pIHF1YSBzdG9yYWdlTWFuYWdlclxuICAgICAgICB0cnkge1xuICAgICAgICAgIGxvZyhg8J+TpiDEkGFuZyBn4buNaSBidWxrTW92ZVByb3hpZXNUb0ZvbGRlciB24bubaSAke3Byb3h5SWRzLmxlbmd0aH0gcHJveGllcyB2w6AgZm9sZGVyICR7Zm9sZGVySWR9YCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gS2nhu4NtIHRyYSB0aGFtIHPhu5EgxJHhuqd1IHbDoG9cbiAgICAgICAgICBpZiAoIXByb3h5SWRzIHx8ICFBcnJheS5pc0FycmF5KHByb3h5SWRzKSB8fCBwcm94eUlkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVycm9yKCfinYwgTOG7l2k6IHByb3h5SWRzIGtow7RuZyBo4bujcCBs4buHOicsIHByb3h5SWRzKTtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0Rhbmggc8OhY2ggcHJveHkga2jDtG5nIGjhu6NwIGzhu4cgaG/hurdjIHLhu5duZycgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKCFmb2xkZXJJZCB8fCB0eXBlb2YgZm9sZGVySWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBlcnJvcign4p2MIEzhu5dpOiBmb2xkZXJJZCBraMO0bmcgaOG7o3AgbOG7hzonLCBmb2xkZXJJZCk7XG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdJRCB0aMawIG3hu6VjIGtow7RuZyBo4bujcCBs4buHJyB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBLaeG7g20gdHJhIHhlbSBwaMawxqFuZyB0aOG7qWMgdOG7k24gdOG6oWkga2jDtG5nXG4gICAgICAgICAgaWYgKHR5cGVvZiBzdG9yYWdlTWFuYWdlci5idWxrTW92ZVByb3hpZXNUb0ZvbGRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZXJyb3IoJ+KdjCBM4buXaTogUGjGsMahbmcgdGjhu6ljIGJ1bGtNb3ZlUHJveGllc1RvRm9sZGVyIGtow7RuZyB04buTbiB04bqhaSB0cm9uZyBzdG9yYWdlTWFuYWdlcicpO1xuICAgICAgICAgICAgbG9nKCdDw6FjIHBoxrDGoW5nIHRo4bupYyBjw7Mgc+G6tW46JywgT2JqZWN0LmtleXMoc3RvcmFnZU1hbmFnZXIpKTtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ1BoxrDGoW5nIHRo4bupYyBraMO0bmcgxJHGsOG7o2MgaOG7lyB0cuG7oy4gVnVpIGzDsm5nIGPhuq1wIG5o4bqtdCBwaGnDqm4gYuG6o24gYXBwLicgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgbG9nKCfwn5OmIEfhu41pIHBoxrDGoW5nIHRo4bupYyBzdG9yYWdlTWFuYWdlci5idWxrTW92ZVByb3hpZXNUb0ZvbGRlcicpO1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN0b3JhZ2VNYW5hZ2VyLmJ1bGtNb3ZlUHJveGllc1RvRm9sZGVyKHByb3h5SWRzLCBmb2xkZXJJZCk7XG4gICAgICAgICAgbG9nKCfwn5OmIEvhur90IHF14bqjOicsIHJlc3VsdCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgZXJyb3IoJ+KdjCBM4buXaSBraGkgZGkgY2h1eeG7g24gcHJveGllczonLCBlcnIpO1xuICAgICAgICAgIHJldHVybiB7IFxuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsIFxuICAgICAgICAgICAgZXJyb3I6IGBM4buXaSBraGkgZGkgY2h1eeG7g24gcHJveGllczogJHtlcnIubWVzc2FnZX1gLFxuICAgICAgICAgICAgc3RhY2s6IGVyci5zdGFja1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcbiAgICAgIGFzeW5jIGJ1bGtUZXN0UHJveGllcyhwcm94eUlkcykge1xuICAgICAgICAvLyBT4butYSBs4bqhaSDEkeG7gyBn4buNaSBxdWEgc3RvcmFnZU1hbmFnZXJcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBsb2coYPCflI0gR+G7jWkgYnVsa1Rlc3RQcm94aWVzIHbhu5tpICR7cHJveHlJZHMubGVuZ3RofSBwcm94aWVzYCk7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3RvcmFnZU1hbmFnZXIuYnVsa1Rlc3RQcm94aWVzKHByb3h5SWRzKTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGxvZygn4p2MIEzhu5dpIGtoaSB0ZXN0IHByb3hpZXM6JywgZXJyb3IpO1xuICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9O1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXG4gICAgICBhc3luYyBleHBvcnRQcm94aWVzKGZvcm1hdCwgcHJveHlJZHMpIHtcbiAgICAgICAgLy8gU+G7rWEgbOG6oWkgxJHhu4MgZ+G7jWkgcXVhIHN0b3JhZ2VNYW5hZ2VyXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbG9nKGDwn5OkIEfhu41pIGV4cG9ydFByb3hpZXMgduG7m2kgZm9ybWF0ICR7Zm9ybWF0fWApO1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN0b3JhZ2VNYW5hZ2VyLmV4cG9ydFByb3hpZXMoZm9ybWF0LCBwcm94eUlkcyk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBsb2coJ+KdjCBM4buXaSBraGkgZXhwb3J0IHByb3hpZXM6JywgZXJyb3IpO1xuICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBcbiAgICBjb25maWdNYW5hZ2VyID0ge1xuICAgICAgYXN5bmMgZ2V0U2V0dGluZ3MoKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBzdG9yYWdlTWFuYWdlci5nZXRTZXR0aW5ncygpO1xuICAgICAgfSxcbiAgICAgIFxuICAgICAgYXN5bmMgc2F2ZVNldHRpbmdzKHNldHRpbmdzKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBzdG9yYWdlTWFuYWdlci5zYXZlU2V0dGluZ3Moc2V0dGluZ3MpO1xuICAgICAgfSxcbiAgICAgIFxuICAgICAgYXN5bmMgcmVzZXRTZXR0aW5ncygpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHN0b3JhZ2VNYW5hZ2VyLnJlc2V0U2V0dGluZ3MoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIGxvZygnU3RvcmFnZS1iYXNlZCBtYW5hZ2VycyBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHknKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvcignRXJyb3IgaW5pdGlhbGl6aW5nIG1hbmFnZXJzOicsIGVycilcbiAgICBcbiAgICAvLyBVbHRpbWF0ZSBmYWxsYmFja1xuICAgIGFjY291bnRNYW5hZ2VyID0ge1xuICAgICAgZ2V0QWxsQWNjb3VudHM6IGFzeW5jICgpID0+IFtdLFxuICAgICAgYWRkQWNjb3VudDogYXN5bmMgKCkgPT4gKHsgc3VjY2VzczogdHJ1ZSB9KSxcbiAgICAgIGRlbGV0ZUFjY291bnQ6IGFzeW5jICgpID0+ICh7IHN1Y2Nlc3M6IHRydWUgfSlcbiAgICB9XG4gICAgXG4gICAgcHJveHlNYW5hZ2VyID0ge1xuICAgICAgZ2V0QWxsUHJveGllczogYXN5bmMgKCkgPT4gW10sXG4gICAgICBhZGRQcm94eTogYXN5bmMgKCkgPT4gKHsgc3VjY2VzczogdHJ1ZSB9KSxcbiAgICAgIGRlbGV0ZVByb3h5OiBhc3luYyAoKSA9PiAoeyBzdWNjZXNzOiB0cnVlIH0pLFxuICAgICAgdGVzdFByb3h5OiBhc3luYyAoKSA9PiAoeyBzdWNjZXNzOiB0cnVlLCBsYXRlbmN5OiAnNTBtcycgfSlcbiAgICB9XG4gICAgXG4gICAgY29uZmlnTWFuYWdlciA9IHtcbiAgICAgIGdldFNldHRpbmdzOiBhc3luYyAoKSA9PiAoeyB0aGVtZTogJ2RhcmsnLCBsYW5ndWFnZTogJ3ZpJyB9KSxcbiAgICAgIHNhdmVTZXR0aW5nczogYXN5bmMgKCkgPT4gKHsgc3VjY2VzczogdHJ1ZSB9KSxcbiAgICAgIHJlc2V0U2V0dGluZ3M6IGFzeW5jICgpID0+ICh7IHN1Y2Nlc3M6IHRydWUgfSlcbiAgICB9XG4gIH1cbn1cblxuaWYgKGlzUHJvZCkge1xuICBzZXJ2ZSh7IFxuICAgIGRpcmVjdG9yeTogJ2FwcCcsXG4gICAgc2NoZW1lOiAnYXBwJyxcbiAgICBob3N0bmFtZTogJ2xvY2FsaG9zdCdcbiAgfSlcbn0gZWxzZSB7XG4gIGFwcC5zZXRQYXRoKCd1c2VyRGF0YScsIGAke2FwcC5nZXRQYXRoKCd1c2VyRGF0YScpfSAoZGV2ZWxvcG1lbnQpYClcbn1cblxuLy8gQ+G6rXAgbmjhuq10IHZpZXdlck1hbmFnZXIgxJHhu4MgcXXhuqNuIGzDvSDEkcO6bmcgc+G7kSBsxrDhu6NuZyB2aWV3ZXJzXG5sZXQgdmlld2VyTWFuYWdlciA9IHtcbiAgaXNSdW5uaW5nOiBmYWxzZSxcbiAgdmlld2VyczogW10sXG4gIGFjY291bnRzOiBbXSxcbiAgcm9vbVN0YXRzOiBuZXcgTWFwKCksIC8vIEzGsHUgc3RhdHMgY2hvIHThu6tuZyByb29tXG4gIFxuICBhc3luYyBzdGFydChjb25maWcpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5pc1J1bm5pbmcgPSB0cnVlO1xuICAgICAgdGhpcy5hY2NvdW50cyA9IGNvbmZpZy5hY2NvdW50cyB8fCBbXTtcbiAgICAgIFxuICAgICAgLy8gVOG6oW8gdmlld2VycyBjaG8gdOG7q25nIGFjY291bnRcbiAgICAgIHRoaXMudmlld2VycyA9IHRoaXMuYWNjb3VudHMubWFwKChhY2NvdW50LCBpbmRleCkgPT4gKHtcbiAgICAgICAgaWQ6IGB2aWV3ZXJfJHtpbmRleH1gLFxuICAgICAgICBhY2NvdW50OiBhY2NvdW50LFxuICAgICAgICBzdGF0dXM6ICdjb25uZWN0aW5nJyxcbiAgICAgICAgcm9vbUlkOiBjb25maWcucm9vbUlkXG4gICAgICB9KSk7XG4gICAgICBcbiAgICAgIC8vIFNpbXVsYXRlIHZpZXdlciBjb25uZWN0aW9uc1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMudmlld2Vycy5mb3JFYWNoKHZpZXdlciA9PiB7XG4gICAgICAgICAgdmlld2VyLnN0YXR1cyA9ICdjb25uZWN0ZWQnO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEPhuq1wIG5o4bqtdCByb29tIHN0YXRzXG4gICAgICAgIGlmIChjb25maWcucm9vbUlkKSB7XG4gICAgICAgICAgdGhpcy5yb29tU3RhdHMuc2V0KGNvbmZpZy5yb29tSWQsIHtcbiAgICAgICAgICAgIGN1cnJlbnRWaWV3ZXJzOiB0aGlzLnZpZXdlcnMuZmlsdGVyKHYgPT4gdi5zdGF0dXMgPT09ICdjb25uZWN0ZWQnKS5sZW5ndGgsXG4gICAgICAgICAgICBzdGF0dXM6ICdydW5uaW5nJyxcbiAgICAgICAgICAgIGFjY291bnRzOiB0aGlzLmFjY291bnRzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxvZyhgVGlrVG9rIHZpZXdlciBzdGFydGVkIHN1Y2Nlc3NmdWxseSB3aXRoICR7dGhpcy52aWV3ZXJzLmxlbmd0aH0gdmlld2Vyc2ApO1xuICAgICAgfSwgMjAwMCk7XG4gICAgICBcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6ICdWaWV3ZXIgc3RhcnRlZCBzdWNjZXNzZnVsbHknIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZygnRXJyb3Igc3RhcnRpbmcgdmlld2VyOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBlcnJvci5tZXNz