lLCBmLmNvbG9yIGFzIGZvbGRlckNvbG9yXG4gICAgICAgICAgICAgICAgRlJPTSBhY2NvdW50cyBhXG4gICAgICAgICAgICAgICAgTEVGVCBKT0lOIGZvbGRlcnMgZiBPTiBhLmZvbGRlcklkID0gZi5pZFxuICAgICAgICAgICAgICAgIFdIRVJFIGEuZm9sZGVySWQgPSA/XG4gICAgICAgICAgICAgICAgT1JERVIgQlkgYS51c2VybmFtZSBBU0NcbiAgICAgICAgICAgIGApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBhY2NvdW50cyA9IHN0bXQuYWxsKGZvbGRlcklkKTtcbiAgICAgICAgICAgIGxvZyhg8J+TiiDEkOG7jWMgxJHGsOG7o2MgJHthY2NvdW50cy5sZW5ndGh9IHTDoGkga2hv4bqjbiB24bubaSBmb2xkZXJJZDogJHtmb2xkZXJJZH1gKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gWOG7rSBsw70gZOG7ryBsaeG7h3UgdHLhuqMgduG7gVxuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc2VkQWNjb3VudHMgPSBhY2NvdW50cy5tYXAoYWNjb3VudCA9PiB7XG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgYWN0aXZlUm9vbXMgdOG7qyBKU09OIHN0cmluZ1xuICAgICAgICAgICAgICAgIGxldCBhY3RpdmVSb29tcyA9IFtdO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY2NvdW50LmFjdGl2ZVJvb21zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVSb29tcyA9IEpTT04ucGFyc2UoYWNjb3VudC5hY3RpdmVSb29tcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yKCfinYwgTOG7l2kgcGFyc2UgYWN0aXZlUm9vbXM6JywgZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFjhu60gbMO9IG1ldGFkYXRhXG4gICAgICAgICAgICAgICAgbGV0IG1ldGFkYXRhID0ge307XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjY291bnQubWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhID0gSlNPTi5wYXJzZShhY2NvdW50Lm1ldGFkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IoJ+KdjCBM4buXaSBwYXJzZSBtZXRhZGF0YTonLCBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uYWNjb3VudCxcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29udmVydCBCb29sZWFuIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICBpc0xpdmU6IEJvb2xlYW4oYWNjb3VudC5pc0xpdmUpLFxuICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSBKU09OIGZpZWxkc1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmVSb29tczogYWN0aXZlUm9vbXMsXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtZXRhZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgLy8gS2VlcCBJU08gZGF0ZSBzdHJpbmdzXG4gICAgICAgICAgICAgICAgICAgIGxhc3RBY3RpdmU6IGFjY291bnQubGFzdEFjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlZEF0OiBhY2NvdW50LmNyZWF0ZWRBdCxcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZEF0OiBhY2NvdW50LnVwZGF0ZWRBdFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbG9nKGDinIUgxJDDoyB44butIGzDvSAke3Byb2Nlc3NlZEFjY291bnRzLmxlbmd0aH0gdMOgaSBraG/huqNuLCB0cuG6oyB24buBIGNobyBVSWApO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VyaWFsaXplRm9ySVBDKHByb2Nlc3NlZEFjY291bnRzKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yKCfinYwgRXJyb3IgZ2V0dGluZyBhY2NvdW50cyBieSBmb2xkZXI6JywgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGjDqm0gYWNjb3VudCBt4bubaVxuICAgICAqL1xuICAgIGFzeW5jIGFkZEFjY291bnQoYWNjb3VudERhdGEpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGFjY291bnRJZCA9IHRoaXMuZ2VuZXJhdGVJZCgpO1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgY29uc3QgdXNlcm5hbWUgPSB0aGlzLmV4dHJhY3RVc2VybmFtZShhY2NvdW50RGF0YSk7XG5cbiAgICAgICAgICAgIC8vIERlYnVnIGluZm9cbiAgICAgICAgICAgIGxvZyhg8J+TnSBBZGRpbmcgYWNjb3VudDogJHt1c2VybmFtZX1gKTtcbiAgICAgICAgICAgIGxvZyhgLSBTZXNzaW9uSWQ6ICR7YWNjb3VudERhdGEuc2Vzc2lvbklkID8gJ1llcyAobGVuZ3RoOiAnICsgYWNjb3VudERhdGEuc2Vzc2lvbklkLmxlbmd0aCArICcpJyA6ICdObyd9YCk7XG4gICAgICAgICAgICBsb2coYC0gRm9sZGVySWQ6ICR7YWNjb3VudERhdGEuZm9sZGVySWQgfHwgJ251bGwnfWApO1xuICAgICAgICAgICAgbG9nKGAtIFN0YXR1czogJHthY2NvdW50RGF0YS5zdGF0dXMgfHwgJ2FjdGl2ZSd9YCk7XG4gICAgICAgICAgICBsb2coYC0gTm90ZXM6ICR7YWNjb3VudERhdGEubm90ZXMgPyAnWWVzIChsZW5ndGg6ICcgKyBhY2NvdW50RGF0YS5ub3Rlcy5sZW5ndGggKyAnKScgOiAnTm8nfWApO1xuICAgICAgICAgICAgbG9nKGAtIEhhcyBtZXRhZGF0YTogJHthY2NvdW50RGF0YS5tZXRhZGF0YSA/ICdZZXMnIDogJ05vJ31gKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2h1eeG7g24gxJHhu5VpIG1ldGFkYXRhIHRow6BuaCBjaHXhu5dpIEpTT05cbiAgICAgICAgICAgIGxldCBtZXRhZGF0YUpzb24gPSAne30nO1xuICAgICAgICAgICAgaWYgKGFjY291bnREYXRhLm1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhY2NvdW50RGF0YS5tZXRhZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtp4buDbSB0cmEgeGVtIMSRw6MgbMOgIEpTT04gY2jGsGFcbiAgICAgICAgICAgICAgICAgICAgICAgIEpTT04ucGFyc2UoYWNjb3VudERhdGEubWV0YWRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGFKc29uID0gYWNjb3VudERhdGEubWV0YWRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YUpzb24gPSBKU09OLnN0cmluZ2lmeShhY2NvdW50RGF0YS5tZXRhZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbG9nKGAtIE1ldGFkYXRhIHBhcnNlZCBzdWNjZXNzZnVsbHlgKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IoYOKdjCBFcnJvciBwYXJzaW5nIG1ldGFkYXRhOmAsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhSnNvbiA9IEpTT04uc3RyaW5naWZ5KHt9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHN0bXQgPSB0aGlzLmRiLnByZXBhcmUoYFxuICAgICAgICAgICAgICAgIElOU0VSVCBJTlRPIGF